{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/images/background-01.jpg","path":"images/background-01.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":1},{"_id":"source/assets/img/project/360.png","path":"assets/img/project/360.png","modified":0,"renderable":0},{"_id":"source/assets/img/project/zhile-ui.png","path":"assets/img/project/zhile-ui.png","modified":0,"renderable":0},{"_id":"source/assets/img/project/lol.png","path":"assets/img/project/lol.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"2aa76ab1b328f52b5e3ea384ff3dabdf326a68bb","modified":1556365321240},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/_posts/github上预览vue项目.md","hash":"8b7e1debd868abf18ab278f627650367bf1ed7c0","modified":1556350120883},{"_id":"source/_posts/hello-world.md","hash":"c5b0bd1f199f7c894659c9710a40ca1fa62e7b6e","modified":1556352526955},{"_id":"source/_posts/vue 结合 webpack 开发项目流程.md","hash":"91ebf03cd23ea5e36acb9360e9cb565784ea8988","modified":1556355706792},{"_id":"source/_posts/vue-cli3 配置详解.md","hash":"f1df1a99f38268c510372b05e2f1d57ce35e15ef","modified":1556355719605},{"_id":"source/about/index.md","hash":"a30128de78a7fa95d8171fe82b0bd412c87db75f","modified":1542468329781},{"_id":"source/commonweal/index.md","hash":"2986619ad6d443462b74f7b252b722dff59bcf89","modified":1542468254623},{"_id":"source/categories/index.md","hash":"25e809918559a6c0450de451b4861a981530e2f5","modified":1542467462178},{"_id":"source/project/index.md","hash":"5acdc9fcc861c8cb470a550b0c77642638c7f10c","modified":1556354917449},{"_id":"source/schedule/index.md","hash":"f210fd16970e7d585db5a009e7aac7250232348f","modified":1542468052444},{"_id":"source/sitemap/index.md","hash":"64021f9f731b51ad83204ac662d01d5d125c62bb","modified":1542467732221},{"_id":"source/tags/index.md","hash":"af89409e5b5dc1cfcc7d891aecfaf1615682baca","modified":1542467608290},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c4d22c4185fde8286ecae7368d3d9e9bd6af901f","modified":1556357731107},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"00ca04166bf1d867c0df9e87f47a29faf916eac8","modified":1542452784092},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"aac3fd8092182203058c522a121d9ee59b5ba228","modified":1542454158723},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"b1dcbb13d987c7d60a3b53dcc2f8b0927968f1e1","modified":1542454313449},{"_id":"themes/next/source/images/avatar.jpg","hash":"8ef7f0d524663ffeda98d65b9058358e9469feb6","modified":1502866530000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1542451849763},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"951c79e06ccce23837a2c1d274dab73eadf4cbbc","modified":1542465869569},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1542451679062},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"3d09d2f202b30d4462dc6201e8e818fa59799e22","modified":1542465863904},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"d9e150e27c1a8c6403e0c35e2313aeccec28526f","modified":1542471149966},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8ee81d0739d32011e6d978d81b04156d4c8f9341","modified":1542466209967},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"e7b022cd314395a150d2208f8638409278b909fd","modified":1542466643977},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1542452505001},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1542450468480},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1542449940355},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2aaf8cd5c56c62c9d20f28894f51d55da9213027","modified":1542448242978},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/images/background-01.jpg","hash":"2192778c71a9702adb9b4e0175305d10afc8f45e","modified":1542466979207},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"themes/next/source/images/background.jpg","hash":"e4fecf54a262bf16d79a65c436a404538d237c5d","modified":1502866530000},{"_id":"source/project/index.html","hash":"c69899e4b68e209114cc116877215cf7377b4b55","modified":1556364316379},{"_id":"public/about/index.html","hash":"373f16b1f9cc8230f5a6c915f60998ae5d37ab27","modified":1556358368055},{"_id":"public/commonweal/index.html","hash":"7553f4eeb293592dccd3207504e78933f2521778","modified":1556358368055},{"_id":"public/categories/index.html","hash":"e4f8757fc305dddede97c320702936d9922234f1","modified":1556358368056},{"_id":"public/sitemap/index.html","hash":"a9a342ffd69e4072bbee834423e1d8aaa8bd3992","modified":1556358368057},{"_id":"public/schedule/index.html","hash":"a43e2555f10f09ebfe71504515411c29a424bbfd","modified":1556358368057},{"_id":"public/tags/index.html","hash":"eba7e75fc667f34a7b5d12859b5d552385e1c90f","modified":1556358368057},{"_id":"public/2013/12/02/hello-world/index.html","hash":"d3cd8597fe2ce36e6823fa6f00a397573c0cfce5","modified":1556358368057},{"_id":"public/archives/index.html","hash":"ba9864891b86c34ef50f2bec181c867e9b253f79","modified":1556358368057},{"_id":"public/archives/2013/index.html","hash":"a459e073d211fcd1acb6e948c189e5f42bd6a18f","modified":1556358368057},{"_id":"public/archives/2013/12/index.html","hash":"531bbfc357ee252e9f00acfb9d5fbf334d1ff4b4","modified":1556358368057},{"_id":"public/archives/2018/index.html","hash":"85c3b50af2f70accb9fa05b6677d8a501e081002","modified":1556358368057},{"_id":"public/archives/2018/11/index.html","hash":"df91d595e99cb6cf849e339e1bb70c81d00fbb75","modified":1556358368057},{"_id":"public/archives/2019/index.html","hash":"83405db989ef2ce2db01672351ab6944735ba270","modified":1556358368058},{"_id":"public/archives/2019/04/index.html","hash":"5b5d83606b80755bc218e09780f71013ef07a9dc","modified":1556358368058},{"_id":"public/categories/Hello-World/index.html","hash":"ff8bae86e93711a922bdf00f7f5c74df47d04be8","modified":1556358368058},{"_id":"public/categories/前端/index.html","hash":"a02a26fdbbf0061635896d84d5c00ce2dad37d71","modified":1556358368058},{"_id":"public/tags/前端/index.html","hash":"87edc376a9f524af9714567682de5d48ffd1da3d","modified":1556358368059},{"_id":"public/tags/博客/index.html","hash":"b9538dc65e59ad6e81912e6b63b54a2ef87569f1","modified":1556358368059},{"_id":"public/tags/vue/index.html","hash":"182772e1726c54eaa8ebb48c8a17dec279ba300d","modified":1556358368059},{"_id":"public/tags/github/index.html","hash":"5eafc1d30c46a62c3740fcc71cc334ac51d45bbc","modified":1556358368059},{"_id":"public/tags/webpack/index.html","hash":"6f7b4e5a91983bfdd315d08cf5e3b389aaa22178","modified":1556358368059},{"_id":"public/tags/vue-cli/index.html","hash":"1eb54cd48c0f9a6b2db6c88b1afda37382a026b0","modified":1556358368059},{"_id":"public/2019/04/27/github上预览vue项目/index.html","hash":"afb42344eae9b64e904ccb9725e16c6d8ffc8939","modified":1556358368059},{"_id":"public/2019/04/27/vue-cli3 配置详解/index.html","hash":"e148cc1a118a8f9f762f37030a586e890f93d106","modified":1556358368059},{"_id":"public/2018/11/17/vue 结合 webpack 开发项目流程/index.html","hash":"841c1bd51b75cb425b4eee01c608e14157bd8057","modified":1556358368059},{"_id":"public/project/index.html","hash":"6bd060a359f3010476dd4f9b6d98d5e07547b168","modified":1556365337575},{"_id":"public/index.html","hash":"236018c841127a68a29f86925a77bdbfbaf6fb54","modified":1556358368060},{"_id":"source/project/img/zhile-ui.png","hash":"e0fb4d79d733423bac7a118da113ad597c1aa7d5","modified":1556358755837},{"_id":"source/project/img/lol.png","hash":"5c28881d1556b6eda3a195ec23429c656f1aec95","modified":1556363527751},{"_id":"source/assets/style/common.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556363971055},{"_id":"source/assets/img/project/360.png","hash":"6590304257813430055bd20b0a9c182523699d43","modified":1556364000967},{"_id":"source/assets/img/project/zhile-ui.png","hash":"e0fb4d79d733423bac7a118da113ad597c1aa7d5","modified":1556364000967},{"_id":"source/assets/img/project/lol.png","hash":"5c28881d1556b6eda3a195ec23429c656f1aec95","modified":1556364000967},{"_id":"public/assets/style/common.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556365337575},{"_id":"public/assets/img/project/360.png","hash":"6590304257813430055bd20b0a9c182523699d43","modified":1556365337581},{"_id":"public/assets/img/project/zhile-ui.png","hash":"e0fb4d79d733423bac7a118da113ad597c1aa7d5","modified":1556365337581},{"_id":"public/assets/img/project/lol.png","hash":"5c28881d1556b6eda3a195ec23429c656f1aec95","modified":1556365337592}],"Category":[{"name":"Hello World","_id":"cjuz8suz70004f4f44mdy0xiq"},{"name":"前端","_id":"cjuz8suzm0008f4f40w08ykaw"}],"Data":[],"Page":[{"title":"关于","date":"2018-11-17T15:15:11.000Z","type":"about","_content":"\n2018-11-11重启博客\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-11-17 23:15:11\ntype: \"about\"\n---\n\n2018-11-11重启博客\n","updated":"2018-11-17T15:25:29.781Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjuz8suz70001f4f4ndc9o4jm","content":"<p>2018-11-11重启博客</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2018-11-11重启博客</p>\n"},{"title":"公益 404","date":"2018-11-17T15:15:41.000Z","type":"commonweal","_content":"","source":"commonweal/index.md","raw":"---\ntitle: 公益 404\ndate: 2018-11-17 23:15:41\ntype: \"commonweal\"\n---\n","updated":"2018-11-17T15:24:14.623Z","path":"commonweal/index.html","comments":1,"layout":"page","_id":"cjuz8suz70003f4f4cwizyncg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-11-17T15:08:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-11-17 23:08:51\ntype: \"categories\"\n---\n","updated":"2018-11-17T15:11:02.178Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjuz8sv4r000yf4f4e8qoce8x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"项目展示","date":"2019-04-27T08:23:58.000Z","type":"project","layout":"false","_content":"","source":"project/index.md","raw":"---\ntitle: 项目展示\ndate: 2019-04-27 16:23:58\ntype: \"project\"\nlayout : false\n---","updated":"2019-04-27T08:48:37.449Z","path":"project/index.html","_id":"cjuz8sv4r000zf4f4ozc38kne","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2018-11-17T15:15:32.000Z","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2018-11-17 23:15:32\n---\n","updated":"2018-11-17T15:15:32.221Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"cjuz8sv4r0010f4f4l7drdnjd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"日程表","date":"2018-11-17T15:15:22.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: 日程表\ndate: 2018-11-17 23:15:22\ntype: \"schedule\"\n---\n","updated":"2018-11-17T15:20:52.444Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjuz8sv4r0011f4f44v1mrr7i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-11-17T15:12:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-11-17 23:12:46\ntype: \"tags\"\n---\n","updated":"2018-11-17T15:13:28.290Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjuz8sv560012f4f4fj6fqmqa","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>项目展示</title>\n    <style>\n        .title {\n            text-align: center;\n        }\n\n        .list {\n            list-style: none;\n            padding: 0px !important;\n        }\n\n        .item {\n            list-style: none;\n            display: flex;\n            background-color: rgba(255, 255, 255, 0.5);\n            box-shadow: 0px 0px 10px #ccc;\n            border-radius: 4px;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .item:last-child {\n            margin-bottom: 0px;\n        }\n        .item:hover,\n        .item:focus {\n            background-color: #fff;\n            box-shadow: 0px 0px 10px rgb(148, 148, 148);\n        }\n\n        a {\n            border: none;\n            flex-shrink: 0;\n        }\n\n        .item-img {\n            width: 400px;\n            height: 260px;\n            border-radius: 4px;\n            margin-bottom: 0px !important;\n        }\n\n\n\n        .item-content {\n            padding: 0px 20px;\n            display: flex;\n            flex-direction: column;\n            justify-content: space-between;\n            flex: 1;\n        }\n\n\n        .item-title {\n            margin: 10px 0px;\n            padding: 0px;\n        }\n\n        .item-note {\n            margin: 0px;\n            padding: 0px;\n        }\n\n        .btn-box {\n            padding-bottom: 30px;\n        }\n\n        .btn-box > a.button {\n            cursor: pointer;\n            padding: 10px 30px;\n            color: #fff;\n            vertical-align: -webkit-baseline-middle;\n            border-radius: 50px;\n            background-image: linear-gradient(90deg, #00aeff 0%, #3369e7 100%);\n        }\n\n        .button:hover {\n            color: #fff;\n            box-shadow: 0 0px 4px 0 rgba(51, 105, 231, 0.8);\n        }\n        .btn-line {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: #fff;\n            box-shadow: none;\n            cursor: pointer;\n            padding: 10px 30px;\n            border-radius: 50px;\n            vertical-align: -webkit-baseline-middle;\n        }\n        .btn-line:hover {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: rgba(101, 146, 238, 0.1);\n        }\n        .button,.btn-line {\n            margin-right: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <h1 class=\"title\">项目展示</h1>\n    <ul class=\"list\">\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/zhile-ui.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">zhile-ui 基于 vue 开发的 ui 库</h3>\n                    <p class=\"item-note\">基于vue开发的一套PC端UI组件库</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/zhile-ui/#/\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/zhile-ui\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/lol.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">LOL英雄联盟官网</h3>\n                    <p class=\"item-note\">防英雄联盟官网-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/lol/\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/lol\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/360.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">360浏览器宣传页面</h3>\n                    <p class=\"item-note\">360浏览器宣传页面-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/360/\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/360\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n    </ul>\n</body>\n\n</html>","source":"project/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>项目展示</title>\n    <style>\n        .title {\n            text-align: center;\n        }\n\n        .list {\n            list-style: none;\n            padding: 0px !important;\n        }\n\n        .item {\n            list-style: none;\n            display: flex;\n            background-color: rgba(255, 255, 255, 0.5);\n            box-shadow: 0px 0px 10px #ccc;\n            border-radius: 4px;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .item:last-child {\n            margin-bottom: 0px;\n        }\n        .item:hover,\n        .item:focus {\n            background-color: #fff;\n            box-shadow: 0px 0px 10px rgb(148, 148, 148);\n        }\n\n        a {\n            border: none;\n            flex-shrink: 0;\n        }\n\n        .item-img {\n            width: 400px;\n            height: 260px;\n            border-radius: 4px;\n            margin-bottom: 0px !important;\n        }\n\n\n\n        .item-content {\n            padding: 0px 20px;\n            display: flex;\n            flex-direction: column;\n            justify-content: space-between;\n            flex: 1;\n        }\n\n\n        .item-title {\n            margin: 10px 0px;\n            padding: 0px;\n        }\n\n        .item-note {\n            margin: 0px;\n            padding: 0px;\n        }\n\n        .btn-box {\n            padding-bottom: 30px;\n        }\n\n        .btn-box > a.button {\n            cursor: pointer;\n            padding: 10px 30px;\n            color: #fff;\n            vertical-align: -webkit-baseline-middle;\n            border-radius: 50px;\n            background-image: linear-gradient(90deg, #00aeff 0%, #3369e7 100%);\n        }\n\n        .button:hover {\n            color: #fff;\n            box-shadow: 0 0px 4px 0 rgba(51, 105, 231, 0.8);\n        }\n        .btn-line {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: #fff;\n            box-shadow: none;\n            cursor: pointer;\n            padding: 10px 30px;\n            border-radius: 50px;\n            vertical-align: -webkit-baseline-middle;\n        }\n        .btn-line:hover {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: rgba(101, 146, 238, 0.1);\n        }\n        .button,.btn-line {\n            margin-right: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <h1 class=\"title\">项目展示</h1>\n    <ul class=\"list\">\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/zhile-ui.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">zhile-ui 基于 vue 开发的 ui 库</h3>\n                    <p class=\"item-note\">基于vue开发的一套PC端UI组件库</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/zhile-ui/#/\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/zhile-ui\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/lol.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">LOL英雄联盟官网</h3>\n                    <p class=\"item-note\">防英雄联盟官网-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/lol/\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/lol\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/360.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">360浏览器宣传页面</h3>\n                    <p class=\"item-note\">360浏览器宣传页面-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/360/\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/360\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n    </ul>\n</body>\n\n</html>","date":"2019-04-27T11:25:16.379Z","updated":"2019-04-27T11:25:16.379Z","path":"project/index.html","_id":"cjuzb4vee0000rwf4s4hvsmtg","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>项目展示</title>\n    <style>\n        .title {\n            text-align: center;\n        }\n\n        .list {\n            list-style: none;\n            padding: 0px !important;\n        }\n\n        .item {\n            list-style: none;\n            display: flex;\n            background-color: rgba(255, 255, 255, 0.5);\n            box-shadow: 0px 0px 10px #ccc;\n            border-radius: 4px;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .item:last-child {\n            margin-bottom: 0px;\n        }\n        .item:hover,\n        .item:focus {\n            background-color: #fff;\n            box-shadow: 0px 0px 10px rgb(148, 148, 148);\n        }\n\n        a {\n            border: none;\n            flex-shrink: 0;\n        }\n\n        .item-img {\n            width: 400px;\n            height: 260px;\n            border-radius: 4px;\n            margin-bottom: 0px !important;\n        }\n\n\n\n        .item-content {\n            padding: 0px 20px;\n            display: flex;\n            flex-direction: column;\n            justify-content: space-between;\n            flex: 1;\n        }\n\n\n        .item-title {\n            margin: 10px 0px;\n            padding: 0px;\n        }\n\n        .item-note {\n            margin: 0px;\n            padding: 0px;\n        }\n\n        .btn-box {\n            padding-bottom: 30px;\n        }\n\n        .btn-box > a.button {\n            cursor: pointer;\n            padding: 10px 30px;\n            color: #fff;\n            vertical-align: -webkit-baseline-middle;\n            border-radius: 50px;\n            background-image: linear-gradient(90deg, #00aeff 0%, #3369e7 100%);\n        }\n\n        .button:hover {\n            color: #fff;\n            box-shadow: 0 0px 4px 0 rgba(51, 105, 231, 0.8);\n        }\n        .btn-line {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: #fff;\n            box-shadow: none;\n            cursor: pointer;\n            padding: 10px 30px;\n            border-radius: 50px;\n            vertical-align: -webkit-baseline-middle;\n        }\n        .btn-line:hover {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: rgba(101, 146, 238, 0.1);\n        }\n        .button,.btn-line {\n            margin-right: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <h1 class=\"title\">项目展示</h1>\n    <ul class=\"list\">\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/zhile-ui.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">zhile-ui 基于 vue 开发的 ui 库</h3>\n                    <p class=\"item-note\">基于vue开发的一套PC端UI组件库</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/zhile-ui/#/\" target=\"_blank\" rel=\"noopener\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/zhile-ui\" target=\"_blank\" rel=\"noopener\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/lol.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">LOL英雄联盟官网</h3>\n                    <p class=\"item-note\">防英雄联盟官网-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/lol/\" target=\"_blank\" rel=\"noopener\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/lol\" target=\"_blank\" rel=\"noopener\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/360.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">360浏览器宣传页面</h3>\n                    <p class=\"item-note\">360浏览器宣传页面-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/360/\" target=\"_blank\" rel=\"noopener\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/360\" target=\"_blank\" rel=\"noopener\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n    </ul>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>项目展示</title>\n    <style>\n        .title {\n            text-align: center;\n        }\n\n        .list {\n            list-style: none;\n            padding: 0px !important;\n        }\n\n        .item {\n            list-style: none;\n            display: flex;\n            background-color: rgba(255, 255, 255, 0.5);\n            box-shadow: 0px 0px 10px #ccc;\n            border-radius: 4px;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .item:last-child {\n            margin-bottom: 0px;\n        }\n        .item:hover,\n        .item:focus {\n            background-color: #fff;\n            box-shadow: 0px 0px 10px rgb(148, 148, 148);\n        }\n\n        a {\n            border: none;\n            flex-shrink: 0;\n        }\n\n        .item-img {\n            width: 400px;\n            height: 260px;\n            border-radius: 4px;\n            margin-bottom: 0px !important;\n        }\n\n\n\n        .item-content {\n            padding: 0px 20px;\n            display: flex;\n            flex-direction: column;\n            justify-content: space-between;\n            flex: 1;\n        }\n\n\n        .item-title {\n            margin: 10px 0px;\n            padding: 0px;\n        }\n\n        .item-note {\n            margin: 0px;\n            padding: 0px;\n        }\n\n        .btn-box {\n            padding-bottom: 30px;\n        }\n\n        .btn-box > a.button {\n            cursor: pointer;\n            padding: 10px 30px;\n            color: #fff;\n            vertical-align: -webkit-baseline-middle;\n            border-radius: 50px;\n            background-image: linear-gradient(90deg, #00aeff 0%, #3369e7 100%);\n        }\n\n        .button:hover {\n            color: #fff;\n            box-shadow: 0 0px 4px 0 rgba(51, 105, 231, 0.8);\n        }\n        .btn-line {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: #fff;\n            box-shadow: none;\n            cursor: pointer;\n            padding: 10px 30px;\n            border-radius: 50px;\n            vertical-align: -webkit-baseline-middle;\n        }\n        .btn-line:hover {\n            color: #316de9;\n            border: 1px solid #2f6ee9;\n            background-color: rgba(101, 146, 238, 0.1);\n        }\n        .button,.btn-line {\n            margin-right: 20px;\n        }\n    </style>\n</head>\n\n<body>\n    <h1 class=\"title\">项目展示</h1>\n    <ul class=\"list\">\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/zhile-ui.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">zhile-ui 基于 vue 开发的 ui 库</h3>\n                    <p class=\"item-note\">基于vue开发的一套PC端UI组件库</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/zhile-ui/#/\" target=\"_blank\" rel=\"noopener\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/zhile-ui\" target=\"_blank\" rel=\"noopener\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/lol.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">LOL英雄联盟官网</h3>\n                    <p class=\"item-note\">防英雄联盟官网-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/lol/\" target=\"_blank\" rel=\"noopener\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/lol\" target=\"_blank\" rel=\"noopener\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n\n        <li class=\"item\">\n            <img class=\"item-img\" src=\"../assets/img/project/360.png\" alt=\"zhile-ui\">\n            <div class=\"item-content\">\n                <div class=\"item-text\">\n                    <h3 class=\"item-title\">360浏览器宣传页面</h3>\n                    <p class=\"item-note\">360浏览器宣传页面-静态页面</p>\n                </div>\n                <div class=\"btn-box\">\n                    <a class=\"button\" href=\"https://it-zhile.github.io/360/\" target=\"_blank\" rel=\"noopener\">预览项目</a>\n                    <a class=\"btn-line\" href=\"https://github.com/it-zhile/360\" target=\"_blank\" rel=\"noopener\">\n                        <i class=\"fa fa-github\" aria-hidden=\"true\"></i>\n                        <span>GitHub</span>\n                    </a>\n                </div>\n            </div>\n        </li>\n    </ul>\n</body>\n\n</html>"},{"_content":"","source":"assets/style/common.css","raw":"","date":"2019-04-27T11:19:31.055Z","updated":"2019-04-27T11:19:31.055Z","path":"assets/style/common.css","layout":"false","title":"","comments":1,"_id":"cjuzezjdy0000n8f4s3s3s6i1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World | 你好世界","date":"2013-12-02T07:30:16.000Z","description":"千呼万唤始出来，经过好一翻折腾开局第一篇 Hello World 终于诞生了","_content":"\n# Hello World \n> Hello World \n\n> my name is World\n\n![hello world](https://note.youdao.com/yws/api/personal/file/479B697EA65F4535BC81BD71119C1E7D?method=download&shareKey=50eac70727103df4d63c3215c0c286d6)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World | 你好世界\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: Hello World #分类\ntags: [前端,博客] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 千呼万唤始出来，经过好一翻折腾开局第一篇 Hello World 终于诞生了\n---\n\n# Hello World \n> Hello World \n\n> my name is World\n\n![hello world](https://note.youdao.com/yws/api/personal/file/479B697EA65F4535BC81BD71119C1E7D?method=download&shareKey=50eac70727103df4d63c3215c0c286d6)\n","slug":"hello-world","published":1,"updated":"2019-04-27T08:08:46.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuz8suz70000f4f42xvbvbmc","content":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><blockquote>\n<p>Hello World </p>\n</blockquote>\n<blockquote>\n<p>my name is World</p>\n</blockquote>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/479B697EA65F4535BC81BD71119C1E7D?method=download&amp;shareKey=50eac70727103df4d63c3215c0c286d6\" alt=\"hello world\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><blockquote>\n<p>Hello World </p>\n</blockquote>\n<blockquote>\n<p>my name is World</p>\n</blockquote>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/479B697EA65F4535BC81BD71119C1E7D?method=download&amp;shareKey=50eac70727103df4d63c3215c0c286d6\" alt=\"hello world\"></p>\n"},{"title":"github上预览vue项目","date":"2019-04-27T07:22:02.000Z","description":"利用 github 在线预览 vue 项目","_content":"\n# github上预览vue项目\n\n## build 打包 vue 项目\n\n先在vue项目中运行build将项目打包\n\n```bash\n$ npm run build\n```\n\n**注意：** 打包之前要先看下项目的config目录下的index.js文件里的build输出目录是否正确\n\n```js\n/* index.js */\n\n'use strict'\nconst path = require('path')\nconst ip = require('ip')\n\nmodule.exports = {\n  dev: {\n    // ...省略代码\n  },\n\n  build: {\n    // Template for index.html\n    index: path.resolve(__dirname, '../dist/index.html'),\n\n    // Paths\n    assetsRoot: path.resolve(__dirname, '../dist'),\n    assetsSubDirectory: 'static',\n    // 注意此处的代码，原本的 assetsPublicPath: '/' 是这样的\n    // 要将些处的路径改为：'./'，否则打包出来的引用路径不正确，页面无法正确加载显示 \n    assetsPublicPath: './',\n    // ...省略代码\n  }\n}\n```\n\n## 创建 gh-pages 分支并上传 dist 代码\n\n1. 将打包好的代码 `dist` 目录单独剪切出来。\n2. 进入 `dist` 目录并初始化 `git` 。\n3. 创建 `gh-pages` 分支。\n4. 将 `dist` 目录下的代码添加到暂存区。\n5. 添加 `git` 的更新说明。\n6. 强制 `push` 到远程仓库。\n```bash\n# 初始化 git\ngit init \n\n# 创建 gh-pages 分支\ngit checkout -b gh-pages\n\n# 将 dist 目录下的代码添加到暂存区\ngit add -A\n\n# 添加 git 的更新说明\ngit commit -m \"更新说明\"\n\n# 强制 push 到远程仓库\ngit push 仓库地址 gh-pages -f\n```\n进入 github 项目中查看 gh-pages 分支是否更新成功\n\n## 查看项目的预览地址\n\ngh-pages 分支添加成功后，点击项目右上角的 Settings 设置里的下面 GitHub Pages 此选项中就可以看到项目的预览地址：\n```\nGitHub Pages\n------------------------------------------------------------------------\nGitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.\n\n√ Your site is published at https://xxxxxxx\n```\nYour site is published at 后面的链接就是项目的预览地址","source":"_posts/github上预览vue项目.md","raw":"---\ntitle: github上预览vue项目   #文章标签\ndate: 2019-04-27 15:22:02            #文章创建时间\ncategories: 前端                      #分类\ntags: [前端,vue,github]              #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 利用 github 在线预览 vue 项目 # 文章摘要\n# photos:                             #文章标题图片\n#     - \"http://oz2tkq0zj.bkt.clouddn.com/17-11-9/52323298.jpg\"\n---\n\n# github上预览vue项目\n\n## build 打包 vue 项目\n\n先在vue项目中运行build将项目打包\n\n```bash\n$ npm run build\n```\n\n**注意：** 打包之前要先看下项目的config目录下的index.js文件里的build输出目录是否正确\n\n```js\n/* index.js */\n\n'use strict'\nconst path = require('path')\nconst ip = require('ip')\n\nmodule.exports = {\n  dev: {\n    // ...省略代码\n  },\n\n  build: {\n    // Template for index.html\n    index: path.resolve(__dirname, '../dist/index.html'),\n\n    // Paths\n    assetsRoot: path.resolve(__dirname, '../dist'),\n    assetsSubDirectory: 'static',\n    // 注意此处的代码，原本的 assetsPublicPath: '/' 是这样的\n    // 要将些处的路径改为：'./'，否则打包出来的引用路径不正确，页面无法正确加载显示 \n    assetsPublicPath: './',\n    // ...省略代码\n  }\n}\n```\n\n## 创建 gh-pages 分支并上传 dist 代码\n\n1. 将打包好的代码 `dist` 目录单独剪切出来。\n2. 进入 `dist` 目录并初始化 `git` 。\n3. 创建 `gh-pages` 分支。\n4. 将 `dist` 目录下的代码添加到暂存区。\n5. 添加 `git` 的更新说明。\n6. 强制 `push` 到远程仓库。\n```bash\n# 初始化 git\ngit init \n\n# 创建 gh-pages 分支\ngit checkout -b gh-pages\n\n# 将 dist 目录下的代码添加到暂存区\ngit add -A\n\n# 添加 git 的更新说明\ngit commit -m \"更新说明\"\n\n# 强制 push 到远程仓库\ngit push 仓库地址 gh-pages -f\n```\n进入 github 项目中查看 gh-pages 分支是否更新成功\n\n## 查看项目的预览地址\n\ngh-pages 分支添加成功后，点击项目右上角的 Settings 设置里的下面 GitHub Pages 此选项中就可以看到项目的预览地址：\n```\nGitHub Pages\n------------------------------------------------------------------------\nGitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.\n\n√ Your site is published at https://xxxxxxx\n```\nYour site is published at 后面的链接就是项目的预览地址","slug":"github上预览vue项目","published":1,"updated":"2019-04-27T07:28:40.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuz8suz70002f4f4h7ig1dxm","content":"<h1 id=\"github上预览vue项目\"><a href=\"#github上预览vue项目\" class=\"headerlink\" title=\"github上预览vue项目\"></a>github上预览vue项目</h1><h2 id=\"build-打包-vue-项目\"><a href=\"#build-打包-vue-项目\" class=\"headerlink\" title=\"build 打包 vue 项目\"></a>build 打包 vue 项目</h2><p>先在vue项目中运行build将项目打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run build</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 打包之前要先看下项目的config目录下的index.js文件里的build输出目录是否正确</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.js */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ip = <span class=\"built_in\">require</span>(<span class=\"string\">'ip'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...省略代码</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Template for index.html</span></span><br><span class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 注意此处的代码，原本的 assetsPublicPath: '/' 是这样的</span></span><br><span class=\"line\">    <span class=\"comment\">// 要将些处的路径改为：'./'，否则打包出来的引用路径不正确，页面无法正确加载显示 </span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'./'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ...省略代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-gh-pages-分支并上传-dist-代码\"><a href=\"#创建-gh-pages-分支并上传-dist-代码\" class=\"headerlink\" title=\"创建 gh-pages 分支并上传 dist 代码\"></a>创建 gh-pages 分支并上传 dist 代码</h2><ol>\n<li>将打包好的代码 <code>dist</code> 目录单独剪切出来。</li>\n<li>进入 <code>dist</code> 目录并初始化 <code>git</code> 。</li>\n<li>创建 <code>gh-pages</code> 分支。</li>\n<li>将 <code>dist</code> 目录下的代码添加到暂存区。</li>\n<li>添加 <code>git</code> 的更新说明。</li>\n<li>强制 <code>push</code> 到远程仓库。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 git</span></span><br><span class=\"line\">git init </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 gh-pages 分支</span></span><br><span class=\"line\">git checkout -b gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 dist 目录下的代码添加到暂存区</span></span><br><span class=\"line\">git add -A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 git 的更新说明</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"更新说明\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制 push 到远程仓库</span></span><br><span class=\"line\">git push 仓库地址 gh-pages -f</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>进入 github 项目中查看 gh-pages 分支是否更新成功</p>\n<h2 id=\"查看项目的预览地址\"><a href=\"#查看项目的预览地址\" class=\"headerlink\" title=\"查看项目的预览地址\"></a>查看项目的预览地址</h2><p>gh-pages 分支添加成功后，点击项目右上角的 Settings 设置里的下面 GitHub Pages 此选项中就可以看到项目的预览地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub Pages</span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">GitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.</span><br><span class=\"line\"></span><br><span class=\"line\">√ Your site is published at https://xxxxxxx</span><br></pre></td></tr></table></figure></p>\n<p>Your site is published at 后面的链接就是项目的预览地址</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"github上预览vue项目\"><a href=\"#github上预览vue项目\" class=\"headerlink\" title=\"github上预览vue项目\"></a>github上预览vue项目</h1><h2 id=\"build-打包-vue-项目\"><a href=\"#build-打包-vue-项目\" class=\"headerlink\" title=\"build 打包 vue 项目\"></a>build 打包 vue 项目</h2><p>先在vue项目中运行build将项目打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run build</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 打包之前要先看下项目的config目录下的index.js文件里的build输出目录是否正确</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.js */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ip = <span class=\"built_in\">require</span>(<span class=\"string\">'ip'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...省略代码</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Template for index.html</span></span><br><span class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 注意此处的代码，原本的 assetsPublicPath: '/' 是这样的</span></span><br><span class=\"line\">    <span class=\"comment\">// 要将些处的路径改为：'./'，否则打包出来的引用路径不正确，页面无法正确加载显示 </span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'./'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ...省略代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-gh-pages-分支并上传-dist-代码\"><a href=\"#创建-gh-pages-分支并上传-dist-代码\" class=\"headerlink\" title=\"创建 gh-pages 分支并上传 dist 代码\"></a>创建 gh-pages 分支并上传 dist 代码</h2><ol>\n<li>将打包好的代码 <code>dist</code> 目录单独剪切出来。</li>\n<li>进入 <code>dist</code> 目录并初始化 <code>git</code> 。</li>\n<li>创建 <code>gh-pages</code> 分支。</li>\n<li>将 <code>dist</code> 目录下的代码添加到暂存区。</li>\n<li>添加 <code>git</code> 的更新说明。</li>\n<li>强制 <code>push</code> 到远程仓库。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 git</span></span><br><span class=\"line\">git init </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 gh-pages 分支</span></span><br><span class=\"line\">git checkout -b gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 dist 目录下的代码添加到暂存区</span></span><br><span class=\"line\">git add -A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 git 的更新说明</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"更新说明\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制 push 到远程仓库</span></span><br><span class=\"line\">git push 仓库地址 gh-pages -f</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>进入 github 项目中查看 gh-pages 分支是否更新成功</p>\n<h2 id=\"查看项目的预览地址\"><a href=\"#查看项目的预览地址\" class=\"headerlink\" title=\"查看项目的预览地址\"></a>查看项目的预览地址</h2><p>gh-pages 分支添加成功后，点击项目右上角的 Settings 设置里的下面 GitHub Pages 此选项中就可以看到项目的预览地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub Pages</span><br><span class=\"line\">------------------------------------------------------------------------</span><br><span class=\"line\">GitHub Pages is designed to host your personal, organization, or project pages from a GitHub repository.</span><br><span class=\"line\"></span><br><span class=\"line\">√ Your site is published at https://xxxxxxx</span><br></pre></td></tr></table></figure></p>\n<p>Your site is published at 后面的链接就是项目的预览地址</p>\n"},{"title":"vue 结合 webpack 开发项目流程","date":"2018-11-17T10:06:22.000Z","_content":"# vue结合webpack开发项目流程\n\n> 案例文件夹说明：\n>\n> webpack为隔行变色案例\n>\n> vue_webpack_remould为使用隔行变色改造好的vue开发环境\n>\n> vue_webpack_demo为回顾与梳理配置的vue开发环境\n>\n> vue_webpack为使用源文件快速搭建的vue开发环境\n\n\n\n## webpack简介\n\n> 官网：https://doc.webpack-china.org/\n\n\n\n### 什么是webpack?\n\nWebPack 可以看做是 **模块打包机**：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n\n\n### webpack能做什么？\n\n#### 网页中有哪些常见的静态资源\n\n- CSS：.css、.less、.sass、.scss\n- 图片：.png、.jpg、.gif、.bmp\n- JS：.js、.coffee、.js\n- 字体：.ttf、.woff、.woff2、.svg、.eot\n- 模板文件：.jade、.vue\n\n\n\n#### 页面引入的静态资源多了以后有什么问题\n\n加载慢 ：请求次数多（因为浏览从上到下解析HTML文件，当遇到 script、link、img 会立即发起很多的二次请求；）\n\n依赖复杂：当项目大了以后，各种文件之间有很复杂的依赖关系，如果处理不好，则项目运行会经常报错！\n\n#### 如何解决上述两个问题\n\n加载慢怎么解决：图片合并成精灵图、CSS和JS进行压缩混淆合并、图片转成base64\n\n依赖问题：基于模块化，让某些模块化工具帮我们解决复杂的依赖关系\n\n#### 如何完美实现上述的2种解决方案\n\n使用Webpack或者Gulp\n\n- 借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。\n\n\n\n\n\n\n### WebPack与Grunt/Gulp的区别\n\n其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。\n\n**Grunt和Gulp的工作方式是：**在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。\n\n![](https://note.youdao.com/yws/api/personal/file/F31F51715BC34A678F1F24BEAFB1BADE?method=download&shareKey=bfe39e8162a3dacea82225140fc27a2f)\n\n**Webpack的工作方式是：**把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。\n\n![](https://note.youdao.com/yws/api/personal/file/1A328F1FAEAE4F309835016629BB98F3?method=download&shareKey=fa4b41058a6d4973ff3090c58b79b79c)\n\n如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。\n\n\n\n### 安装webpack的两种方式\n\n1. 运行 `npm i webpack -g` 全局安装webpack，这样就能在全局使用webpack的命令\n2. 在项目根目录中运行 `npm i webpack -D` 安装到项目依赖中\n\n\n\n\n## vue结合webpack搭建开发环境\n\n> webpack 是基于 node 环境开发的，所以开发之前电脑需安装 node \n>\n> node 官网：http://nodejs.cn/\n\n\n\n### 完整项目目录结构预览\n\n> 这是最终的 vue 开发环境目录，我们先从一个简单的隔行变色案例来一步一步改造成为我们需要的最终开发环境\n\n```json\n|-- src                // 项目的原文件目录 \n|   |-- components     // .vue组件存放目录\n|   |-- |-- App.vue    // 根组件\n|   |-- images\t\t   // 图片目录\n|   |-- js             // 项目的js文件存放目录\n|   |-- |-- main.js    // 项目的js打包入口文件\n|   |-- style\t\t   // 样式目录\n|   |-- util\t\t   // 项目插件工具类存放目录\n|   |-- index.html     // 文件的主页面\n|-- package.json       // 项目所需要的各种模块和配置信息\n|-- .babelrc\t\t   // 处理高级JS语法文件\n|-- webpack.config.js  // webpack的配置文件\n```\n\n\n\n### 初始化项目\n\n新建项目目录在项目目录运行命令 `npm init -y ` 初始化项目，使用npm管理项目中的依赖包，初始化完成后根目录会自动生成一个 `package.json` 该文件定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。详情参考：http://javascript.ruanyifeng.com/nodejs/packagejson.html\n\n``` bash\n$ npm init -y\n```\n\n\n\n### 在index.html书写页面结构\n\n> 这里只是为了方便后面的讲解，最终此页面会改造为一个容器，将来Vue渲染的组件，会填充到这个容器里显示\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n    <li>6</li>\n    <li>7</li>\n    <li>8</li>\n    <li>9</li>\n    <li>10</li>\n  </ul>\n</body>\n</html>\n```\n\n\n\n### 安装webpack到项目开发依赖\n\n在项目根目录中运行命令 `cnpm i webpack -D` 安装 webpack 到项目开发依赖中，安装完成后会自动生成一个 node_modules 文件夹此文件夹为 npm 安装该项目的依赖库 \n\n```bash\nnpm i webpack --save-dev\n```\n\n\n\n### 安装jquery到项目运行依赖\n\n运行命令安装 jquery.js 到项目运行依赖\n\n```bash\nnpm i jquery --save\n```\n\n\n\n### 在main.js中书写代码逻辑\n\n> 先来实现一个简单的隔行变色\n\n```javascript\n/* 这是项目的 JS 入口文件 */\n// 使用 node 的方式导入 Jquery 包\n// var $ = require('jquery');\n\n// 1.0 (推荐)使用 ES6 导入模块的方式   import *** from '模块标识符'\nimport $ from 'jquery'\n\n/* 2.0 使用 :odd 选取奇数行,使用 :even 选取偶数行 */\n$(function () {\n  $('li:odd').css('backgroundColor', 'blue');\n  $('li:even').css('backgroundColor', 'red');\n});\n```\n\n\n\n### 使用webpack处理main.js\n\n直接在 `index.html` 页面上引用 `main.js` 会报错，因为浏览器不认识 `import` 这种高级的 JS 语法，此时我们需要使用 webpack 进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；\n\n执行打包编译命令 `webpack 要打包编译的文件路径 打包编译好后输出的文件路径`\n\n```\nwebpack src/js/main.js dist/bundle.js\n```\n\n结果如下：\n\n![webpack src/js/main.js dist/bundle.js的执行结果](https://note.youdao.com/yws/api/personal/file/17869CD9722B4505B59D1E5E695838AA?method=download&shareKey=b79bc9b1c1be9a38ec34adafc8f925f0)\n\n从上图我们可以看出 `webpack` 编译了 `main.js`  \n\n执行完毕后会在根目录下生成一个 dist 文件夹此文件夹下会有一个 bundle.js 文件，这个文件就是编译好后的 main.js ，此时再在 imdex.html 页面引入 bundle.js 文件就可以看到结果了。\n\n\n\n### 创建webpack配置文件处理main.js并简化打包命令\n\n> 每次页面代码改变都要在命令行执行 `webpack src/js/main.js dist/bundle.js` 这么一大坨相当恶心，所以在项目根目录中创建 `webpack.config.js` 配置文件来简化打包命令\n\n由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以，我们需要在 `webpack.config.js` 中配置这两个路径即 entry(入口文件) 和 output(输出文件的路径)\n\n```javascript\n/* \n *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件\n *  配置文件的默认名称为 webpack.config.js \n */\n\n/*  2.0\n *  导入 Node 中的 Path(路径) 模块\n *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的\n *    问题2：为什么Node不识别 import？？？？   \n *           因为Node中的解析引擎是从 chrome中的V8移植过去的\n *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持\n *           因此 Node 也被迫不支持 import\n */\nvar path = require('path');\n// import path from 'path'\n\n\n/*  1.0\n *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式\n *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js\n *  并读取这个文件中导出的配置对象，来进行打包处理 \n */\nmodule.exports = {\n  /* 2.1\n   * entry 属性，表示要打包的文件的路径。\n   *   path.join(__dirname,'') 是node.js中的一个全局变量\n   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。\n   */\n  entry: path.join(__dirname, 'src/js/main.js'),\n  /* 2.2\n   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 \n   *   path：指定输出文件的路径\n   *   filename：指定输出文件的名称\n   */\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n}\n```\n\n配置好后直接在命令行执行 `webpack` 既可，执行 `webpack` 就相当于执行之前的 `webpack src/js/main.js dist/bundle.js`  命令。\n\n\n\n### 实现webpack的实时打包构建\n\n> 由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 `webpack-dev-server` 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。\n\n安装 webpack-dev-server 到开发依赖\n\n```\ncnpm i webpack-dev-server --save-dev\n```\n\n安装完成之后，在命令行直接运行 `webpack-dev-server` 来进行打包，发现报错，此时需要借助于 `package.json` 文件中的指令，来运行 `webpack-dev-server` 命令。\n\n在 `package.json` 文件的 `scripts` 节点下新增 `\"dev\": \"webpack-dev-server\"`  指令\n\n执行命令 `npm run dev` \n\n```\nnpm run dev\n```\n\n结果如下：\n\n![npm run dev 执行结果](https://note.youdao.com/yws/api/personal/file/E4FB23B7E92740BFA4AC48D5239B8056?method=download&shareKey=3b0496f10c8f22590f8e35265681697f)\n\n发现可以进行实时打包，但是并没有生成 dist 目录和 bundle.js 文件，这是因为 `webpack-dev-server` 将打包好的文件放在了内存中，把 `bundle.js` 放在内存中的好处是由于需要实时打包编译，所以放在内存中速度会非常快。\n\n这个时候访问启动的 `http://localhost:8080/` 网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的 index 首页。\n\n![访问 http://localhost:8080/](https://note.youdao.com/yws/api/personal/file/B9809B7C457A44E9B958434B9D8C9A35?method=download&shareKey=c087b7991223efd5188cc7fdd121f34f)\n\n点击进入首页后发现引用不到 `bundle.js` 文件，因为 `bundle.js` 此时在内存中放着，所以需要修改 `index.html` 中 `script` 的 `src` 属性为 `<script src=\"../bundle.js\"></script>` \n\n为了能在访问 `http://localhost:8080/` 的时候直接访问到index首页，可以使用 `--contentBase src` 指令来修改package.json 的 dev 指令来指定启动的根目录\n\n```json\n \"dev\": \"webpack-dev-server --contentBase src\"\n```\n\n同时修改 `index` 页面中 `script` 的 `src` 属性为 `<script src=\"bundle.js\"></script>`\n\n注意：修改 src 文件夹以外的文件后都需要重新启动终端\n\n\n\n### 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n\n**(推荐)方式1：**\n\n修改 `package.json` 的script节点如下\n\n```json\n\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"\n```\n\n| 属性                | 描述                 |\n| :---------------- | :----------------- |\n| --contentBase src | 表示指定默认打开目录为 src 目录 |\n| --open            | 表示自动打开浏览器          |\n| --port 3000       | 表示打开的端口号为3000      |\n| --hot             | 表示启用浏览器热更新         |\n\n**方式2：**\n\n1. 修改  `webpack.config.js`  文件，新增  `devServer`  节点此节点为一个对象如下：\n\n```javascript\ndevServer:{    // 这个节点配置了 webpack-dev-server 的相关指令\n    hot:true,  //启用浏览器热更新\n    open:true, //自动打开浏览器\n    port:4321，//指定端口号为4321\n    contentBase:'src'//指定打开目录为src\n}\n```\n\n2. 在头部引入`webpack`模块：\n\n```javascript\nvar webpack = require('webpack');\n```\n\n3. 新增 `plugins` 节点此节点为一个数组，在 `plugins` 节点下新增：\n\n```javascript\nplugins: [\n  new webpack.HotModuleReplacementPlugin()\n]\n```\n\n注意：`package.json`  文件里的 `script` 节点中一定要添加 `“dev”:\"webpack-dev-server\"` 才能使用 `npm run dev` 命令进行实时打包\n\n\n\n### 使用html-webpack-plugin插件配置启动页面\n\n由于使用 `--contentBase` 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 `index.html` 中 `script` 标签的 `src` 属性，所以推荐大家使用 `html-webpack-plugin` 插件配置启动页面，该插件会自动生成 `index.html` 文件并把 `bundle.js` 注入到页面中！\n\n运行命令安装 html-webpack-plugin 插件到开发依赖\n\n```\ncnpm i html-webpack-plugin --save-dev\n```\n\n修改 `webpack.config.js` 配置文件如下：\n\n```javascript\nvar path = require('path');\n/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */\nvar htmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  entry: path.join(__dirname, 'src/js/main.js'),\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  /* 3.1 添加 plugins 节点配置插件 */\n  plugins: [\n    /* 3.2 \n     * new htmlWebpackPlugin({})：实例化 html-webpack-plugin 插件\n     *   template: 指定要编译的模板文件路径\n     *   filename: 指定自动生成的HTML文件的名称\n     */\n    new htmlWebpackPlugin({\n      template: path.join(__dirname, 'src/index.html'),\n      filename: 'index.html'\n    })\n  ]\n}\n```\n\n将 `index.html` 中 `script` 标签注释掉，因为 `html-webpack-plugin` 插件会自动把 `bundle.js` 注入到 `index.html` 页面中！\n\n\n\n### loaders简介\n\n通过使用不同的 `loader`，`webpack` 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换 `scss` 为 `css`，或者把下一代的 JS 文件`（ES6，ES7)` 转换为现代浏览器兼容的 `JS` 文件，对 `React` 的开发而言，合适的 `Loaders` 可以把 `React` 的中用到的 `JSX` 文件转换为 `JS` 文件。\n\n`Loaders` 需要单独安装并且需要在 `webpack.config.js` 中的 `modules` 关键字下进行配置\n\n| 属性         | 描述                                   |\n| ---------- | ------------------------------------ |\n| test       | 用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）     |\n| loader/use | loader 的名称，use 为 2.x 的写法推荐使用 use（必须） |\n| include    | 添加必须处理的文件（文件夹）（可选）                   |\n| exclude    | 屏蔽不需要处理的文件（文件夹）（可选）                  |\n| query      | 为 loaders 提供额外的设置选项（可选）              |\n\n\n\n### 使用webpack打包css文件\n\n在页面中我们不可避免的要引入一些 CSS 文件比如说 base.css(页面样式的初始化)，我们可以在 `main.js` 里引入以作用全局。\n\n在页面中引入 CSS 可通过 main.js 里引入\n\n```javascript\n/* 3.0 使用 import '直接通过路径标识符' 引入base.css样式 */\nimport '../style/base.css'\n```\n\n引入 css 文件后发现报错：You may need an appropriate loader to handle this file type.\n\n```json\nbundle.js:sourcemap:9947 Uncaught Error: Module parse failed: Unexpected token (10:12)\nYou may need an appropriate loader to handle this file type.\n| \n| // 导入 css 文件\n| import from '../style/index.css'\n| \n| /* 使用 :odd 选取奇数行,使用 :even 选取偶数行 */\n\n    at Object.<anonymous> (bundle.js:sourcemap:9947)\n    at __webpack_require__ (bundle.js:sourcemap:679)\n    at fn (bundle.js:sourcemap:89)\n    at Object.<anonymous> (bundle.js:sourcemap:1015)\n    at __webpack_require__ (bundle.js:sourcemap:679)\n    at logLevel (bundle.js:sourcemap:725)\n    at bundle.js:sourcemap:728\n```\n\nYou may need an appropriate loader to handle this file type.（您可能需要一个合适的加载器来处理这个文件类型。）因为我们项目中没有配置处理 css 的 loader 所以才会报这个错误 \n\n安装处理 CSS文 件的 loader 到开发依赖\n\n```\ncnpm i style-loader css-loader -D\n```\n\n在 `webpack.config.js` 配置文件里添加 module 配置节点：\n\n```javascript\nvar path = require('path');\nvar htmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  entry: path.join(__dirname, 'src/js/main.js'),\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  plugins: [\n    new htmlWebpackPlugin({\n      template: path.join(__dirname, 'src/index.html'),\n      filename: 'index.html'\n    })\n  ],\n  /* 4.0 添加 module 节点用来配置第三方 loader 模块\n   *     module：用来配置第三方 loader 模块\n   *       rules：配置文件的匹配规则\n   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式\n   *         use : 表示使用哪些模块来处理\n   *               use 中相关 loader 模块的调用顺序是从后向前调用的\n   */\n  module: {\n    rules: [\n      /* 5.0 添加处理 css 文件的匹配规则 */\n      { test: /\\.css$/, use: ['style-loader', 'css-loader'] }\n    ]\n  }\n}\n```\n\n**注意**：`use` 表示使用哪些模块来处理 `test` 所匹配到的文件；`use` 中相关 loader 模块的调用顺序是从后向前调用的；\n\n\n\n### 使用webpack打包sass文件\n\n页面中除了会引用 CSS 文件外有时还会用到 SASS 文件，需要用到什么文件直接在 main.js 里导入就会作用到全局整个项目，在 main.js 中通过 import '路径标识符' 导入 index.scss 会发现报错，原因同上也是缺少相关的 loader 来处理 scss 文件，后续的 less、image 和一些高级 js语法 解决方案都一样，报错缺少什么 loader 就安装相关的 loader 即可。\n\n安装处理 sass 文件的 loader 到开发依赖\n\n```\ncnpm i sass-loader node-sass --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：\n\n```javascript\n/* 6.0 添加处理 sass 文件的匹配规则 */\n{ test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] }\n```\n\n\n\n### 使用webpack打包less文件\n\n安装处理 less 文件的 loader 到开发依赖\n\n```\ncnpm i less-loader less --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 less文件的 loader 模块匹配规则：\n\n```javascript\n/* 7.0 添加处理 less 文件的匹配规则 */\n{ test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] }\n```\n\n\n\n### 使用webpack处理css中的图片路径\n\n当我们在页面中用 \\<img> 标签来引入图片的时候没问题，但是使用 css 样式给某个标签设置背景图片就会报错，也是因为缺少相当的 loader 来处理我们 css 中的图片的路径。\n\n安装处理 url路径 的 loader 到开发依赖\n\n```\ncnpm i url-loader file-loader --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 url路径 的 loader 模块匹配规则：\n\n```javascript\n/* 8.0 添加处理 url路径 的匹配规则 */\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader' }\n```\n\n通过查看元素我们可以看到默认将背景图片转为了 base64 编码格式的图片\n\n![背景图片被转为了 base64 编码格式](https://note.youdao.com/yws/api/personal/file/9ADC8742826D45809DB61B287F3B295B?method=download&shareKey=1b23f778252e3f2ec3146a6110c77f92)\n\n可以通过`limit`指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：\n\n```javascript\n/* 8.0 添加处理 url路径 的匹配规则 */\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=2000' },\n```\n\n![指定小于2000字节的图片才会进行base64转码](https://note.youdao.com/yws/api/personal/file/F4A9E47CC2EE4406B771109A9BF11D64?method=download&shareKey=0fb8bee651e9c54ed74a7cd60f861ed9)\n\n\n\n### 使用babel处理高级JS语法\n\n现在的浏览器中只能识别部分的 ES6 语法，某些 js 的高级语法不能识别，比如 class类，我们是 main.js 里写入\n\n```javascript\n/* 6.0 在 main.js 中写入 js 高级语法 \n * 在 class 内部，不能直接写语句   \n * 在类的作用内部，只能定义 方法 和 属性\n * class 只是一个 语法糖\n */\nclass Person {\n  // 静态属性\n  static info = { adderss:\"北京\", name: 'jack', age: 16 }\n};\nconsole.log(Person.info)\n```\n\n浏览器会报错：\n\n![](https://note.youdao.com/yws/api/personal/file/EA3FBA751DF6436A91E6032BC1D1384E?method=download&shareKey=3adae98e685c9980dd9ba0de69aa0a20)\n\n所以我们需要安装 babel 来处理这些高级语法将其转换为浏览器兼容的 `JS` 文件\n\n安装处理 babel 的 loader 到开发依赖\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev\n```\n\n安装 babel 的转换语法到开发依赖\n\n```javascript\n/* 包含了所有的ES相关的语法（两者二选一，推荐）  */\ncnpm i babel-preset-env babel-preset-stage-0 --save-dev\n/* 支持ES语法到2015（两者二选一） */\ncnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加相关 loader 模块的匹配规则\n\n**注意**：一定要把 `node_modules` 文件夹添加到排除项\n\n```javascript\n/* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules 文件夹 */\n{ test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ },\n```\n\n在项目根目录中添加 `.babelrc` 文件，并修改这个配置文件如下：\n\n```javascript\n{\n\t// 注意：如果安装的ES语法支持到2015侧这里为\n    // \"presets\":[\"es2015\", \"stage-0\"],\n    \"presets\":[\"env\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n**注意：语法插件 `babel-preset-es2015` 可以更新为 `babel-preset-env` ，它包含了所有的ES相关的语法；**\n\n以上是 webpack 的一些基本的配置，下面我们将介绍如何将此案例改造成我们需要的 vue 开发环境\n\n\n\n### .vue 单文件组件\n\n> 官网：https://cn.vuejs.org/v2/guide/single-file-components.html\n\n在学习的时候我们使用  `Vue.component( 'login',  { template: '<h1>登陆组件</h1>' })` 来定义全局组件，紧接着在每个页面内指定一个容器元素。\n\n这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：\n\n- **全局定义 (Global definitions)** 强制要求每个 component 中的命名不得重复\n- **字符串模板 (String templates)** 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 `\\`\n- **不支持 CSS (No CSS support)** 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏\n- **没有构建步骤 (No build step)** 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel\n\n文件扩展名为 `.vue` 的 **single-file components(单文件组件)** 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。\n\n\n\n### 创建 Hello.vue 组件\n\n在网页中学习 `Vue` 的时候，直接把组件和 `script` 代码写到一起了，但是在使用`webpack` 结合 `vue` 开发的时候，推荐将所有的组件(页面)，单独定义为一个 `.vue` 文件，这每一个 `.vue` 文件都是一个单独的 `vue 组件` ，在每个 `.vue` 组件内部，分为 三部分： `template`  `script`  `style`\n\n```vue\n<template>\n<!-- \n\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹\n    一般都用 div 当作唯一的根元素 \n-->\n  <div>\n    <p> {{Hello}} World! </p>\n  </div>\n</template>\n<!--\n\t注意：在.vue的组件中，通过script标签来定义组件的行为\n\t需要使用ES6中提供的export default方式，导出一个vue实例对象\n-->\n<script>\nexport default {\n  data:function(){\n    return { msg: 'Hello'}\n  }\n}\n</script>\n<!-- \n注意：style标签要加上scoped属性避免后续多个组件样式覆盖 \n-->\n<style scoped>\np {\n  font-size: 20px;\n  text-align: center;\n}\n</style>\n```\n\n有了 `.vue` 组件，我们就进入了高级 JavaScript 应用领域。接下来就可以改造我们的 vue 的开发环境了。\n\n\n\n### 在webpack中配置.vue组件页面的解析\n\n改造 index.html 页面，改造好的 index.html 页面当做一个容器用来展示 vue 渲染的组件，至此这个页面后续基本不会再动了。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 -->\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n\n在 components 文件夹里创建 `App.vue` 页面根组件，在 vue 项目中所有的页面都被当作一个组件\n\n```vue\n<template>\n<!-- \n\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹\n\t一般都用 div 当作唯一的根元素 \n-->\n  <div>\n    <h1>这是APP组件 - {{msg}}</h1>\n    <h3>我是h3</h3>\n  </div>\n</template>\n<!--\n\t注意：在.vue的组件中，通过script标签来定义组件的行为，\n\t需要使用ES6中提供的export default方式，导出一个vue实例对象\n-->\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'OK'\n    }\n  }\n}\n</script>\n<!-- 注意：style标签要加上 scoped 属性避免后续多个组件样式覆盖 -->\n<style scoped>\nh1 {\n  color: red;\n}\n</style>\n```\n\n执行命令安装 vue.js 到项目运行依赖：\n\n```\ncnpm i vue -S\n```\n\n改造 `main.js` 入口文件：\n\n```javascript\n/* 1.0 导入 Vue 组件 */\nimport Vue from 'vue'\n/* 2.0 导入 App.vue 页面根组件 */\nimport App from '../components/App.vue'\n/* 3.0 创建一个 Vue 实例并使用 render 函数，渲染指定的组件 */\nvar vm = new Vue({\n  el: '#app',\n  render: c => c(App)\n});\n```\n\n现在直接运行项目 npm run dev 会报错提示缺少相当的 loader 来处理我们的 .vue 文件\n\n运行命令安装 解析转换 .vue 的 loader 为开发依赖：\n\n```\ncnpm i vue-loader vue-template-compiler -D\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹\n\n```javascript\n/* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */\n{ test: /\\.vue$/, use: 'vue-loader', exclude: /node_modules/ }\n```\n\n至此 vue 项目的基本开发环境已经搭建完成。\n\n\n\n# vue 开发环境的搭建回顾与梳理\n\n## 1.0 初始化项目\n\n新建项目文件夹，在文件夹的根目录执行 npm init -y 初始化项目，会得到 package.json 文件\n\n```\nnpm init -y\n```\n\n## 2.0 安装webpack到项目开发依赖\n\n```\ncnpm i webpack -D\n```\n\n## 3.0 创建项目结构目录\n\n```json\n|-- src                // 项目的原文件目录 \n|   |-- components     // .vue组件存放目录\n|   |-- |-- App.vue    // 根组件\n|   |-- images\t\t   // 图片目录\n|   |-- js             // 项目的js文件存放目录\n|   |-- |-- main.js    // 项目的js打包入口文件\n|   |-- style\t\t   // 样式目录\n|   |-- util\t\t   // 项目插件工具类存放目录\n|   |-- index.html     // 文件的主页面\n|-- package.json       // 项目所需要的各种模块和配置信息\n|-- .babelrc\t\t   // 处理高级JS语法文件\n|-- webpack.config.js  // webpack的配置文件\n```\n\n## 4.0 编辑 index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 -->\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n\n## 5.0 创建webpack配置文件处理main.js并简化打包命令\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n  entry: path.join(__dirname, 'src/js/main.js'),\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n}\n```\n\n## 6.0实现webpack的实时打包构建\n\n安装 webpack-dev-server 到开发依赖\n\n```\ncnpm i webpack-dev-server --save-dev\n```\n\n安装完成之后，在 `package.json` 文件的 `scripts` 节点下新增 `\"dev\": \"webpack-dev-server --contentBase src\"`  指令\n\n## 7.0 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n\n修改 `package.json` 的script节点如下\n\n```json\n\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"\n```\n\n## 8.0 使用html-webpack-plugin插件配置启动页面\n\n使用 `html-webpack-plugin` 插件配置启动页面，该插件会自动生成 `index.html` 文件并把 `bundle.js` 注入到页面中！运行命令安装 html-webpack-plugin 插件到开发依赖\n\n```\ncnpm i html-webpack-plugin --save-dev\n```\n\n修改 `webpack.config.js` 配置文件，导入html-webpack-plugin 自动生成 HTMl 文件插件并添加 plugins 节点配置插件：\n\n```javascript\nvar htmlWebpackPlugin = require('html-webpack-plugin');\n```\n\n```javascript\nplugins: [\n  new htmlWebpackPlugin({\n    template: path.join(__dirname, 'src/index.html'),\n    filename: 'index.html'\n  })\n]\n```\n\n## 9.0 使用webpack打包css文件\n\n安装处理 CSS文 件的 loader 到开发依赖\n\n```\ncnpm i style-loader css-loader -D\n```\n\n在 `webpack.config.js` 配置文件里添加 module 配置节点并添加处理 css 文件的匹配规则：\n\n```javascript\nmodule: {\n  rules: [\n    { test: /\\.css$/, use: ['style-loader', 'css-loader'] },\n  ]\n}\n```\n\n## 10. 使用webpack打包sass文件\n\n安装处理 sass 文件的 loader 到开发依赖\n\n```\ncnpm i sass-loader node-sass --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：\n\n```javascript\n{ test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] },\n```\n\n## 11. 使用webpack打包less文件\n\n安装处理 less 文件的 loader 到开发依赖\n\n```\ncnpm i less-loader less --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 less文件的 loader 模块匹配规则：\n\n```javascript\n{ test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] },\n```\n\n## 12. 使用webpack处理css中的图片路径\n\n安装处理 url路径 的 loader 到开发依赖\n\n```\ncnpm i url-loader file-loader --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 url路径 的 loader 模块匹配规则，通过`limit`指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：\n\n```javascript\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=2000' },\n```\n\n### 13. 使用babel处理高级JS语法\n\n安装处理 babel 的 loader 到开发依赖\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev\n```\n\n安装 babel 的转换语法到开发依赖\n\n```javascript\n/* 包含了所有的ES相关的语法（两者二选一，推荐）  */\ncnpm i babel-preset-env babel-preset-stage-0 --save-dev\n/* 支持ES语法到2015（两者二选一） */\ncnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加相关 loader 模块的匹配规则\n\n**注意**：一定要把 `node_modules` 文件夹添加到排除项\n\n```javascript\n{ test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ },\n```\n\n在项目根目录中添加 `.babelrc` 文件，并修改这个配置文件如下：\n\n```javascript\n{\n    \"presets\":[\"env\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n## 14. 在webpack中配置.vue组件页面的解析\n\n在 components 文件夹下新建 App.vue 根组件\n\n```vue\n<template>\n  <div id=\"app\">{{msg}}</div>\n</template>\n\n<script>\nexport default {\n  data(){\n    return {\n      msg: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  text-align: center;\n  font-size: 20px;\n}\n</style>\n```\n\n执行命令安装 vue.js 到项目运行依赖：\n\n```\ncnpm i vue -S\n```\n\n改造 `main.js` 入口文件：\n\n```javascript\nimport Vue from 'vue'\nimport App from '../components/App.vue'\nconst vm = new Vue({\n  el:'#app',\n  render: c => c(App)\n})\n```\n\n运行命令安装 解析转换 .vue 的 loader 为开发依赖：\n\n```\ncnpm i vue-loader vue-template-compiler -D\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹\n\n```javascript\n{ test: /\\.vue$/, use: 'vue-loader', exclude: /node_modules/ }\n```\n\n**vue 项目的基本开发环境搭建完成。**\n\n\n\n# 快速搭建vue项目源文件\n\n每次开发项目都要一步一步的配环境相当的麻烦，拿到三个配置文件，创建好项目结构，打开终端运行 `npm install`  或  `cnpm install`  既可自动为我们安装 package.json 里面的所以的插件依赖和 loader\n\n### package.json文件\n\n```json\n{\n  \"name\": \"vue_webpack_demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"css-loader\": \"^0.28.7\",\n    \"file-loader\": \"^1.1.5\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"less\": \"^2.7.3\",\n    \"less-loader\": \"^4.0.5\",\n    \"node-sass\": \"^4.7.2\",\n    \"sass-loader\": \"^6.0.6\",\n    \"style-loader\": \"^0.19.1\",\n    \"url-loader\": \"^0.6.2\",\n    \"vue-loader\": \"^13.5.0\",\n    \"vue-template-compiler\": \"^2.5.11\",\n    \"webpack\": \"^3.10.0\",\n    \"webpack-dev-server\": \"^2.9.7\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^2.5.11\"\n  }\n}\n```\n\n### webpack.config.js文件\n\n```javascript\n/* \n *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件\n *  配置文件的默认名称为 webpack.config.js \n */\n\n/*  2.0\n *  导入 Node 中的 Path(路径) 模块\n *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的\n *    问题2：为什么Node不识别 import？？？？   \n *           因为Node中的解析引擎是从 chrome中的V8移植过去的\n *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持\n *           因此 Node 也被迫不支持 import\n */\nvar path = require('path');\n// import path from 'path'\n\n/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */\nvar htmlWebpackPlugin = require('html-webpack-plugin');\n\n/*  1.0\n *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式\n *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js\n *  并读取这个文件中导出的配置对象，来进行打包处理 \n */\nmodule.exports = {\n  /* 2.1\n   * entry 属性，表示要打包的文件的路径。\n   *   path.join(__dirname,'') 是node.js中的一个全局变量\n   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。\n   */\n  entry: path.join(__dirname, 'src/js/main.js'),\n  /* 2.2\n   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 \n   *   path：指定输出文件的路径\n   *   filename：指定输出文件的名称\n   */\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  /* 3.1 添加 plugins 节点配置插件 */\n  plugins: [\n    /* 3.2 \n     * new htmlWebpackPlugin({})：实例化 html-webpack-plugin 插件\n     *   template: 指定要编译的模板文件路径\n     *   filename: 指定自动生成的HTML文件的名称\n     */\n    new htmlWebpackPlugin({\n      template: path.join(__dirname, 'src/index.html'),\n      filename: 'index.html'\n    })\n  ],\n  /* 4.0 添加 module 节点用来配置第三方 loader 模块\n   *     module：用来配置第三方 loader 模块\n   *       rules：配置文件的匹配规则\n   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式\n   *         use : 表示使用哪些模块来处理\n   *               use 中相关 loader 模块的调用顺序是从后向前调用的\n   */\n  module: {\n    rules: [\n      /* 5.0  添加处理 css 文件的匹配规则 */\n      { test: /\\.css$/, use: ['style-loader', 'css-loader'] },\n      /* 6.0  添加处理 sass 文件的匹配规则 */\n      { test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] },\n      /* 7.0  添加处理 less 文件的匹配规则 */\n      { test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] },\n      /* 8.0  添加处理 url路径 的匹配规则 */\n      { test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=200' },\n      /* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules文件夹 */\n      { test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ },\n      /* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */\n      { test: /\\.vue$/, use: 'vue-loader', exclude: /node_modules/ }\n    ]\n  }\n}\n```\n\n### .babelrc文件\n\n```json\n{\n\t// 注意：如果安装的ES语法支持到2015侧这里为\n    // \"presets\":[\"es2015\", \"stage-0\"],\n    \"presets\":[\"env\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n## vue结合webpack项目流程-源码下载\n[vue结合webpack项目流程-源码](https://note.youdao.com/share/?id=ab5df8e2ea58ab6e9a3b1679488b610c&type=note#/)","source":"_posts/vue 结合 webpack 开发项目流程.md","raw":"---\ntitle: vue 结合 webpack 开发项目流程   #文章标签\ndate: 2018-11-17 18:06:22             #文章创建时间\ncategories: 前端                      #分类\ntags: [前端,vue,webpack]              #文章标签，可空，多标签请用格式，注意:后面有个空格\n# description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面\n# photos:                             #文章标题图片\n#     - \"http://oz2tkq0zj.bkt.clouddn.com/17-11-9/52323298.jpg\"\n---\n# vue结合webpack开发项目流程\n\n> 案例文件夹说明：\n>\n> webpack为隔行变色案例\n>\n> vue_webpack_remould为使用隔行变色改造好的vue开发环境\n>\n> vue_webpack_demo为回顾与梳理配置的vue开发环境\n>\n> vue_webpack为使用源文件快速搭建的vue开发环境\n\n\n\n## webpack简介\n\n> 官网：https://doc.webpack-china.org/\n\n\n\n### 什么是webpack?\n\nWebPack 可以看做是 **模块打包机**：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。\n\n\n\n### webpack能做什么？\n\n#### 网页中有哪些常见的静态资源\n\n- CSS：.css、.less、.sass、.scss\n- 图片：.png、.jpg、.gif、.bmp\n- JS：.js、.coffee、.js\n- 字体：.ttf、.woff、.woff2、.svg、.eot\n- 模板文件：.jade、.vue\n\n\n\n#### 页面引入的静态资源多了以后有什么问题\n\n加载慢 ：请求次数多（因为浏览从上到下解析HTML文件，当遇到 script、link、img 会立即发起很多的二次请求；）\n\n依赖复杂：当项目大了以后，各种文件之间有很复杂的依赖关系，如果处理不好，则项目运行会经常报错！\n\n#### 如何解决上述两个问题\n\n加载慢怎么解决：图片合并成精灵图、CSS和JS进行压缩混淆合并、图片转成base64\n\n依赖问题：基于模块化，让某些模块化工具帮我们解决复杂的依赖关系\n\n#### 如何完美实现上述的2种解决方案\n\n使用Webpack或者Gulp\n\n- 借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。\n\n\n\n\n\n\n### WebPack与Grunt/Gulp的区别\n\n其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。\n\n**Grunt和Gulp的工作方式是：**在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。\n\n![](https://note.youdao.com/yws/api/personal/file/F31F51715BC34A678F1F24BEAFB1BADE?method=download&shareKey=bfe39e8162a3dacea82225140fc27a2f)\n\n**Webpack的工作方式是：**把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。\n\n![](https://note.youdao.com/yws/api/personal/file/1A328F1FAEAE4F309835016629BB98F3?method=download&shareKey=fa4b41058a6d4973ff3090c58b79b79c)\n\n如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。\n\n\n\n### 安装webpack的两种方式\n\n1. 运行 `npm i webpack -g` 全局安装webpack，这样就能在全局使用webpack的命令\n2. 在项目根目录中运行 `npm i webpack -D` 安装到项目依赖中\n\n\n\n\n## vue结合webpack搭建开发环境\n\n> webpack 是基于 node 环境开发的，所以开发之前电脑需安装 node \n>\n> node 官网：http://nodejs.cn/\n\n\n\n### 完整项目目录结构预览\n\n> 这是最终的 vue 开发环境目录，我们先从一个简单的隔行变色案例来一步一步改造成为我们需要的最终开发环境\n\n```json\n|-- src                // 项目的原文件目录 \n|   |-- components     // .vue组件存放目录\n|   |-- |-- App.vue    // 根组件\n|   |-- images\t\t   // 图片目录\n|   |-- js             // 项目的js文件存放目录\n|   |-- |-- main.js    // 项目的js打包入口文件\n|   |-- style\t\t   // 样式目录\n|   |-- util\t\t   // 项目插件工具类存放目录\n|   |-- index.html     // 文件的主页面\n|-- package.json       // 项目所需要的各种模块和配置信息\n|-- .babelrc\t\t   // 处理高级JS语法文件\n|-- webpack.config.js  // webpack的配置文件\n```\n\n\n\n### 初始化项目\n\n新建项目目录在项目目录运行命令 `npm init -y ` 初始化项目，使用npm管理项目中的依赖包，初始化完成后根目录会自动生成一个 `package.json` 该文件定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。详情参考：http://javascript.ruanyifeng.com/nodejs/packagejson.html\n\n``` bash\n$ npm init -y\n```\n\n\n\n### 在index.html书写页面结构\n\n> 这里只是为了方便后面的讲解，最终此页面会改造为一个容器，将来Vue渲染的组件，会填充到这个容器里显示\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n    <li>6</li>\n    <li>7</li>\n    <li>8</li>\n    <li>9</li>\n    <li>10</li>\n  </ul>\n</body>\n</html>\n```\n\n\n\n### 安装webpack到项目开发依赖\n\n在项目根目录中运行命令 `cnpm i webpack -D` 安装 webpack 到项目开发依赖中，安装完成后会自动生成一个 node_modules 文件夹此文件夹为 npm 安装该项目的依赖库 \n\n```bash\nnpm i webpack --save-dev\n```\n\n\n\n### 安装jquery到项目运行依赖\n\n运行命令安装 jquery.js 到项目运行依赖\n\n```bash\nnpm i jquery --save\n```\n\n\n\n### 在main.js中书写代码逻辑\n\n> 先来实现一个简单的隔行变色\n\n```javascript\n/* 这是项目的 JS 入口文件 */\n// 使用 node 的方式导入 Jquery 包\n// var $ = require('jquery');\n\n// 1.0 (推荐)使用 ES6 导入模块的方式   import *** from '模块标识符'\nimport $ from 'jquery'\n\n/* 2.0 使用 :odd 选取奇数行,使用 :even 选取偶数行 */\n$(function () {\n  $('li:odd').css('backgroundColor', 'blue');\n  $('li:even').css('backgroundColor', 'red');\n});\n```\n\n\n\n### 使用webpack处理main.js\n\n直接在 `index.html` 页面上引用 `main.js` 会报错，因为浏览器不认识 `import` 这种高级的 JS 语法，此时我们需要使用 webpack 进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；\n\n执行打包编译命令 `webpack 要打包编译的文件路径 打包编译好后输出的文件路径`\n\n```\nwebpack src/js/main.js dist/bundle.js\n```\n\n结果如下：\n\n![webpack src/js/main.js dist/bundle.js的执行结果](https://note.youdao.com/yws/api/personal/file/17869CD9722B4505B59D1E5E695838AA?method=download&shareKey=b79bc9b1c1be9a38ec34adafc8f925f0)\n\n从上图我们可以看出 `webpack` 编译了 `main.js`  \n\n执行完毕后会在根目录下生成一个 dist 文件夹此文件夹下会有一个 bundle.js 文件，这个文件就是编译好后的 main.js ，此时再在 imdex.html 页面引入 bundle.js 文件就可以看到结果了。\n\n\n\n### 创建webpack配置文件处理main.js并简化打包命令\n\n> 每次页面代码改变都要在命令行执行 `webpack src/js/main.js dist/bundle.js` 这么一大坨相当恶心，所以在项目根目录中创建 `webpack.config.js` 配置文件来简化打包命令\n\n由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以，我们需要在 `webpack.config.js` 中配置这两个路径即 entry(入口文件) 和 output(输出文件的路径)\n\n```javascript\n/* \n *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件\n *  配置文件的默认名称为 webpack.config.js \n */\n\n/*  2.0\n *  导入 Node 中的 Path(路径) 模块\n *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的\n *    问题2：为什么Node不识别 import？？？？   \n *           因为Node中的解析引擎是从 chrome中的V8移植过去的\n *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持\n *           因此 Node 也被迫不支持 import\n */\nvar path = require('path');\n// import path from 'path'\n\n\n/*  1.0\n *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式\n *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js\n *  并读取这个文件中导出的配置对象，来进行打包处理 \n */\nmodule.exports = {\n  /* 2.1\n   * entry 属性，表示要打包的文件的路径。\n   *   path.join(__dirname,'') 是node.js中的一个全局变量\n   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。\n   */\n  entry: path.join(__dirname, 'src/js/main.js'),\n  /* 2.2\n   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 \n   *   path：指定输出文件的路径\n   *   filename：指定输出文件的名称\n   */\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n}\n```\n\n配置好后直接在命令行执行 `webpack` 既可，执行 `webpack` 就相当于执行之前的 `webpack src/js/main.js dist/bundle.js`  命令。\n\n\n\n### 实现webpack的实时打包构建\n\n> 由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 `webpack-dev-server` 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。\n\n安装 webpack-dev-server 到开发依赖\n\n```\ncnpm i webpack-dev-server --save-dev\n```\n\n安装完成之后，在命令行直接运行 `webpack-dev-server` 来进行打包，发现报错，此时需要借助于 `package.json` 文件中的指令，来运行 `webpack-dev-server` 命令。\n\n在 `package.json` 文件的 `scripts` 节点下新增 `\"dev\": \"webpack-dev-server\"`  指令\n\n执行命令 `npm run dev` \n\n```\nnpm run dev\n```\n\n结果如下：\n\n![npm run dev 执行结果](https://note.youdao.com/yws/api/personal/file/E4FB23B7E92740BFA4AC48D5239B8056?method=download&shareKey=3b0496f10c8f22590f8e35265681697f)\n\n发现可以进行实时打包，但是并没有生成 dist 目录和 bundle.js 文件，这是因为 `webpack-dev-server` 将打包好的文件放在了内存中，把 `bundle.js` 放在内存中的好处是由于需要实时打包编译，所以放在内存中速度会非常快。\n\n这个时候访问启动的 `http://localhost:8080/` 网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的 index 首页。\n\n![访问 http://localhost:8080/](https://note.youdao.com/yws/api/personal/file/B9809B7C457A44E9B958434B9D8C9A35?method=download&shareKey=c087b7991223efd5188cc7fdd121f34f)\n\n点击进入首页后发现引用不到 `bundle.js` 文件，因为 `bundle.js` 此时在内存中放着，所以需要修改 `index.html` 中 `script` 的 `src` 属性为 `<script src=\"../bundle.js\"></script>` \n\n为了能在访问 `http://localhost:8080/` 的时候直接访问到index首页，可以使用 `--contentBase src` 指令来修改package.json 的 dev 指令来指定启动的根目录\n\n```json\n \"dev\": \"webpack-dev-server --contentBase src\"\n```\n\n同时修改 `index` 页面中 `script` 的 `src` 属性为 `<script src=\"bundle.js\"></script>`\n\n注意：修改 src 文件夹以外的文件后都需要重新启动终端\n\n\n\n### 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n\n**(推荐)方式1：**\n\n修改 `package.json` 的script节点如下\n\n```json\n\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"\n```\n\n| 属性                | 描述                 |\n| :---------------- | :----------------- |\n| --contentBase src | 表示指定默认打开目录为 src 目录 |\n| --open            | 表示自动打开浏览器          |\n| --port 3000       | 表示打开的端口号为3000      |\n| --hot             | 表示启用浏览器热更新         |\n\n**方式2：**\n\n1. 修改  `webpack.config.js`  文件，新增  `devServer`  节点此节点为一个对象如下：\n\n```javascript\ndevServer:{    // 这个节点配置了 webpack-dev-server 的相关指令\n    hot:true,  //启用浏览器热更新\n    open:true, //自动打开浏览器\n    port:4321，//指定端口号为4321\n    contentBase:'src'//指定打开目录为src\n}\n```\n\n2. 在头部引入`webpack`模块：\n\n```javascript\nvar webpack = require('webpack');\n```\n\n3. 新增 `plugins` 节点此节点为一个数组，在 `plugins` 节点下新增：\n\n```javascript\nplugins: [\n  new webpack.HotModuleReplacementPlugin()\n]\n```\n\n注意：`package.json`  文件里的 `script` 节点中一定要添加 `“dev”:\"webpack-dev-server\"` 才能使用 `npm run dev` 命令进行实时打包\n\n\n\n### 使用html-webpack-plugin插件配置启动页面\n\n由于使用 `--contentBase` 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 `index.html` 中 `script` 标签的 `src` 属性，所以推荐大家使用 `html-webpack-plugin` 插件配置启动页面，该插件会自动生成 `index.html` 文件并把 `bundle.js` 注入到页面中！\n\n运行命令安装 html-webpack-plugin 插件到开发依赖\n\n```\ncnpm i html-webpack-plugin --save-dev\n```\n\n修改 `webpack.config.js` 配置文件如下：\n\n```javascript\nvar path = require('path');\n/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */\nvar htmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  entry: path.join(__dirname, 'src/js/main.js'),\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  /* 3.1 添加 plugins 节点配置插件 */\n  plugins: [\n    /* 3.2 \n     * new htmlWebpackPlugin({})：实例化 html-webpack-plugin 插件\n     *   template: 指定要编译的模板文件路径\n     *   filename: 指定自动生成的HTML文件的名称\n     */\n    new htmlWebpackPlugin({\n      template: path.join(__dirname, 'src/index.html'),\n      filename: 'index.html'\n    })\n  ]\n}\n```\n\n将 `index.html` 中 `script` 标签注释掉，因为 `html-webpack-plugin` 插件会自动把 `bundle.js` 注入到 `index.html` 页面中！\n\n\n\n### loaders简介\n\n通过使用不同的 `loader`，`webpack` 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换 `scss` 为 `css`，或者把下一代的 JS 文件`（ES6，ES7)` 转换为现代浏览器兼容的 `JS` 文件，对 `React` 的开发而言，合适的 `Loaders` 可以把 `React` 的中用到的 `JSX` 文件转换为 `JS` 文件。\n\n`Loaders` 需要单独安装并且需要在 `webpack.config.js` 中的 `modules` 关键字下进行配置\n\n| 属性         | 描述                                   |\n| ---------- | ------------------------------------ |\n| test       | 用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）     |\n| loader/use | loader 的名称，use 为 2.x 的写法推荐使用 use（必须） |\n| include    | 添加必须处理的文件（文件夹）（可选）                   |\n| exclude    | 屏蔽不需要处理的文件（文件夹）（可选）                  |\n| query      | 为 loaders 提供额外的设置选项（可选）              |\n\n\n\n### 使用webpack打包css文件\n\n在页面中我们不可避免的要引入一些 CSS 文件比如说 base.css(页面样式的初始化)，我们可以在 `main.js` 里引入以作用全局。\n\n在页面中引入 CSS 可通过 main.js 里引入\n\n```javascript\n/* 3.0 使用 import '直接通过路径标识符' 引入base.css样式 */\nimport '../style/base.css'\n```\n\n引入 css 文件后发现报错：You may need an appropriate loader to handle this file type.\n\n```json\nbundle.js:sourcemap:9947 Uncaught Error: Module parse failed: Unexpected token (10:12)\nYou may need an appropriate loader to handle this file type.\n| \n| // 导入 css 文件\n| import from '../style/index.css'\n| \n| /* 使用 :odd 选取奇数行,使用 :even 选取偶数行 */\n\n    at Object.<anonymous> (bundle.js:sourcemap:9947)\n    at __webpack_require__ (bundle.js:sourcemap:679)\n    at fn (bundle.js:sourcemap:89)\n    at Object.<anonymous> (bundle.js:sourcemap:1015)\n    at __webpack_require__ (bundle.js:sourcemap:679)\n    at logLevel (bundle.js:sourcemap:725)\n    at bundle.js:sourcemap:728\n```\n\nYou may need an appropriate loader to handle this file type.（您可能需要一个合适的加载器来处理这个文件类型。）因为我们项目中没有配置处理 css 的 loader 所以才会报这个错误 \n\n安装处理 CSS文 件的 loader 到开发依赖\n\n```\ncnpm i style-loader css-loader -D\n```\n\n在 `webpack.config.js` 配置文件里添加 module 配置节点：\n\n```javascript\nvar path = require('path');\nvar htmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  entry: path.join(__dirname, 'src/js/main.js'),\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  plugins: [\n    new htmlWebpackPlugin({\n      template: path.join(__dirname, 'src/index.html'),\n      filename: 'index.html'\n    })\n  ],\n  /* 4.0 添加 module 节点用来配置第三方 loader 模块\n   *     module：用来配置第三方 loader 模块\n   *       rules：配置文件的匹配规则\n   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式\n   *         use : 表示使用哪些模块来处理\n   *               use 中相关 loader 模块的调用顺序是从后向前调用的\n   */\n  module: {\n    rules: [\n      /* 5.0 添加处理 css 文件的匹配规则 */\n      { test: /\\.css$/, use: ['style-loader', 'css-loader'] }\n    ]\n  }\n}\n```\n\n**注意**：`use` 表示使用哪些模块来处理 `test` 所匹配到的文件；`use` 中相关 loader 模块的调用顺序是从后向前调用的；\n\n\n\n### 使用webpack打包sass文件\n\n页面中除了会引用 CSS 文件外有时还会用到 SASS 文件，需要用到什么文件直接在 main.js 里导入就会作用到全局整个项目，在 main.js 中通过 import '路径标识符' 导入 index.scss 会发现报错，原因同上也是缺少相关的 loader 来处理 scss 文件，后续的 less、image 和一些高级 js语法 解决方案都一样，报错缺少什么 loader 就安装相关的 loader 即可。\n\n安装处理 sass 文件的 loader 到开发依赖\n\n```\ncnpm i sass-loader node-sass --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：\n\n```javascript\n/* 6.0 添加处理 sass 文件的匹配规则 */\n{ test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] }\n```\n\n\n\n### 使用webpack打包less文件\n\n安装处理 less 文件的 loader 到开发依赖\n\n```\ncnpm i less-loader less --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 less文件的 loader 模块匹配规则：\n\n```javascript\n/* 7.0 添加处理 less 文件的匹配规则 */\n{ test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] }\n```\n\n\n\n### 使用webpack处理css中的图片路径\n\n当我们在页面中用 \\<img> 标签来引入图片的时候没问题，但是使用 css 样式给某个标签设置背景图片就会报错，也是因为缺少相当的 loader 来处理我们 css 中的图片的路径。\n\n安装处理 url路径 的 loader 到开发依赖\n\n```\ncnpm i url-loader file-loader --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 url路径 的 loader 模块匹配规则：\n\n```javascript\n/* 8.0 添加处理 url路径 的匹配规则 */\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader' }\n```\n\n通过查看元素我们可以看到默认将背景图片转为了 base64 编码格式的图片\n\n![背景图片被转为了 base64 编码格式](https://note.youdao.com/yws/api/personal/file/9ADC8742826D45809DB61B287F3B295B?method=download&shareKey=1b23f778252e3f2ec3146a6110c77f92)\n\n可以通过`limit`指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：\n\n```javascript\n/* 8.0 添加处理 url路径 的匹配规则 */\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=2000' },\n```\n\n![指定小于2000字节的图片才会进行base64转码](https://note.youdao.com/yws/api/personal/file/F4A9E47CC2EE4406B771109A9BF11D64?method=download&shareKey=0fb8bee651e9c54ed74a7cd60f861ed9)\n\n\n\n### 使用babel处理高级JS语法\n\n现在的浏览器中只能识别部分的 ES6 语法，某些 js 的高级语法不能识别，比如 class类，我们是 main.js 里写入\n\n```javascript\n/* 6.0 在 main.js 中写入 js 高级语法 \n * 在 class 内部，不能直接写语句   \n * 在类的作用内部，只能定义 方法 和 属性\n * class 只是一个 语法糖\n */\nclass Person {\n  // 静态属性\n  static info = { adderss:\"北京\", name: 'jack', age: 16 }\n};\nconsole.log(Person.info)\n```\n\n浏览器会报错：\n\n![](https://note.youdao.com/yws/api/personal/file/EA3FBA751DF6436A91E6032BC1D1384E?method=download&shareKey=3adae98e685c9980dd9ba0de69aa0a20)\n\n所以我们需要安装 babel 来处理这些高级语法将其转换为浏览器兼容的 `JS` 文件\n\n安装处理 babel 的 loader 到开发依赖\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev\n```\n\n安装 babel 的转换语法到开发依赖\n\n```javascript\n/* 包含了所有的ES相关的语法（两者二选一，推荐）  */\ncnpm i babel-preset-env babel-preset-stage-0 --save-dev\n/* 支持ES语法到2015（两者二选一） */\ncnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加相关 loader 模块的匹配规则\n\n**注意**：一定要把 `node_modules` 文件夹添加到排除项\n\n```javascript\n/* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules 文件夹 */\n{ test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ },\n```\n\n在项目根目录中添加 `.babelrc` 文件，并修改这个配置文件如下：\n\n```javascript\n{\n\t// 注意：如果安装的ES语法支持到2015侧这里为\n    // \"presets\":[\"es2015\", \"stage-0\"],\n    \"presets\":[\"env\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n**注意：语法插件 `babel-preset-es2015` 可以更新为 `babel-preset-env` ，它包含了所有的ES相关的语法；**\n\n以上是 webpack 的一些基本的配置，下面我们将介绍如何将此案例改造成我们需要的 vue 开发环境\n\n\n\n### .vue 单文件组件\n\n> 官网：https://cn.vuejs.org/v2/guide/single-file-components.html\n\n在学习的时候我们使用  `Vue.component( 'login',  { template: '<h1>登陆组件</h1>' })` 来定义全局组件，紧接着在每个页面内指定一个容器元素。\n\n这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：\n\n- **全局定义 (Global definitions)** 强制要求每个 component 中的命名不得重复\n- **字符串模板 (String templates)** 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 `\\`\n- **不支持 CSS (No CSS support)** 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏\n- **没有构建步骤 (No build step)** 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel\n\n文件扩展名为 `.vue` 的 **single-file components(单文件组件)** 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。\n\n\n\n### 创建 Hello.vue 组件\n\n在网页中学习 `Vue` 的时候，直接把组件和 `script` 代码写到一起了，但是在使用`webpack` 结合 `vue` 开发的时候，推荐将所有的组件(页面)，单独定义为一个 `.vue` 文件，这每一个 `.vue` 文件都是一个单独的 `vue 组件` ，在每个 `.vue` 组件内部，分为 三部分： `template`  `script`  `style`\n\n```vue\n<template>\n<!-- \n\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹\n    一般都用 div 当作唯一的根元素 \n-->\n  <div>\n    <p> {{Hello}} World! </p>\n  </div>\n</template>\n<!--\n\t注意：在.vue的组件中，通过script标签来定义组件的行为\n\t需要使用ES6中提供的export default方式，导出一个vue实例对象\n-->\n<script>\nexport default {\n  data:function(){\n    return { msg: 'Hello'}\n  }\n}\n</script>\n<!-- \n注意：style标签要加上scoped属性避免后续多个组件样式覆盖 \n-->\n<style scoped>\np {\n  font-size: 20px;\n  text-align: center;\n}\n</style>\n```\n\n有了 `.vue` 组件，我们就进入了高级 JavaScript 应用领域。接下来就可以改造我们的 vue 的开发环境了。\n\n\n\n### 在webpack中配置.vue组件页面的解析\n\n改造 index.html 页面，改造好的 index.html 页面当做一个容器用来展示 vue 渲染的组件，至此这个页面后续基本不会再动了。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 -->\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n\n在 components 文件夹里创建 `App.vue` 页面根组件，在 vue 项目中所有的页面都被当作一个组件\n\n```vue\n<template>\n<!-- \n\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹\n\t一般都用 div 当作唯一的根元素 \n-->\n  <div>\n    <h1>这是APP组件 - {{msg}}</h1>\n    <h3>我是h3</h3>\n  </div>\n</template>\n<!--\n\t注意：在.vue的组件中，通过script标签来定义组件的行为，\n\t需要使用ES6中提供的export default方式，导出一个vue实例对象\n-->\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'OK'\n    }\n  }\n}\n</script>\n<!-- 注意：style标签要加上 scoped 属性避免后续多个组件样式覆盖 -->\n<style scoped>\nh1 {\n  color: red;\n}\n</style>\n```\n\n执行命令安装 vue.js 到项目运行依赖：\n\n```\ncnpm i vue -S\n```\n\n改造 `main.js` 入口文件：\n\n```javascript\n/* 1.0 导入 Vue 组件 */\nimport Vue from 'vue'\n/* 2.0 导入 App.vue 页面根组件 */\nimport App from '../components/App.vue'\n/* 3.0 创建一个 Vue 实例并使用 render 函数，渲染指定的组件 */\nvar vm = new Vue({\n  el: '#app',\n  render: c => c(App)\n});\n```\n\n现在直接运行项目 npm run dev 会报错提示缺少相当的 loader 来处理我们的 .vue 文件\n\n运行命令安装 解析转换 .vue 的 loader 为开发依赖：\n\n```\ncnpm i vue-loader vue-template-compiler -D\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹\n\n```javascript\n/* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */\n{ test: /\\.vue$/, use: 'vue-loader', exclude: /node_modules/ }\n```\n\n至此 vue 项目的基本开发环境已经搭建完成。\n\n\n\n# vue 开发环境的搭建回顾与梳理\n\n## 1.0 初始化项目\n\n新建项目文件夹，在文件夹的根目录执行 npm init -y 初始化项目，会得到 package.json 文件\n\n```\nnpm init -y\n```\n\n## 2.0 安装webpack到项目开发依赖\n\n```\ncnpm i webpack -D\n```\n\n## 3.0 创建项目结构目录\n\n```json\n|-- src                // 项目的原文件目录 \n|   |-- components     // .vue组件存放目录\n|   |-- |-- App.vue    // 根组件\n|   |-- images\t\t   // 图片目录\n|   |-- js             // 项目的js文件存放目录\n|   |-- |-- main.js    // 项目的js打包入口文件\n|   |-- style\t\t   // 样式目录\n|   |-- util\t\t   // 项目插件工具类存放目录\n|   |-- index.html     // 文件的主页面\n|-- package.json       // 项目所需要的各种模块和配置信息\n|-- .babelrc\t\t   // 处理高级JS语法文件\n|-- webpack.config.js  // webpack的配置文件\n```\n\n## 4.0 编辑 index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 -->\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n\n## 5.0 创建webpack配置文件处理main.js并简化打包命令\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n  entry: path.join(__dirname, 'src/js/main.js'),\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  }\n}\n```\n\n## 6.0实现webpack的实时打包构建\n\n安装 webpack-dev-server 到开发依赖\n\n```\ncnpm i webpack-dev-server --save-dev\n```\n\n安装完成之后，在 `package.json` 文件的 `scripts` 节点下新增 `\"dev\": \"webpack-dev-server --contentBase src\"`  指令\n\n## 7.0 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n\n修改 `package.json` 的script节点如下\n\n```json\n\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"\n```\n\n## 8.0 使用html-webpack-plugin插件配置启动页面\n\n使用 `html-webpack-plugin` 插件配置启动页面，该插件会自动生成 `index.html` 文件并把 `bundle.js` 注入到页面中！运行命令安装 html-webpack-plugin 插件到开发依赖\n\n```\ncnpm i html-webpack-plugin --save-dev\n```\n\n修改 `webpack.config.js` 配置文件，导入html-webpack-plugin 自动生成 HTMl 文件插件并添加 plugins 节点配置插件：\n\n```javascript\nvar htmlWebpackPlugin = require('html-webpack-plugin');\n```\n\n```javascript\nplugins: [\n  new htmlWebpackPlugin({\n    template: path.join(__dirname, 'src/index.html'),\n    filename: 'index.html'\n  })\n]\n```\n\n## 9.0 使用webpack打包css文件\n\n安装处理 CSS文 件的 loader 到开发依赖\n\n```\ncnpm i style-loader css-loader -D\n```\n\n在 `webpack.config.js` 配置文件里添加 module 配置节点并添加处理 css 文件的匹配规则：\n\n```javascript\nmodule: {\n  rules: [\n    { test: /\\.css$/, use: ['style-loader', 'css-loader'] },\n  ]\n}\n```\n\n## 10. 使用webpack打包sass文件\n\n安装处理 sass 文件的 loader 到开发依赖\n\n```\ncnpm i sass-loader node-sass --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：\n\n```javascript\n{ test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] },\n```\n\n## 11. 使用webpack打包less文件\n\n安装处理 less 文件的 loader 到开发依赖\n\n```\ncnpm i less-loader less --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 less文件的 loader 模块匹配规则：\n\n```javascript\n{ test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] },\n```\n\n## 12. 使用webpack处理css中的图片路径\n\n安装处理 url路径 的 loader 到开发依赖\n\n```\ncnpm i url-loader file-loader --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 url路径 的 loader 模块匹配规则，通过`limit`指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：\n\n```javascript\n{ test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=2000' },\n```\n\n### 13. 使用babel处理高级JS语法\n\n安装处理 babel 的 loader 到开发依赖\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev\n```\n\n安装 babel 的转换语法到开发依赖\n\n```javascript\n/* 包含了所有的ES相关的语法（两者二选一，推荐）  */\ncnpm i babel-preset-env babel-preset-stage-0 --save-dev\n/* 支持ES语法到2015（两者二选一） */\ncnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev\n```\n\n在 `webpack.config.js` 的 module 节点下添加相关 loader 模块的匹配规则\n\n**注意**：一定要把 `node_modules` 文件夹添加到排除项\n\n```javascript\n{ test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ },\n```\n\n在项目根目录中添加 `.babelrc` 文件，并修改这个配置文件如下：\n\n```javascript\n{\n    \"presets\":[\"env\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n## 14. 在webpack中配置.vue组件页面的解析\n\n在 components 文件夹下新建 App.vue 根组件\n\n```vue\n<template>\n  <div id=\"app\">{{msg}}</div>\n</template>\n\n<script>\nexport default {\n  data(){\n    return {\n      msg: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<style scoped>\ndiv {\n  text-align: center;\n  font-size: 20px;\n}\n</style>\n```\n\n执行命令安装 vue.js 到项目运行依赖：\n\n```\ncnpm i vue -S\n```\n\n改造 `main.js` 入口文件：\n\n```javascript\nimport Vue from 'vue'\nimport App from '../components/App.vue'\nconst vm = new Vue({\n  el:'#app',\n  render: c => c(App)\n})\n```\n\n运行命令安装 解析转换 .vue 的 loader 为开发依赖：\n\n```\ncnpm i vue-loader vue-template-compiler -D\n```\n\n在 `webpack.config.js` 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹\n\n```javascript\n{ test: /\\.vue$/, use: 'vue-loader', exclude: /node_modules/ }\n```\n\n**vue 项目的基本开发环境搭建完成。**\n\n\n\n# 快速搭建vue项目源文件\n\n每次开发项目都要一步一步的配环境相当的麻烦，拿到三个配置文件，创建好项目结构，打开终端运行 `npm install`  或  `cnpm install`  既可自动为我们安装 package.json 里面的所以的插件依赖和 loader\n\n### package.json文件\n\n```json\n{\n  \"name\": \"vue_webpack_demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"css-loader\": \"^0.28.7\",\n    \"file-loader\": \"^1.1.5\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"less\": \"^2.7.3\",\n    \"less-loader\": \"^4.0.5\",\n    \"node-sass\": \"^4.7.2\",\n    \"sass-loader\": \"^6.0.6\",\n    \"style-loader\": \"^0.19.1\",\n    \"url-loader\": \"^0.6.2\",\n    \"vue-loader\": \"^13.5.0\",\n    \"vue-template-compiler\": \"^2.5.11\",\n    \"webpack\": \"^3.10.0\",\n    \"webpack-dev-server\": \"^2.9.7\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^2.5.11\"\n  }\n}\n```\n\n### webpack.config.js文件\n\n```javascript\n/* \n *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件\n *  配置文件的默认名称为 webpack.config.js \n */\n\n/*  2.0\n *  导入 Node 中的 Path(路径) 模块\n *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的\n *    问题2：为什么Node不识别 import？？？？   \n *           因为Node中的解析引擎是从 chrome中的V8移植过去的\n *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持\n *           因此 Node 也被迫不支持 import\n */\nvar path = require('path');\n// import path from 'path'\n\n/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */\nvar htmlWebpackPlugin = require('html-webpack-plugin');\n\n/*  1.0\n *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式\n *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js\n *  并读取这个文件中导出的配置对象，来进行打包处理 \n */\nmodule.exports = {\n  /* 2.1\n   * entry 属性，表示要打包的文件的路径。\n   *   path.join(__dirname,'') 是node.js中的一个全局变量\n   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。\n   */\n  entry: path.join(__dirname, 'src/js/main.js'),\n  /* 2.2\n   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 \n   *   path：指定输出文件的路径\n   *   filename：指定输出文件的名称\n   */\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  /* 3.1 添加 plugins 节点配置插件 */\n  plugins: [\n    /* 3.2 \n     * new htmlWebpackPlugin({})：实例化 html-webpack-plugin 插件\n     *   template: 指定要编译的模板文件路径\n     *   filename: 指定自动生成的HTML文件的名称\n     */\n    new htmlWebpackPlugin({\n      template: path.join(__dirname, 'src/index.html'),\n      filename: 'index.html'\n    })\n  ],\n  /* 4.0 添加 module 节点用来配置第三方 loader 模块\n   *     module：用来配置第三方 loader 模块\n   *       rules：配置文件的匹配规则\n   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式\n   *         use : 表示使用哪些模块来处理\n   *               use 中相关 loader 模块的调用顺序是从后向前调用的\n   */\n  module: {\n    rules: [\n      /* 5.0  添加处理 css 文件的匹配规则 */\n      { test: /\\.css$/, use: ['style-loader', 'css-loader'] },\n      /* 6.0  添加处理 sass 文件的匹配规则 */\n      { test: /\\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader'] },\n      /* 7.0  添加处理 less 文件的匹配规则 */\n      { test: /\\.less$/, use: ['style-loader', 'css-loader', 'less-loader'] },\n      /* 8.0  添加处理 url路径 的匹配规则 */\n      { test: /\\.(png|jpg|gif)$/, use: 'url-loader?limit=200' },\n      /* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules文件夹 */\n      { test: /\\.js$/, use: 'babel-loader', exclude: /node_modules/ },\n      /* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */\n      { test: /\\.vue$/, use: 'vue-loader', exclude: /node_modules/ }\n    ]\n  }\n}\n```\n\n### .babelrc文件\n\n```json\n{\n\t// 注意：如果安装的ES语法支持到2015侧这里为\n    // \"presets\":[\"es2015\", \"stage-0\"],\n    \"presets\":[\"env\", \"stage-0\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n## vue结合webpack项目流程-源码下载\n[vue结合webpack项目流程-源码](https://note.youdao.com/share/?id=ab5df8e2ea58ab6e9a3b1679488b610c&type=note#/)","slug":"vue 结合 webpack 开发项目流程","published":1,"updated":"2019-04-27T09:01:46.792Z","_id":"cjuz8suz70006f4f4engo5wkh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"vue结合webpack开发项目流程\"><a href=\"#vue结合webpack开发项目流程\" class=\"headerlink\" title=\"vue结合webpack开发项目流程\"></a>vue结合webpack开发项目流程</h1><blockquote>\n<p>案例文件夹说明：</p>\n<p>webpack为隔行变色案例</p>\n<p>vue_webpack_remould为使用隔行变色改造好的vue开发环境</p>\n<p>vue_webpack_demo为回顾与梳理配置的vue开发环境</p>\n<p>vue_webpack为使用源文件快速搭建的vue开发环境</p>\n</blockquote>\n<h2 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h2><blockquote>\n<p>官网：<a href=\"https://doc.webpack-china.org/\" target=\"_blank\" rel=\"noopener\">https://doc.webpack-china.org/</a></p>\n</blockquote>\n<h3 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack?\"></a>什么是webpack?</h3><p>WebPack 可以看做是 <strong>模块打包机</strong>：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p>\n<h3 id=\"webpack能做什么？\"><a href=\"#webpack能做什么？\" class=\"headerlink\" title=\"webpack能做什么？\"></a>webpack能做什么？</h3><h4 id=\"网页中有哪些常见的静态资源\"><a href=\"#网页中有哪些常见的静态资源\" class=\"headerlink\" title=\"网页中有哪些常见的静态资源\"></a>网页中有哪些常见的静态资源</h4><ul>\n<li>CSS：.css、.less、.sass、.scss</li>\n<li>图片：.png、.jpg、.gif、.bmp</li>\n<li>JS：.js、.coffee、.js</li>\n<li>字体：.ttf、.woff、.woff2、.svg、.eot</li>\n<li>模板文件：.jade、.vue</li>\n</ul>\n<h4 id=\"页面引入的静态资源多了以后有什么问题\"><a href=\"#页面引入的静态资源多了以后有什么问题\" class=\"headerlink\" title=\"页面引入的静态资源多了以后有什么问题\"></a>页面引入的静态资源多了以后有什么问题</h4><p>加载慢 ：请求次数多（因为浏览从上到下解析HTML文件，当遇到 script、link、img 会立即发起很多的二次请求；）</p>\n<p>依赖复杂：当项目大了以后，各种文件之间有很复杂的依赖关系，如果处理不好，则项目运行会经常报错！</p>\n<h4 id=\"如何解决上述两个问题\"><a href=\"#如何解决上述两个问题\" class=\"headerlink\" title=\"如何解决上述两个问题\"></a>如何解决上述两个问题</h4><p>加载慢怎么解决：图片合并成精灵图、CSS和JS进行压缩混淆合并、图片转成base64</p>\n<p>依赖问题：基于模块化，让某些模块化工具帮我们解决复杂的依赖关系</p>\n<h4 id=\"如何完美实现上述的2种解决方案\"><a href=\"#如何完美实现上述的2种解决方案\" class=\"headerlink\" title=\"如何完美实现上述的2种解决方案\"></a>如何完美实现上述的2种解决方案</h4><p>使用Webpack或者Gulp</p>\n<ul>\n<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>\n</ul>\n<h3 id=\"WebPack与Grunt-Gulp的区别\"><a href=\"#WebPack与Grunt-Gulp的区别\" class=\"headerlink\" title=\"WebPack与Grunt/Gulp的区别\"></a>WebPack与Grunt/Gulp的区别</h3><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p>\n<p><strong>Grunt和Gulp的工作方式是：</strong>在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F31F51715BC34A678F1F24BEAFB1BADE?method=download&amp;shareKey=bfe39e8162a3dacea82225140fc27a2f\" alt=\"\"></p>\n<p><strong>Webpack的工作方式是：</strong>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/1A328F1FAEAE4F309835016629BB98F3?method=download&amp;shareKey=fa4b41058a6d4973ff3090c58b79b79c\" alt=\"\"></p>\n<p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<h3 id=\"安装webpack的两种方式\"><a href=\"#安装webpack的两种方式\" class=\"headerlink\" title=\"安装webpack的两种方式\"></a>安装webpack的两种方式</h3><ol>\n<li>运行 <code>npm i webpack -g</code> 全局安装webpack，这样就能在全局使用webpack的命令</li>\n<li>在项目根目录中运行 <code>npm i webpack -D</code> 安装到项目依赖中</li>\n</ol>\n<h2 id=\"vue结合webpack搭建开发环境\"><a href=\"#vue结合webpack搭建开发环境\" class=\"headerlink\" title=\"vue结合webpack搭建开发环境\"></a>vue结合webpack搭建开发环境</h2><blockquote>\n<p>webpack 是基于 node 环境开发的，所以开发之前电脑需安装 node </p>\n<p>node 官网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a></p>\n</blockquote>\n<h3 id=\"完整项目目录结构预览\"><a href=\"#完整项目目录结构预览\" class=\"headerlink\" title=\"完整项目目录结构预览\"></a>完整项目目录结构预览</h3><blockquote>\n<p>这是最终的 vue 开发环境目录，我们先从一个简单的隔行变色案例来一步一步改造成为我们需要的最终开发环境</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- src                // 项目的原文件目录 </span><br><span class=\"line\">|   |-- components     // .vue组件存放目录</span><br><span class=\"line\">|   |-- |-- App.vue    // 根组件</span><br><span class=\"line\">|   |-- images\t\t   // 图片目录</span><br><span class=\"line\">|   |-- js             // 项目的js文件存放目录</span><br><span class=\"line\">|   |-- |-- main.js    // 项目的js打包入口文件</span><br><span class=\"line\">|   |-- style\t\t   // 样式目录</span><br><span class=\"line\">|   |-- util\t\t   // 项目插件工具类存放目录</span><br><span class=\"line\">|   |-- index.html     // 文件的主页面</span><br><span class=\"line\">|-- package.json       // 项目所需要的各种模块和配置信息</span><br><span class=\"line\">|-- .babelrc\t\t   // 处理高级JS语法文件</span><br><span class=\"line\">|-- webpack.config.js  // webpack的配置文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>新建项目目录在项目目录运行命令 <code>npm init -y</code> 初始化项目，使用npm管理项目中的依赖包，初始化完成后根目录会自动生成一个 <code>package.json</code> 该文件定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。详情参考：<a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"在index-html书写页面结构\"><a href=\"#在index-html书写页面结构\" class=\"headerlink\" title=\"在index.html书写页面结构\"></a>在index.html书写页面结构</h3><blockquote>\n<p>这里只是为了方便后面的讲解，最终此页面会改造为一个容器，将来Vue渲染的组件，会填充到这个容器里显示</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装webpack到项目开发依赖\"><a href=\"#安装webpack到项目开发依赖\" class=\"headerlink\" title=\"安装webpack到项目开发依赖\"></a>安装webpack到项目开发依赖</h3><p>在项目根目录中运行命令 <code>cnpm i webpack -D</code> 安装 webpack 到项目开发依赖中，安装完成后会自动生成一个 node_modules 文件夹此文件夹为 npm 安装该项目的依赖库 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装jquery到项目运行依赖\"><a href=\"#安装jquery到项目运行依赖\" class=\"headerlink\" title=\"安装jquery到项目运行依赖\"></a>安装jquery到项目运行依赖</h3><p>运行命令安装 jquery.js 到项目运行依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"在main-js中书写代码逻辑\"><a href=\"#在main-js中书写代码逻辑\" class=\"headerlink\" title=\"在main.js中书写代码逻辑\"></a>在main.js中书写代码逻辑</h3><blockquote>\n<p>先来实现一个简单的隔行变色</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这是项目的 JS 入口文件 */</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 node 的方式导入 Jquery 包</span></span><br><span class=\"line\"><span class=\"comment\">// var $ = require('jquery');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.0 (推荐)使用 ES6 导入模块的方式   import *** from '模块标识符'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 2.0 使用 :odd 选取奇数行,使用 :even 选取偶数行 */</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'li:odd'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'blue'</span>);</span><br><span class=\"line\">  $(<span class=\"string\">'li:even'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用webpack处理main-js\"><a href=\"#使用webpack处理main-js\" class=\"headerlink\" title=\"使用webpack处理main.js\"></a>使用webpack处理main.js</h3><p>直接在 <code>index.html</code> 页面上引用 <code>main.js</code> 会报错，因为浏览器不认识 <code>import</code> 这种高级的 JS 语法，此时我们需要使用 webpack 进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</p>\n<p>执行打包编译命令 <code>webpack 要打包编译的文件路径 打包编译好后输出的文件路径</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack src/js/main.js dist/bundle.js</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/17869CD9722B4505B59D1E5E695838AA?method=download&amp;shareKey=b79bc9b1c1be9a38ec34adafc8f925f0\" alt=\"webpack src/js/main.js dist/bundle.js的执行结果\"></p>\n<p>从上图我们可以看出 <code>webpack</code> 编译了 <code>main.js</code>  </p>\n<p>执行完毕后会在根目录下生成一个 dist 文件夹此文件夹下会有一个 bundle.js 文件，这个文件就是编译好后的 main.js ，此时再在 imdex.html 页面引入 bundle.js 文件就可以看到结果了。</p>\n<h3 id=\"创建webpack配置文件处理main-js并简化打包命令\"><a href=\"#创建webpack配置文件处理main-js并简化打包命令\" class=\"headerlink\" title=\"创建webpack配置文件处理main.js并简化打包命令\"></a>创建webpack配置文件处理main.js并简化打包命令</h3><blockquote>\n<p>每次页面代码改变都要在命令行执行 <code>webpack src/js/main.js dist/bundle.js</code> 这么一大坨相当恶心，所以在项目根目录中创建 <code>webpack.config.js</code> 配置文件来简化打包命令</p>\n</blockquote>\n<p>由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以，我们需要在 <code>webpack.config.js</code> 中配置这两个路径即 entry(入口文件) 和 output(输出文件的路径)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *  配置文件的默认名称为 webpack.config.js </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  导入 Node 中的 Path(路径) 模块</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题2：为什么Node不识别 import？？？？   </span></span><br><span class=\"line\"><span class=\"comment\"> *           因为Node中的解析引擎是从 chrome中的V8移植过去的</span></span><br><span class=\"line\"><span class=\"comment\"> *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持</span></span><br><span class=\"line\"><span class=\"comment\"> *           因此 Node 也被迫不支持 import</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// import path from 'path'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  1.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式</span></span><br><span class=\"line\"><span class=\"comment\"> *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\"> *  并读取这个文件中导出的配置对象，来进行打包处理 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 2.1</span></span><br><span class=\"line\"><span class=\"comment\">   * entry 属性，表示要打包的文件的路径。</span></span><br><span class=\"line\"><span class=\"comment\">   *   path.join(__dirname,'') 是node.js中的一个全局变量</span></span><br><span class=\"line\"><span class=\"comment\">   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  <span class=\"comment\">/* 2.2</span></span><br><span class=\"line\"><span class=\"comment\">   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 </span></span><br><span class=\"line\"><span class=\"comment\">   *   path：指定输出文件的路径</span></span><br><span class=\"line\"><span class=\"comment\">   *   filename：指定输出文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好后直接在命令行执行 <code>webpack</code> 既可，执行 <code>webpack</code> 就相当于执行之前的 <code>webpack src/js/main.js dist/bundle.js</code>  命令。</p>\n<h3 id=\"实现webpack的实时打包构建\"><a href=\"#实现webpack的实时打包构建\" class=\"headerlink\" title=\"实现webpack的实时打包构建\"></a>实现webpack的实时打包构建</h3><blockquote>\n<p>由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 <code>webpack-dev-server</code> 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</p>\n</blockquote>\n<p>安装 webpack-dev-server 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，在命令行直接运行 <code>webpack-dev-server</code> 来进行打包，发现报错，此时需要借助于 <code>package.json</code> 文件中的指令，来运行 <code>webpack-dev-server</code> 命令。</p>\n<p>在 <code>package.json</code> 文件的 <code>scripts</code> 节点下新增 <code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>  指令</p>\n<p>执行命令 <code>npm run dev</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/E4FB23B7E92740BFA4AC48D5239B8056?method=download&amp;shareKey=3b0496f10c8f22590f8e35265681697f\" alt=\"npm run dev 执行结果\"></p>\n<p>发现可以进行实时打包，但是并没有生成 dist 目录和 bundle.js 文件，这是因为 <code>webpack-dev-server</code> 将打包好的文件放在了内存中，把 <code>bundle.js</code> 放在内存中的好处是由于需要实时打包编译，所以放在内存中速度会非常快。</p>\n<p>这个时候访问启动的 <code>http://localhost:8080/</code> 网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的 index 首页。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B9809B7C457A44E9B958434B9D8C9A35?method=download&amp;shareKey=c087b7991223efd5188cc7fdd121f34f\" alt=\"访问 http://localhost:8080/\"></p>\n<p>点击进入首页后发现引用不到 <code>bundle.js</code> 文件，因为 <code>bundle.js</code> 此时在内存中放着，所以需要修改 <code>index.html</code> 中 <code>script</code> 的 <code>src</code> 属性为 <code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code> </p>\n<p>为了能在访问 <code>http://localhost:8080/</code> 的时候直接访问到index首页，可以使用 <code>--contentBase src</code> 指令来修改package.json 的 dev 指令来指定启动的根目录</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --contentBase src\"</span><br></pre></td></tr></table></figure>\n<p>同时修改 <code>index</code> 页面中 <code>script</code> 的 <code>src</code> 属性为 <code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>注意：修改 src 文件夹以外的文件后都需要重新启动终端</p>\n<h3 id=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h3><p><strong>(推荐)方式1：</strong></p>\n<p>修改 <code>package.json</code> 的script节点如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">–contentBase src</td>\n<td style=\"text-align:left\">表示指定默认打开目录为 src 目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–open</td>\n<td style=\"text-align:left\">表示自动打开浏览器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–port 3000</td>\n<td style=\"text-align:left\">表示打开的端口号为3000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–hot</td>\n<td style=\"text-align:left\">表示启用浏览器热更新</td>\n</tr>\n</tbody>\n</table>\n<p><strong>方式2：</strong></p>\n<ol>\n<li>修改  <code>webpack.config.js</code>  文件，新增  <code>devServer</code>  节点此节点为一个对象如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;    <span class=\"comment\">// 这个节点配置了 webpack-dev-server 的相关指令</span></span><br><span class=\"line\">    hot:<span class=\"literal\">true</span>,  <span class=\"comment\">//启用浏览器热更新</span></span><br><span class=\"line\">    open:<span class=\"literal\">true</span>, <span class=\"comment\">//自动打开浏览器</span></span><br><span class=\"line\">    port:<span class=\"number\">4321</span>，<span class=\"comment\">//指定端口号为4321</span></span><br><span class=\"line\">    contentBase:<span class=\"string\">'src'</span><span class=\"comment\">//指定打开目录为src</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在头部引入<code>webpack</code>模块：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 <code>plugins</code> 节点此节点为一个数组，在 <code>plugins</code> 节点下新增：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>注意：<code>package.json</code>  文件里的 <code>script</code> 节点中一定要添加 <code>“dev”:&quot;webpack-dev-server&quot;</code> 才能使用 <code>npm run dev</code> 命令进行实时打包</p>\n<h3 id=\"使用html-webpack-plugin插件配置启动页面\"><a href=\"#使用html-webpack-plugin插件配置启动页面\" class=\"headerlink\" title=\"使用html-webpack-plugin插件配置启动页面\"></a>使用html-webpack-plugin插件配置启动页面</h3><p>由于使用 <code>--contentBase</code> 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 <code>index.html</code> 中 <code>script</code> 标签的 <code>src</code> 属性，所以推荐大家使用 <code>html-webpack-plugin</code> 插件配置启动页面，该插件会自动生成 <code>index.html</code> 文件并把 <code>bundle.js</code> 注入到页面中！</p>\n<p>运行命令安装 html-webpack-plugin 插件到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<p>修改 <code>webpack.config.js</code> 配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/* 3.1 添加 plugins 节点配置插件 */</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/* 3.2 </span></span><br><span class=\"line\"><span class=\"comment\">     * new htmlWebpackPlugin(&#123;&#125;)：实例化 html-webpack-plugin 插件</span></span><br><span class=\"line\"><span class=\"comment\">     *   template: 指定要编译的模板文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     *   filename: 指定自动生成的HTML文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将 <code>index.html</code> 中 <code>script</code> 标签注释掉，因为 <code>html-webpack-plugin</code> 插件会自动把 <code>bundle.js</code> 注入到 <code>index.html</code> 页面中！</p>\n<h3 id=\"loaders简介\"><a href=\"#loaders简介\" class=\"headerlink\" title=\"loaders简介\"></a>loaders简介</h3><p>通过使用不同的 <code>loader</code>，<code>webpack</code> 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换 <code>scss</code> 为 <code>css</code>，或者把下一代的 JS 文件<code>（ES6，ES7)</code> 转换为现代浏览器兼容的 <code>JS</code> 文件，对 <code>React</code> 的开发而言，合适的 <code>Loaders</code> 可以把 <code>React</code> 的中用到的 <code>JSX</code> 文件转换为 <code>JS</code> 文件。</p>\n<p><code>Loaders</code> 需要单独安装并且需要在 <code>webpack.config.js</code> 中的 <code>modules</code> 关键字下进行配置</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>test</td>\n<td>用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</td>\n</tr>\n<tr>\n<td>loader/use</td>\n<td>loader 的名称，use 为 2.x 的写法推荐使用 use（必须）</td>\n</tr>\n<tr>\n<td>include</td>\n<td>添加必须处理的文件（文件夹）（可选）</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>屏蔽不需要处理的文件（文件夹）（可选）</td>\n</tr>\n<tr>\n<td>query</td>\n<td>为 loaders 提供额外的设置选项（可选）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用webpack打包css文件\"><a href=\"#使用webpack打包css文件\" class=\"headerlink\" title=\"使用webpack打包css文件\"></a>使用webpack打包css文件</h3><p>在页面中我们不可避免的要引入一些 CSS 文件比如说 base.css(页面样式的初始化)，我们可以在 <code>main.js</code> 里引入以作用全局。</p>\n<p>在页面中引入 CSS 可通过 main.js 里引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 3.0 使用 import '直接通过路径标识符' 引入base.css样式 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../style/base.css'</span></span><br></pre></td></tr></table></figure>\n<p>引入 css 文件后发现报错：You may need an appropriate loader to handle this file type.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle.js:sourcemap:9947 Uncaught Error: Module parse failed: Unexpected token (10:12)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type.</span><br><span class=\"line\">| </span><br><span class=\"line\">| // 导入 css 文件</span><br><span class=\"line\">| import from '../style/index.css'</span><br><span class=\"line\">| </span><br><span class=\"line\">| /* 使用 :odd 选取奇数行,使用 :even 选取偶数行 */</span><br><span class=\"line\"></span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (bundle.js:sourcemap:9947)</span><br><span class=\"line\">    at __webpack_require__ (bundle.js:sourcemap:679)</span><br><span class=\"line\">    at fn (bundle.js:sourcemap:89)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (bundle.js:sourcemap:1015)</span><br><span class=\"line\">    at __webpack_require__ (bundle.js:sourcemap:679)</span><br><span class=\"line\">    at logLevel (bundle.js:sourcemap:725)</span><br><span class=\"line\">    at bundle.js:sourcemap:728</span><br></pre></td></tr></table></figure>\n<p>You may need an appropriate loader to handle this file type.（您可能需要一个合适的加载器来处理这个文件类型。）因为我们项目中没有配置处理 css 的 loader 所以才会报这个错误 </p>\n<p>安装处理 CSS文 件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 配置文件里添加 module 配置节点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">/* 4.0 添加 module 节点用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *     module：用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *       rules：配置文件的匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\">   *         use : 表示使用哪些模块来处理</span></span><br><span class=\"line\"><span class=\"comment\">   *               use 中相关 loader 模块的调用顺序是从后向前调用的</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">/* 5.0 添加处理 css 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>] &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：<code>use</code> 表示使用哪些模块来处理 <code>test</code> 所匹配到的文件；<code>use</code> 中相关 loader 模块的调用顺序是从后向前调用的；</p>\n<h3 id=\"使用webpack打包sass文件\"><a href=\"#使用webpack打包sass文件\" class=\"headerlink\" title=\"使用webpack打包sass文件\"></a>使用webpack打包sass文件</h3><p>页面中除了会引用 CSS 文件外有时还会用到 SASS 文件，需要用到什么文件直接在 main.js 里导入就会作用到全局整个项目，在 main.js 中通过 import ‘路径标识符’ 导入 index.scss 会发现报错，原因同上也是缺少相关的 loader 来处理 scss 文件，后续的 less、image 和一些高级 js语法 解决方案都一样，报错缺少什么 loader 就安装相关的 loader 即可。</p>\n<p>安装处理 sass 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 6.0 添加处理 sass 文件的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用webpack打包less文件\"><a href=\"#使用webpack打包less文件\" class=\"headerlink\" title=\"使用webpack打包less文件\"></a>使用webpack打包less文件</h3><p>安装处理 less 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i less-loader less --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 less文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 7.0 添加处理 less 文件的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用webpack处理css中的图片路径\"><a href=\"#使用webpack处理css中的图片路径\" class=\"headerlink\" title=\"使用webpack处理css中的图片路径\"></a>使用webpack处理css中的图片路径</h3><p>当我们在页面中用 \\<img> 标签来引入图片的时候没问题，但是使用 css 样式给某个标签设置背景图片就会报错，也是因为缺少相当的 loader 来处理我们 css 中的图片的路径。</p>\n<p>安装处理 url路径 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i url-loader file-loader --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 url路径 的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 8.0 添加处理 url路径 的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>通过查看元素我们可以看到默认将背景图片转为了 base64 编码格式的图片</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/9ADC8742826D45809DB61B287F3B295B?method=download&amp;shareKey=1b23f778252e3f2ec3146a6110c77f92\" alt=\"背景图片被转为了 base64 编码格式\"></p>\n<p>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 8.0 添加处理 url路径 的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader?limit=2000'</span> &#125;,</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F4A9E47CC2EE4406B771109A9BF11D64?method=download&amp;shareKey=0fb8bee651e9c54ed74a7cd60f861ed9\" alt=\"指定小于2000字节的图片才会进行base64转码\"></p>\n<h3 id=\"使用babel处理高级JS语法\"><a href=\"#使用babel处理高级JS语法\" class=\"headerlink\" title=\"使用babel处理高级JS语法\"></a>使用babel处理高级JS语法</h3><p>现在的浏览器中只能识别部分的 ES6 语法，某些 js 的高级语法不能识别，比如 class类，我们是 main.js 里写入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 6.0 在 main.js 中写入 js 高级语法 </span></span><br><span class=\"line\"><span class=\"comment\"> * 在 class 内部，不能直接写语句   </span></span><br><span class=\"line\"><span class=\"comment\"> * 在类的作用内部，只能定义 方法 和 属性</span></span><br><span class=\"line\"><span class=\"comment\"> * class 只是一个 语法糖</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> info = &#123; <span class=\"attr\">adderss</span>:<span class=\"string\">\"北京\"</span>, <span class=\"attr\">name</span>: <span class=\"string\">'jack'</span>, <span class=\"attr\">age</span>: <span class=\"number\">16</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.info)</span><br></pre></td></tr></table></figure>\n<p>浏览器会报错：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/EA3FBA751DF6436A91E6032BC1D1384E?method=download&amp;shareKey=3adae98e685c9980dd9ba0de69aa0a20\" alt=\"\"></p>\n<p>所以我们需要安装 babel 来处理这些高级语法将其转换为浏览器兼容的 <code>JS</code> 文件</p>\n<p>安装处理 babel 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装 babel 的转换语法到开发依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 包含了所有的ES相关的语法（两者二选一，推荐）  */</span></span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br><span class=\"line\"><span class=\"comment\">/* 支持ES语法到2015（两者二选一） */</span></span><br><span class=\"line\">cnpm i babel-preset-es2015 babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加相关 loader 模块的匹配规则</p>\n<p><strong>注意</strong>：一定要把 <code>node_modules</code> 文件夹添加到排除项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules 文件夹 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'babel-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br></pre></td></tr></table></figure>\n<p>在项目根目录中添加 <code>.babelrc</code> 文件，并修改这个配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意：如果安装的ES语法支持到2015侧这里为</span></span><br><span class=\"line\">    <span class=\"comment\">// \"presets\":[\"es2015\", \"stage-0\"],</span></span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"env\"</span>, <span class=\"string\">\"stage-0\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"plugins\"</span>:[<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：语法插件 <code>babel-preset-es2015</code> 可以更新为 <code>babel-preset-env</code> ，它包含了所有的ES相关的语法；</strong></p>\n<p>以上是 webpack 的一些基本的配置，下面我们将介绍如何将此案例改造成我们需要的 vue 开发环境</p>\n<h3 id=\"vue-单文件组件\"><a href=\"#vue-单文件组件\" class=\"headerlink\" title=\".vue 单文件组件\"></a>.vue 单文件组件</h3><blockquote>\n<p>官网：<a href=\"https://cn.vuejs.org/v2/guide/single-file-components.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/single-file-components.html</a></p>\n</blockquote>\n<p>在学习的时候我们使用  <code>Vue.component( &#39;login&#39;,  { template: &#39;&lt;h1&gt;登陆组件&lt;/h1&gt;&#39; })</code> 来定义全局组件，紧接着在每个页面内指定一个容器元素。</p>\n<p>这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p>\n<ul>\n<li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li>\n<li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\\</code></li>\n<li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li>\n<li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li>\n</ul>\n<p>文件扩展名为 <code>.vue</code> 的 <strong>single-file components(单文件组件)</strong> 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p>\n<h3 id=\"创建-Hello-vue-组件\"><a href=\"#创建-Hello-vue-组件\" class=\"headerlink\" title=\"创建 Hello.vue 组件\"></a>创建 Hello.vue 组件</h3><p>在网页中学习 <code>Vue</code> 的时候，直接把组件和 <code>script</code> 代码写到一起了，但是在使用<code>webpack</code> 结合 <code>vue</code> 开发的时候，推荐将所有的组件(页面)，单独定义为一个 <code>.vue</code> 文件，这每一个 <code>.vue</code> 文件都是一个单独的 <code>vue 组件</code> ，在每个 <code>.vue</code> 组件内部，分为 三部分： <code>template</code>  <code>script</code>  <code>style</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹</span><br><span class=\"line\">    一般都用 div 当作唯一的根元素 </span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt; &#123;&#123;Hello&#125;&#125; World! &lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">\t注意：在.vue的组件中，通过script标签来定义组件的行为</span><br><span class=\"line\">\t需要使用ES6中提供的export default方式，导出一个vue实例对象</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data:function()&#123;</span><br><span class=\"line\">    return &#123; msg: &apos;Hello&apos;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">注意：style标签要加上scoped属性避免后续多个组件样式覆盖 </span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  font-size: 20px;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>有了 <code>.vue</code> 组件，我们就进入了高级 JavaScript 应用领域。接下来就可以改造我们的 vue 的开发环境了。</p>\n<h3 id=\"在webpack中配置-vue组件页面的解析\"><a href=\"#在webpack中配置-vue组件页面的解析\" class=\"headerlink\" title=\"在webpack中配置.vue组件页面的解析\"></a>在webpack中配置.vue组件页面的解析</h3><p>改造 index.html 页面，改造好的 index.html 页面当做一个容器用来展示 vue 渲染的组件，至此这个页面后续基本不会再动了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 components 文件夹里创建 <code>App.vue</code> 页面根组件，在 vue 项目中所有的页面都被当作一个组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹</span><br><span class=\"line\">\t一般都用 div 当作唯一的根元素 </span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h3&gt;我是h3&lt;/h3&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">\t注意：在.vue的组件中，通过script标签来定义组件的行为，</span><br><span class=\"line\">\t需要使用ES6中提供的export default方式，导出一个vue实例对象</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &apos;OK&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 注意：style标签要加上 scoped 属性避免后续多个组件样式覆盖 --&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">h1 &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>执行命令安装 vue.js 到项目运行依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue -S</span><br></pre></td></tr></table></figure>\n<p>改造 <code>main.js</code> 入口文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 1.0 导入 Vue 组件 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"comment\">/* 2.0 导入 App.vue 页面根组件 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../components/App.vue'</span></span><br><span class=\"line\"><span class=\"comment\">/* 3.0 创建一个 Vue 实例并使用 render 函数，渲染指定的组件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在直接运行项目 npm run dev 会报错提示缺少相当的 loader 来处理我们的 .vue 文件</p>\n<p>运行命令安装 解析转换 .vue 的 loader 为开发依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'vue-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>至此 vue 项目的基本开发环境已经搭建完成。</p>\n<h1 id=\"vue-开发环境的搭建回顾与梳理\"><a href=\"#vue-开发环境的搭建回顾与梳理\" class=\"headerlink\" title=\"vue 开发环境的搭建回顾与梳理\"></a>vue 开发环境的搭建回顾与梳理</h1><h2 id=\"1-0-初始化项目\"><a href=\"#1-0-初始化项目\" class=\"headerlink\" title=\"1.0 初始化项目\"></a>1.0 初始化项目</h2><p>新建项目文件夹，在文件夹的根目录执行 npm init -y 初始化项目，会得到 package.json 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-0-安装webpack到项目开发依赖\"><a href=\"#2-0-安装webpack到项目开发依赖\" class=\"headerlink\" title=\"2.0 安装webpack到项目开发依赖\"></a>2.0 安装webpack到项目开发依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i webpack -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-0-创建项目结构目录\"><a href=\"#3-0-创建项目结构目录\" class=\"headerlink\" title=\"3.0 创建项目结构目录\"></a>3.0 创建项目结构目录</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- src                // 项目的原文件目录 </span><br><span class=\"line\">|   |-- components     // .vue组件存放目录</span><br><span class=\"line\">|   |-- |-- App.vue    // 根组件</span><br><span class=\"line\">|   |-- images\t\t   // 图片目录</span><br><span class=\"line\">|   |-- js             // 项目的js文件存放目录</span><br><span class=\"line\">|   |-- |-- main.js    // 项目的js打包入口文件</span><br><span class=\"line\">|   |-- style\t\t   // 样式目录</span><br><span class=\"line\">|   |-- util\t\t   // 项目插件工具类存放目录</span><br><span class=\"line\">|   |-- index.html     // 文件的主页面</span><br><span class=\"line\">|-- package.json       // 项目所需要的各种模块和配置信息</span><br><span class=\"line\">|-- .babelrc\t\t   // 处理高级JS语法文件</span><br><span class=\"line\">|-- webpack.config.js  // webpack的配置文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-0-编辑-index-html\"><a href=\"#4-0-编辑-index-html\" class=\"headerlink\" title=\"4.0 编辑 index.html\"></a>4.0 编辑 index.html</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-0-创建webpack配置文件处理main-js并简化打包命令\"><a href=\"#5-0-创建webpack配置文件处理main-js并简化打包命令\" class=\"headerlink\" title=\"5.0 创建webpack配置文件处理main.js并简化打包命令\"></a>5.0 创建webpack配置文件处理main.js并简化打包命令</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-0实现webpack的实时打包构建\"><a href=\"#6-0实现webpack的实时打包构建\" class=\"headerlink\" title=\"6.0实现webpack的实时打包构建\"></a>6.0实现webpack的实时打包构建</h2><p>安装 webpack-dev-server 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，在 <code>package.json</code> 文件的 <code>scripts</code> 节点下新增 <code>&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</code>  指令</p>\n<h2 id=\"7-0-实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#7-0-实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"7.0 实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>7.0 实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p>修改 <code>package.json</code> 的script节点如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-0-使用html-webpack-plugin插件配置启动页面\"><a href=\"#8-0-使用html-webpack-plugin插件配置启动页面\" class=\"headerlink\" title=\"8.0 使用html-webpack-plugin插件配置启动页面\"></a>8.0 使用html-webpack-plugin插件配置启动页面</h2><p>使用 <code>html-webpack-plugin</code> 插件配置启动页面，该插件会自动生成 <code>index.html</code> 文件并把 <code>bundle.js</code> 注入到页面中！运行命令安装 html-webpack-plugin 插件到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<p>修改 <code>webpack.config.js</code> 配置文件，导入html-webpack-plugin 自动生成 HTMl 文件插件并添加 plugins 节点配置插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-0-使用webpack打包css文件\"><a href=\"#9-0-使用webpack打包css文件\" class=\"headerlink\" title=\"9.0 使用webpack打包css文件\"></a>9.0 使用webpack打包css文件</h2><p>安装处理 CSS文 件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 配置文件里添加 module 配置节点并添加处理 css 文件的匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>] &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-使用webpack打包sass文件\"><a href=\"#10-使用webpack打包sass文件\" class=\"headerlink\" title=\"10. 使用webpack打包sass文件\"></a>10. 使用webpack打包sass文件</h2><p>安装处理 sass 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>] &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-使用webpack打包less文件\"><a href=\"#11-使用webpack打包less文件\" class=\"headerlink\" title=\"11. 使用webpack打包less文件\"></a>11. 使用webpack打包less文件</h2><p>安装处理 less 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i less-loader less --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 less文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>] &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-使用webpack处理css中的图片路径\"><a href=\"#12-使用webpack处理css中的图片路径\" class=\"headerlink\" title=\"12. 使用webpack处理css中的图片路径\"></a>12. 使用webpack处理css中的图片路径</h2><p>安装处理 url路径 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i url-loader file-loader --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 url路径 的 loader 模块匹配规则，通过<code>limit</code>指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader?limit=2000'</span> &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-使用babel处理高级JS语法\"><a href=\"#13-使用babel处理高级JS语法\" class=\"headerlink\" title=\"13. 使用babel处理高级JS语法\"></a>13. 使用babel处理高级JS语法</h3><p>安装处理 babel 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装 babel 的转换语法到开发依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 包含了所有的ES相关的语法（两者二选一，推荐）  */</span></span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br><span class=\"line\"><span class=\"comment\">/* 支持ES语法到2015（两者二选一） */</span></span><br><span class=\"line\">cnpm i babel-preset-es2015 babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加相关 loader 模块的匹配规则</p>\n<p><strong>注意</strong>：一定要把 <code>node_modules</code> 文件夹添加到排除项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'babel-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br></pre></td></tr></table></figure>\n<p>在项目根目录中添加 <code>.babelrc</code> 文件，并修改这个配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"env\"</span>, <span class=\"string\">\"stage-0\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"plugins\"</span>:[<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-在webpack中配置-vue组件页面的解析\"><a href=\"#14-在webpack中配置-vue组件页面的解析\" class=\"headerlink\" title=\"14. 在webpack中配置.vue组件页面的解析\"></a>14. 在webpack中配置.vue组件页面的解析</h2><p>在 components 文件夹下新建 App.vue 根组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &apos;Hello World!&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  font-size: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>执行命令安装 vue.js 到项目运行依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue -S</span><br></pre></td></tr></table></figure>\n<p>改造 <code>main.js</code> 入口文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../components/App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>运行命令安装 解析转换 .vue 的 loader 为开发依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'vue-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>vue 项目的基本开发环境搭建完成。</strong></p>\n<h1 id=\"快速搭建vue项目源文件\"><a href=\"#快速搭建vue项目源文件\" class=\"headerlink\" title=\"快速搭建vue项目源文件\"></a>快速搭建vue项目源文件</h1><p>每次开发项目都要一步一步的配环境相当的麻烦，拿到三个配置文件，创建好项目结构，打开终端运行 <code>npm install</code>  或  <code>cnpm install</code>  既可自动为我们安装 package.json 里面的所以的插件依赖和 loader</p>\n<h3 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"vue_webpack_demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --contentBase src --open --port 3000 --hot\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-runtime\"</span>: <span class=\"string\">\"^6.23.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^1.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.30.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"less\"</span>: <span class=\"string\">\"^2.7.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"less-loader\"</span>: <span class=\"string\">\"^4.0.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.7.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^6.0.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.19.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^0.6.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-loader\"</span>: <span class=\"string\">\"^13.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.5.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^3.10.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.9.7\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>: <span class=\"string\">\"^2.5.11\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-config-js文件\"><a href=\"#webpack-config-js文件\" class=\"headerlink\" title=\"webpack.config.js文件\"></a>webpack.config.js文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *  配置文件的默认名称为 webpack.config.js </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  导入 Node 中的 Path(路径) 模块</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题2：为什么Node不识别 import？？？？   </span></span><br><span class=\"line\"><span class=\"comment\"> *           因为Node中的解析引擎是从 chrome中的V8移植过去的</span></span><br><span class=\"line\"><span class=\"comment\"> *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持</span></span><br><span class=\"line\"><span class=\"comment\"> *           因此 Node 也被迫不支持 import</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// import path from 'path'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  1.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式</span></span><br><span class=\"line\"><span class=\"comment\"> *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\"> *  并读取这个文件中导出的配置对象，来进行打包处理 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 2.1</span></span><br><span class=\"line\"><span class=\"comment\">   * entry 属性，表示要打包的文件的路径。</span></span><br><span class=\"line\"><span class=\"comment\">   *   path.join(__dirname,'') 是node.js中的一个全局变量</span></span><br><span class=\"line\"><span class=\"comment\">   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  <span class=\"comment\">/* 2.2</span></span><br><span class=\"line\"><span class=\"comment\">   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 </span></span><br><span class=\"line\"><span class=\"comment\">   *   path：指定输出文件的路径</span></span><br><span class=\"line\"><span class=\"comment\">   *   filename：指定输出文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/* 3.1 添加 plugins 节点配置插件 */</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/* 3.2 </span></span><br><span class=\"line\"><span class=\"comment\">     * new htmlWebpackPlugin(&#123;&#125;)：实例化 html-webpack-plugin 插件</span></span><br><span class=\"line\"><span class=\"comment\">     *   template: 指定要编译的模板文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     *   filename: 指定自动生成的HTML文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">/* 4.0 添加 module 节点用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *     module：用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *       rules：配置文件的匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\">   *         use : 表示使用哪些模块来处理</span></span><br><span class=\"line\"><span class=\"comment\">   *               use 中相关 loader 模块的调用顺序是从后向前调用的</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">/* 5.0  添加处理 css 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>] &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 6.0  添加处理 sass 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>] &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 7.0  添加处理 less 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>] &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 8.0  添加处理 url路径 的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader?limit=200'</span> &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules文件夹 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'babel-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'vue-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babelrc文件\"><a href=\"#babelrc文件\" class=\"headerlink\" title=\".babelrc文件\"></a>.babelrc文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t// 注意：如果安装的ES语法支持到2015侧这里为</span><br><span class=\"line\">    // \"presets\":[\"es2015\", \"stage-0\"],</span><br><span class=\"line\">    \"presets\":[\"env\", \"stage-0\"],</span><br><span class=\"line\">    \"plugins\":[\"transform-runtime\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue结合webpack项目流程-源码下载\"><a href=\"#vue结合webpack项目流程-源码下载\" class=\"headerlink\" title=\"vue结合webpack项目流程-源码下载\"></a>vue结合webpack项目流程-源码下载</h2><p><a href=\"https://note.youdao.com/share/?id=ab5df8e2ea58ab6e9a3b1679488b610c&amp;type=note#/\" target=\"_blank\" rel=\"noopener\">vue结合webpack项目流程-源码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue结合webpack开发项目流程\"><a href=\"#vue结合webpack开发项目流程\" class=\"headerlink\" title=\"vue结合webpack开发项目流程\"></a>vue结合webpack开发项目流程</h1><blockquote>\n<p>案例文件夹说明：</p>\n<p>webpack为隔行变色案例</p>\n<p>vue_webpack_remould为使用隔行变色改造好的vue开发环境</p>\n<p>vue_webpack_demo为回顾与梳理配置的vue开发环境</p>\n<p>vue_webpack为使用源文件快速搭建的vue开发环境</p>\n</blockquote>\n<h2 id=\"webpack简介\"><a href=\"#webpack简介\" class=\"headerlink\" title=\"webpack简介\"></a>webpack简介</h2><blockquote>\n<p>官网：<a href=\"https://doc.webpack-china.org/\" target=\"_blank\" rel=\"noopener\">https://doc.webpack-china.org/</a></p>\n</blockquote>\n<h3 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack?\"></a>什么是webpack?</h3><p>WebPack 可以看做是 <strong>模块打包机</strong>：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p>\n<h3 id=\"webpack能做什么？\"><a href=\"#webpack能做什么？\" class=\"headerlink\" title=\"webpack能做什么？\"></a>webpack能做什么？</h3><h4 id=\"网页中有哪些常见的静态资源\"><a href=\"#网页中有哪些常见的静态资源\" class=\"headerlink\" title=\"网页中有哪些常见的静态资源\"></a>网页中有哪些常见的静态资源</h4><ul>\n<li>CSS：.css、.less、.sass、.scss</li>\n<li>图片：.png、.jpg、.gif、.bmp</li>\n<li>JS：.js、.coffee、.js</li>\n<li>字体：.ttf、.woff、.woff2、.svg、.eot</li>\n<li>模板文件：.jade、.vue</li>\n</ul>\n<h4 id=\"页面引入的静态资源多了以后有什么问题\"><a href=\"#页面引入的静态资源多了以后有什么问题\" class=\"headerlink\" title=\"页面引入的静态资源多了以后有什么问题\"></a>页面引入的静态资源多了以后有什么问题</h4><p>加载慢 ：请求次数多（因为浏览从上到下解析HTML文件，当遇到 script、link、img 会立即发起很多的二次请求；）</p>\n<p>依赖复杂：当项目大了以后，各种文件之间有很复杂的依赖关系，如果处理不好，则项目运行会经常报错！</p>\n<h4 id=\"如何解决上述两个问题\"><a href=\"#如何解决上述两个问题\" class=\"headerlink\" title=\"如何解决上述两个问题\"></a>如何解决上述两个问题</h4><p>加载慢怎么解决：图片合并成精灵图、CSS和JS进行压缩混淆合并、图片转成base64</p>\n<p>依赖问题：基于模块化，让某些模块化工具帮我们解决复杂的依赖关系</p>\n<h4 id=\"如何完美实现上述的2种解决方案\"><a href=\"#如何完美实现上述的2种解决方案\" class=\"headerlink\" title=\"如何完美实现上述的2种解决方案\"></a>如何完美实现上述的2种解决方案</h4><p>使用Webpack或者Gulp</p>\n<ul>\n<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>\n</ul>\n<h3 id=\"WebPack与Grunt-Gulp的区别\"><a href=\"#WebPack与Grunt-Gulp的区别\" class=\"headerlink\" title=\"WebPack与Grunt/Gulp的区别\"></a>WebPack与Grunt/Gulp的区别</h3><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p>\n<p><strong>Grunt和Gulp的工作方式是：</strong>在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F31F51715BC34A678F1F24BEAFB1BADE?method=download&amp;shareKey=bfe39e8162a3dacea82225140fc27a2f\" alt=\"\"></p>\n<p><strong>Webpack的工作方式是：</strong>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/1A328F1FAEAE4F309835016629BB98F3?method=download&amp;shareKey=fa4b41058a6d4973ff3090c58b79b79c\" alt=\"\"></p>\n<p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>\n<h3 id=\"安装webpack的两种方式\"><a href=\"#安装webpack的两种方式\" class=\"headerlink\" title=\"安装webpack的两种方式\"></a>安装webpack的两种方式</h3><ol>\n<li>运行 <code>npm i webpack -g</code> 全局安装webpack，这样就能在全局使用webpack的命令</li>\n<li>在项目根目录中运行 <code>npm i webpack -D</code> 安装到项目依赖中</li>\n</ol>\n<h2 id=\"vue结合webpack搭建开发环境\"><a href=\"#vue结合webpack搭建开发环境\" class=\"headerlink\" title=\"vue结合webpack搭建开发环境\"></a>vue结合webpack搭建开发环境</h2><blockquote>\n<p>webpack 是基于 node 环境开发的，所以开发之前电脑需安装 node </p>\n<p>node 官网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a></p>\n</blockquote>\n<h3 id=\"完整项目目录结构预览\"><a href=\"#完整项目目录结构预览\" class=\"headerlink\" title=\"完整项目目录结构预览\"></a>完整项目目录结构预览</h3><blockquote>\n<p>这是最终的 vue 开发环境目录，我们先从一个简单的隔行变色案例来一步一步改造成为我们需要的最终开发环境</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- src                // 项目的原文件目录 </span><br><span class=\"line\">|   |-- components     // .vue组件存放目录</span><br><span class=\"line\">|   |-- |-- App.vue    // 根组件</span><br><span class=\"line\">|   |-- images\t\t   // 图片目录</span><br><span class=\"line\">|   |-- js             // 项目的js文件存放目录</span><br><span class=\"line\">|   |-- |-- main.js    // 项目的js打包入口文件</span><br><span class=\"line\">|   |-- style\t\t   // 样式目录</span><br><span class=\"line\">|   |-- util\t\t   // 项目插件工具类存放目录</span><br><span class=\"line\">|   |-- index.html     // 文件的主页面</span><br><span class=\"line\">|-- package.json       // 项目所需要的各种模块和配置信息</span><br><span class=\"line\">|-- .babelrc\t\t   // 处理高级JS语法文件</span><br><span class=\"line\">|-- webpack.config.js  // webpack的配置文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>新建项目目录在项目目录运行命令 <code>npm init -y</code> 初始化项目，使用npm管理项目中的依赖包，初始化完成后根目录会自动生成一个 <code>package.json</code> 该文件定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。详情参考：<a href=\"http://javascript.ruanyifeng.com/nodejs/packagejson.html\" target=\"_blank\" rel=\"noopener\">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init -y</span><br></pre></td></tr></table></figure>\n<h3 id=\"在index-html书写页面结构\"><a href=\"#在index-html书写页面结构\" class=\"headerlink\" title=\"在index.html书写页面结构\"></a>在index.html书写页面结构</h3><blockquote>\n<p>这里只是为了方便后面的讲解，最终此页面会改造为一个容器，将来Vue渲染的组件，会填充到这个容器里显示</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装webpack到项目开发依赖\"><a href=\"#安装webpack到项目开发依赖\" class=\"headerlink\" title=\"安装webpack到项目开发依赖\"></a>安装webpack到项目开发依赖</h3><p>在项目根目录中运行命令 <code>cnpm i webpack -D</code> 安装 webpack 到项目开发依赖中，安装完成后会自动生成一个 node_modules 文件夹此文件夹为 npm 安装该项目的依赖库 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装jquery到项目运行依赖\"><a href=\"#安装jquery到项目运行依赖\" class=\"headerlink\" title=\"安装jquery到项目运行依赖\"></a>安装jquery到项目运行依赖</h3><p>运行命令安装 jquery.js 到项目运行依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"在main-js中书写代码逻辑\"><a href=\"#在main-js中书写代码逻辑\" class=\"headerlink\" title=\"在main.js中书写代码逻辑\"></a>在main.js中书写代码逻辑</h3><blockquote>\n<p>先来实现一个简单的隔行变色</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这是项目的 JS 入口文件 */</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 node 的方式导入 Jquery 包</span></span><br><span class=\"line\"><span class=\"comment\">// var $ = require('jquery');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.0 (推荐)使用 ES6 导入模块的方式   import *** from '模块标识符'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 2.0 使用 :odd 选取奇数行,使用 :even 选取偶数行 */</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'li:odd'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'blue'</span>);</span><br><span class=\"line\">  $(<span class=\"string\">'li:even'</span>).css(<span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用webpack处理main-js\"><a href=\"#使用webpack处理main-js\" class=\"headerlink\" title=\"使用webpack处理main.js\"></a>使用webpack处理main.js</h3><p>直接在 <code>index.html</code> 页面上引用 <code>main.js</code> 会报错，因为浏览器不认识 <code>import</code> 这种高级的 JS 语法，此时我们需要使用 webpack 进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</p>\n<p>执行打包编译命令 <code>webpack 要打包编译的文件路径 打包编译好后输出的文件路径</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack src/js/main.js dist/bundle.js</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/17869CD9722B4505B59D1E5E695838AA?method=download&amp;shareKey=b79bc9b1c1be9a38ec34adafc8f925f0\" alt=\"webpack src/js/main.js dist/bundle.js的执行结果\"></p>\n<p>从上图我们可以看出 <code>webpack</code> 编译了 <code>main.js</code>  </p>\n<p>执行完毕后会在根目录下生成一个 dist 文件夹此文件夹下会有一个 bundle.js 文件，这个文件就是编译好后的 main.js ，此时再在 imdex.html 页面引入 bundle.js 文件就可以看到结果了。</p>\n<h3 id=\"创建webpack配置文件处理main-js并简化打包命令\"><a href=\"#创建webpack配置文件处理main-js并简化打包命令\" class=\"headerlink\" title=\"创建webpack配置文件处理main.js并简化打包命令\"></a>创建webpack配置文件处理main.js并简化打包命令</h3><blockquote>\n<p>每次页面代码改变都要在命令行执行 <code>webpack src/js/main.js dist/bundle.js</code> 这么一大坨相当恶心，所以在项目根目录中创建 <code>webpack.config.js</code> 配置文件来简化打包命令</p>\n</blockquote>\n<p>由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以，我们需要在 <code>webpack.config.js</code> 中配置这两个路径即 entry(入口文件) 和 output(输出文件的路径)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *  配置文件的默认名称为 webpack.config.js </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  导入 Node 中的 Path(路径) 模块</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题2：为什么Node不识别 import？？？？   </span></span><br><span class=\"line\"><span class=\"comment\"> *           因为Node中的解析引擎是从 chrome中的V8移植过去的</span></span><br><span class=\"line\"><span class=\"comment\"> *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持</span></span><br><span class=\"line\"><span class=\"comment\"> *           因此 Node 也被迫不支持 import</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// import path from 'path'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  1.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式</span></span><br><span class=\"line\"><span class=\"comment\"> *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\"> *  并读取这个文件中导出的配置对象，来进行打包处理 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 2.1</span></span><br><span class=\"line\"><span class=\"comment\">   * entry 属性，表示要打包的文件的路径。</span></span><br><span class=\"line\"><span class=\"comment\">   *   path.join(__dirname,'') 是node.js中的一个全局变量</span></span><br><span class=\"line\"><span class=\"comment\">   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  <span class=\"comment\">/* 2.2</span></span><br><span class=\"line\"><span class=\"comment\">   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 </span></span><br><span class=\"line\"><span class=\"comment\">   *   path：指定输出文件的路径</span></span><br><span class=\"line\"><span class=\"comment\">   *   filename：指定输出文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好后直接在命令行执行 <code>webpack</code> 既可，执行 <code>webpack</code> 就相当于执行之前的 <code>webpack src/js/main.js dist/bundle.js</code>  命令。</p>\n<h3 id=\"实现webpack的实时打包构建\"><a href=\"#实现webpack的实时打包构建\" class=\"headerlink\" title=\"实现webpack的实时打包构建\"></a>实现webpack的实时打包构建</h3><blockquote>\n<p>由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 <code>webpack-dev-server</code> 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</p>\n</blockquote>\n<p>安装 webpack-dev-server 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，在命令行直接运行 <code>webpack-dev-server</code> 来进行打包，发现报错，此时需要借助于 <code>package.json</code> 文件中的指令，来运行 <code>webpack-dev-server</code> 命令。</p>\n<p>在 <code>package.json</code> 文件的 <code>scripts</code> 节点下新增 <code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>  指令</p>\n<p>执行命令 <code>npm run dev</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/E4FB23B7E92740BFA4AC48D5239B8056?method=download&amp;shareKey=3b0496f10c8f22590f8e35265681697f\" alt=\"npm run dev 执行结果\"></p>\n<p>发现可以进行实时打包，但是并没有生成 dist 目录和 bundle.js 文件，这是因为 <code>webpack-dev-server</code> 将打包好的文件放在了内存中，把 <code>bundle.js</code> 放在内存中的好处是由于需要实时打包编译，所以放在内存中速度会非常快。</p>\n<p>这个时候访问启动的 <code>http://localhost:8080/</code> 网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的 index 首页。</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/B9809B7C457A44E9B958434B9D8C9A35?method=download&amp;shareKey=c087b7991223efd5188cc7fdd121f34f\" alt=\"访问 http://localhost:8080/\"></p>\n<p>点击进入首页后发现引用不到 <code>bundle.js</code> 文件，因为 <code>bundle.js</code> 此时在内存中放着，所以需要修改 <code>index.html</code> 中 <code>script</code> 的 <code>src</code> 属性为 <code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code> </p>\n<p>为了能在访问 <code>http://localhost:8080/</code> 的时候直接访问到index首页，可以使用 <code>--contentBase src</code> 指令来修改package.json 的 dev 指令来指定启动的根目录</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --contentBase src\"</span><br></pre></td></tr></table></figure>\n<p>同时修改 <code>index</code> 页面中 <code>script</code> 的 <code>src</code> 属性为 <code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>注意：修改 src 文件夹以外的文件后都需要重新启动终端</p>\n<h3 id=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h3><p><strong>(推荐)方式1：</strong></p>\n<p>修改 <code>package.json</code> 的script节点如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">–contentBase src</td>\n<td style=\"text-align:left\">表示指定默认打开目录为 src 目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–open</td>\n<td style=\"text-align:left\">表示自动打开浏览器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–port 3000</td>\n<td style=\"text-align:left\">表示打开的端口号为3000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–hot</td>\n<td style=\"text-align:left\">表示启用浏览器热更新</td>\n</tr>\n</tbody>\n</table>\n<p><strong>方式2：</strong></p>\n<ol>\n<li>修改  <code>webpack.config.js</code>  文件，新增  <code>devServer</code>  节点此节点为一个对象如下：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer:&#123;    <span class=\"comment\">// 这个节点配置了 webpack-dev-server 的相关指令</span></span><br><span class=\"line\">    hot:<span class=\"literal\">true</span>,  <span class=\"comment\">//启用浏览器热更新</span></span><br><span class=\"line\">    open:<span class=\"literal\">true</span>, <span class=\"comment\">//自动打开浏览器</span></span><br><span class=\"line\">    port:<span class=\"number\">4321</span>，<span class=\"comment\">//指定端口号为4321</span></span><br><span class=\"line\">    contentBase:<span class=\"string\">'src'</span><span class=\"comment\">//指定打开目录为src</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在头部引入<code>webpack</code>模块：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增 <code>plugins</code> 节点此节点为一个数组，在 <code>plugins</code> 节点下新增：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>注意：<code>package.json</code>  文件里的 <code>script</code> 节点中一定要添加 <code>“dev”:&quot;webpack-dev-server&quot;</code> 才能使用 <code>npm run dev</code> 命令进行实时打包</p>\n<h3 id=\"使用html-webpack-plugin插件配置启动页面\"><a href=\"#使用html-webpack-plugin插件配置启动页面\" class=\"headerlink\" title=\"使用html-webpack-plugin插件配置启动页面\"></a>使用html-webpack-plugin插件配置启动页面</h3><p>由于使用 <code>--contentBase</code> 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 <code>index.html</code> 中 <code>script</code> 标签的 <code>src</code> 属性，所以推荐大家使用 <code>html-webpack-plugin</code> 插件配置启动页面，该插件会自动生成 <code>index.html</code> 文件并把 <code>bundle.js</code> 注入到页面中！</p>\n<p>运行命令安装 html-webpack-plugin 插件到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<p>修改 <code>webpack.config.js</code> 配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/* 3.1 添加 plugins 节点配置插件 */</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/* 3.2 </span></span><br><span class=\"line\"><span class=\"comment\">     * new htmlWebpackPlugin(&#123;&#125;)：实例化 html-webpack-plugin 插件</span></span><br><span class=\"line\"><span class=\"comment\">     *   template: 指定要编译的模板文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     *   filename: 指定自动生成的HTML文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将 <code>index.html</code> 中 <code>script</code> 标签注释掉，因为 <code>html-webpack-plugin</code> 插件会自动把 <code>bundle.js</code> 注入到 <code>index.html</code> 页面中！</p>\n<h3 id=\"loaders简介\"><a href=\"#loaders简介\" class=\"headerlink\" title=\"loaders简介\"></a>loaders简介</h3><p>通过使用不同的 <code>loader</code>，<code>webpack</code> 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换 <code>scss</code> 为 <code>css</code>，或者把下一代的 JS 文件<code>（ES6，ES7)</code> 转换为现代浏览器兼容的 <code>JS</code> 文件，对 <code>React</code> 的开发而言，合适的 <code>Loaders</code> 可以把 <code>React</code> 的中用到的 <code>JSX</code> 文件转换为 <code>JS</code> 文件。</p>\n<p><code>Loaders</code> 需要单独安装并且需要在 <code>webpack.config.js</code> 中的 <code>modules</code> 关键字下进行配置</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>test</td>\n<td>用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</td>\n</tr>\n<tr>\n<td>loader/use</td>\n<td>loader 的名称，use 为 2.x 的写法推荐使用 use（必须）</td>\n</tr>\n<tr>\n<td>include</td>\n<td>添加必须处理的文件（文件夹）（可选）</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>屏蔽不需要处理的文件（文件夹）（可选）</td>\n</tr>\n<tr>\n<td>query</td>\n<td>为 loaders 提供额外的设置选项（可选）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"使用webpack打包css文件\"><a href=\"#使用webpack打包css文件\" class=\"headerlink\" title=\"使用webpack打包css文件\"></a>使用webpack打包css文件</h3><p>在页面中我们不可避免的要引入一些 CSS 文件比如说 base.css(页面样式的初始化)，我们可以在 <code>main.js</code> 里引入以作用全局。</p>\n<p>在页面中引入 CSS 可通过 main.js 里引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 3.0 使用 import '直接通过路径标识符' 引入base.css样式 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'../style/base.css'</span></span><br></pre></td></tr></table></figure>\n<p>引入 css 文件后发现报错：You may need an appropriate loader to handle this file type.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle.js:sourcemap:9947 Uncaught Error: Module parse failed: Unexpected token (10:12)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type.</span><br><span class=\"line\">| </span><br><span class=\"line\">| // 导入 css 文件</span><br><span class=\"line\">| import from '../style/index.css'</span><br><span class=\"line\">| </span><br><span class=\"line\">| /* 使用 :odd 选取奇数行,使用 :even 选取偶数行 */</span><br><span class=\"line\"></span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (bundle.js:sourcemap:9947)</span><br><span class=\"line\">    at __webpack_require__ (bundle.js:sourcemap:679)</span><br><span class=\"line\">    at fn (bundle.js:sourcemap:89)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (bundle.js:sourcemap:1015)</span><br><span class=\"line\">    at __webpack_require__ (bundle.js:sourcemap:679)</span><br><span class=\"line\">    at logLevel (bundle.js:sourcemap:725)</span><br><span class=\"line\">    at bundle.js:sourcemap:728</span><br></pre></td></tr></table></figure>\n<p>You may need an appropriate loader to handle this file type.（您可能需要一个合适的加载器来处理这个文件类型。）因为我们项目中没有配置处理 css 的 loader 所以才会报这个错误 </p>\n<p>安装处理 CSS文 件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 配置文件里添加 module 配置节点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">/* 4.0 添加 module 节点用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *     module：用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *       rules：配置文件的匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\">   *         use : 表示使用哪些模块来处理</span></span><br><span class=\"line\"><span class=\"comment\">   *               use 中相关 loader 模块的调用顺序是从后向前调用的</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">/* 5.0 添加处理 css 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>] &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：<code>use</code> 表示使用哪些模块来处理 <code>test</code> 所匹配到的文件；<code>use</code> 中相关 loader 模块的调用顺序是从后向前调用的；</p>\n<h3 id=\"使用webpack打包sass文件\"><a href=\"#使用webpack打包sass文件\" class=\"headerlink\" title=\"使用webpack打包sass文件\"></a>使用webpack打包sass文件</h3><p>页面中除了会引用 CSS 文件外有时还会用到 SASS 文件，需要用到什么文件直接在 main.js 里导入就会作用到全局整个项目，在 main.js 中通过 import ‘路径标识符’ 导入 index.scss 会发现报错，原因同上也是缺少相关的 loader 来处理 scss 文件，后续的 less、image 和一些高级 js语法 解决方案都一样，报错缺少什么 loader 就安装相关的 loader 即可。</p>\n<p>安装处理 sass 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 6.0 添加处理 sass 文件的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用webpack打包less文件\"><a href=\"#使用webpack打包less文件\" class=\"headerlink\" title=\"使用webpack打包less文件\"></a>使用webpack打包less文件</h3><p>安装处理 less 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i less-loader less --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 less文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 7.0 添加处理 less 文件的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>] &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用webpack处理css中的图片路径\"><a href=\"#使用webpack处理css中的图片路径\" class=\"headerlink\" title=\"使用webpack处理css中的图片路径\"></a>使用webpack处理css中的图片路径</h3><p>当我们在页面中用 \\<img> 标签来引入图片的时候没问题，但是使用 css 样式给某个标签设置背景图片就会报错，也是因为缺少相当的 loader 来处理我们 css 中的图片的路径。</p>\n<p>安装处理 url路径 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i url-loader file-loader --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 url路径 的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 8.0 添加处理 url路径 的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader'</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>通过查看元素我们可以看到默认将背景图片转为了 base64 编码格式的图片</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/9ADC8742826D45809DB61B287F3B295B?method=download&amp;shareKey=1b23f778252e3f2ec3146a6110c77f92\" alt=\"背景图片被转为了 base64 编码格式\"></p>\n<p>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 8.0 添加处理 url路径 的匹配规则 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader?limit=2000'</span> &#125;,</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/F4A9E47CC2EE4406B771109A9BF11D64?method=download&amp;shareKey=0fb8bee651e9c54ed74a7cd60f861ed9\" alt=\"指定小于2000字节的图片才会进行base64转码\"></p>\n<h3 id=\"使用babel处理高级JS语法\"><a href=\"#使用babel处理高级JS语法\" class=\"headerlink\" title=\"使用babel处理高级JS语法\"></a>使用babel处理高级JS语法</h3><p>现在的浏览器中只能识别部分的 ES6 语法，某些 js 的高级语法不能识别，比如 class类，我们是 main.js 里写入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 6.0 在 main.js 中写入 js 高级语法 </span></span><br><span class=\"line\"><span class=\"comment\"> * 在 class 内部，不能直接写语句   </span></span><br><span class=\"line\"><span class=\"comment\"> * 在类的作用内部，只能定义 方法 和 属性</span></span><br><span class=\"line\"><span class=\"comment\"> * class 只是一个 语法糖</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 静态属性</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> info = &#123; <span class=\"attr\">adderss</span>:<span class=\"string\">\"北京\"</span>, <span class=\"attr\">name</span>: <span class=\"string\">'jack'</span>, <span class=\"attr\">age</span>: <span class=\"number\">16</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.info)</span><br></pre></td></tr></table></figure>\n<p>浏览器会报错：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/EA3FBA751DF6436A91E6032BC1D1384E?method=download&amp;shareKey=3adae98e685c9980dd9ba0de69aa0a20\" alt=\"\"></p>\n<p>所以我们需要安装 babel 来处理这些高级语法将其转换为浏览器兼容的 <code>JS</code> 文件</p>\n<p>安装处理 babel 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装 babel 的转换语法到开发依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 包含了所有的ES相关的语法（两者二选一，推荐）  */</span></span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br><span class=\"line\"><span class=\"comment\">/* 支持ES语法到2015（两者二选一） */</span></span><br><span class=\"line\">cnpm i babel-preset-es2015 babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加相关 loader 模块的匹配规则</p>\n<p><strong>注意</strong>：一定要把 <code>node_modules</code> 文件夹添加到排除项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules 文件夹 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'babel-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br></pre></td></tr></table></figure>\n<p>在项目根目录中添加 <code>.babelrc</code> 文件，并修改这个配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意：如果安装的ES语法支持到2015侧这里为</span></span><br><span class=\"line\">    <span class=\"comment\">// \"presets\":[\"es2015\", \"stage-0\"],</span></span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"env\"</span>, <span class=\"string\">\"stage-0\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"plugins\"</span>:[<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：语法插件 <code>babel-preset-es2015</code> 可以更新为 <code>babel-preset-env</code> ，它包含了所有的ES相关的语法；</strong></p>\n<p>以上是 webpack 的一些基本的配置，下面我们将介绍如何将此案例改造成我们需要的 vue 开发环境</p>\n<h3 id=\"vue-单文件组件\"><a href=\"#vue-单文件组件\" class=\"headerlink\" title=\".vue 单文件组件\"></a>.vue 单文件组件</h3><blockquote>\n<p>官网：<a href=\"https://cn.vuejs.org/v2/guide/single-file-components.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/single-file-components.html</a></p>\n</blockquote>\n<p>在学习的时候我们使用  <code>Vue.component( &#39;login&#39;,  { template: &#39;&lt;h1&gt;登陆组件&lt;/h1&gt;&#39; })</code> 来定义全局组件，紧接着在每个页面内指定一个容器元素。</p>\n<p>这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p>\n<ul>\n<li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li>\n<li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\\</code></li>\n<li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li>\n<li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li>\n</ul>\n<p>文件扩展名为 <code>.vue</code> 的 <strong>single-file components(单文件组件)</strong> 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p>\n<h3 id=\"创建-Hello-vue-组件\"><a href=\"#创建-Hello-vue-组件\" class=\"headerlink\" title=\"创建 Hello.vue 组件\"></a>创建 Hello.vue 组件</h3><p>在网页中学习 <code>Vue</code> 的时候，直接把组件和 <code>script</code> 代码写到一起了，但是在使用<code>webpack</code> 结合 <code>vue</code> 开发的时候，推荐将所有的组件(页面)，单独定义为一个 <code>.vue</code> 文件，这每一个 <code>.vue</code> 文件都是一个单独的 <code>vue 组件</code> ，在每个 <code>.vue</code> 组件内部，分为 三部分： <code>template</code>  <code>script</code>  <code>style</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹</span><br><span class=\"line\">    一般都用 div 当作唯一的根元素 </span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt; &#123;&#123;Hello&#125;&#125; World! &lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">\t注意：在.vue的组件中，通过script标签来定义组件的行为</span><br><span class=\"line\">\t需要使用ES6中提供的export default方式，导出一个vue实例对象</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data:function()&#123;</span><br><span class=\"line\">    return &#123; msg: &apos;Hello&apos;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">注意：style标签要加上scoped属性避免后续多个组件样式覆盖 </span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  font-size: 20px;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>有了 <code>.vue</code> 组件，我们就进入了高级 JavaScript 应用领域。接下来就可以改造我们的 vue 的开发环境了。</p>\n<h3 id=\"在webpack中配置-vue组件页面的解析\"><a href=\"#在webpack中配置-vue组件页面的解析\" class=\"headerlink\" title=\"在webpack中配置.vue组件页面的解析\"></a>在webpack中配置.vue组件页面的解析</h3><p>改造 index.html 页面，改造好的 index.html 页面当做一个容器用来展示 vue 渲染的组件，至此这个页面后续基本不会再动了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 components 文件夹里创建 <code>App.vue</code> 页面根组件，在 vue 项目中所有的页面都被当作一个组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">\t注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹</span><br><span class=\"line\">\t一般都用 div 当作唯一的根元素 </span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;h3&gt;我是h3&lt;/h3&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">\t注意：在.vue的组件中，通过script标签来定义组件的行为，</span><br><span class=\"line\">\t需要使用ES6中提供的export default方式，导出一个vue实例对象</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &apos;OK&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 注意：style标签要加上 scoped 属性避免后续多个组件样式覆盖 --&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">h1 &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>执行命令安装 vue.js 到项目运行依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue -S</span><br></pre></td></tr></table></figure>\n<p>改造 <code>main.js</code> 入口文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 1.0 导入 Vue 组件 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"comment\">/* 2.0 导入 App.vue 页面根组件 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../components/App.vue'</span></span><br><span class=\"line\"><span class=\"comment\">/* 3.0 创建一个 Vue 实例并使用 render 函数，渲染指定的组件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在直接运行项目 npm run dev 会报错提示缺少相当的 loader 来处理我们的 .vue 文件</p>\n<p>运行命令安装 解析转换 .vue 的 loader 为开发依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */</span></span><br><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'vue-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>至此 vue 项目的基本开发环境已经搭建完成。</p>\n<h1 id=\"vue-开发环境的搭建回顾与梳理\"><a href=\"#vue-开发环境的搭建回顾与梳理\" class=\"headerlink\" title=\"vue 开发环境的搭建回顾与梳理\"></a>vue 开发环境的搭建回顾与梳理</h1><h2 id=\"1-0-初始化项目\"><a href=\"#1-0-初始化项目\" class=\"headerlink\" title=\"1.0 初始化项目\"></a>1.0 初始化项目</h2><p>新建项目文件夹，在文件夹的根目录执行 npm init -y 初始化项目，会得到 package.json 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-0-安装webpack到项目开发依赖\"><a href=\"#2-0-安装webpack到项目开发依赖\" class=\"headerlink\" title=\"2.0 安装webpack到项目开发依赖\"></a>2.0 安装webpack到项目开发依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i webpack -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-0-创建项目结构目录\"><a href=\"#3-0-创建项目结构目录\" class=\"headerlink\" title=\"3.0 创建项目结构目录\"></a>3.0 创建项目结构目录</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- src                // 项目的原文件目录 </span><br><span class=\"line\">|   |-- components     // .vue组件存放目录</span><br><span class=\"line\">|   |-- |-- App.vue    // 根组件</span><br><span class=\"line\">|   |-- images\t\t   // 图片目录</span><br><span class=\"line\">|   |-- js             // 项目的js文件存放目录</span><br><span class=\"line\">|   |-- |-- main.js    // 项目的js打包入口文件</span><br><span class=\"line\">|   |-- style\t\t   // 样式目录</span><br><span class=\"line\">|   |-- util\t\t   // 项目插件工具类存放目录</span><br><span class=\"line\">|   |-- index.html     // 文件的主页面</span><br><span class=\"line\">|-- package.json       // 项目所需要的各种模块和配置信息</span><br><span class=\"line\">|-- .babelrc\t\t   // 处理高级JS语法文件</span><br><span class=\"line\">|-- webpack.config.js  // webpack的配置文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-0-编辑-index-html\"><a href=\"#4-0-编辑-index-html\" class=\"headerlink\" title=\"4.0 编辑 index.html\"></a>4.0 编辑 index.html</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这是容器，将来Vue渲染的组件，会填充到这个位置显示 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-0-创建webpack配置文件处理main-js并简化打包命令\"><a href=\"#5-0-创建webpack配置文件处理main-js并简化打包命令\" class=\"headerlink\" title=\"5.0 创建webpack配置文件处理main.js并简化打包命令\"></a>5.0 创建webpack配置文件处理main.js并简化打包命令</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-0实现webpack的实时打包构建\"><a href=\"#6-0实现webpack的实时打包构建\" class=\"headerlink\" title=\"6.0实现webpack的实时打包构建\"></a>6.0实现webpack的实时打包构建</h2><p>安装 webpack-dev-server 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，在 <code>package.json</code> 文件的 <code>scripts</code> 节点下新增 <code>&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</code>  指令</p>\n<h2 id=\"7-0-实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#7-0-实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"7.0 实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>7.0 实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p>修改 <code>package.json</code> 的script节点如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"webpack-dev-server --contentBase src --open --port 3000 --hot\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-0-使用html-webpack-plugin插件配置启动页面\"><a href=\"#8-0-使用html-webpack-plugin插件配置启动页面\" class=\"headerlink\" title=\"8.0 使用html-webpack-plugin插件配置启动页面\"></a>8.0 使用html-webpack-plugin插件配置启动页面</h2><p>使用 <code>html-webpack-plugin</code> 插件配置启动页面，该插件会自动生成 <code>index.html</code> 文件并把 <code>bundle.js</code> 注入到页面中！运行命令安装 html-webpack-plugin 插件到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<p>修改 <code>webpack.config.js</code> 配置文件，导入html-webpack-plugin 自动生成 HTMl 文件插件并添加 plugins 节点配置插件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-0-使用webpack打包css文件\"><a href=\"#9-0-使用webpack打包css文件\" class=\"headerlink\" title=\"9.0 使用webpack打包css文件\"></a>9.0 使用webpack打包css文件</h2><p>安装处理 CSS文 件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i style-loader css-loader -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 配置文件里添加 module 配置节点并添加处理 css 文件的匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>] &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-使用webpack打包sass文件\"><a href=\"#10-使用webpack打包sass文件\" class=\"headerlink\" title=\"10. 使用webpack打包sass文件\"></a>10. 使用webpack打包sass文件</h2><p>安装处理 sass 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 sass 文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>] &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-使用webpack打包less文件\"><a href=\"#11-使用webpack打包less文件\" class=\"headerlink\" title=\"11. 使用webpack打包less文件\"></a>11. 使用webpack打包less文件</h2><p>安装处理 less 文件的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i less-loader less --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 less文件的 loader 模块匹配规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>] &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-使用webpack处理css中的图片路径\"><a href=\"#12-使用webpack处理css中的图片路径\" class=\"headerlink\" title=\"12. 使用webpack处理css中的图片路径\"></a>12. 使用webpack处理css中的图片路径</h2><p>安装处理 url路径 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i url-loader file-loader --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 url路径 的 loader 模块匹配规则，通过<code>limit</code>指定进行base64编码的图片大小；只有小于等于指定字节（byte）的图片才会进行base64编码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader?limit=2000'</span> &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-使用babel处理高级JS语法\"><a href=\"#13-使用babel处理高级JS语法\" class=\"headerlink\" title=\"13. 使用babel处理高级JS语法\"></a>13. 使用babel处理高级JS语法</h3><p>安装处理 babel 的 loader 到开发依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装 babel 的转换语法到开发依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 包含了所有的ES相关的语法（两者二选一，推荐）  */</span></span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br><span class=\"line\"><span class=\"comment\">/* 支持ES语法到2015（两者二选一） */</span></span><br><span class=\"line\">cnpm i babel-preset-es2015 babel-preset-stage<span class=\"number\">-0</span> --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加相关 loader 模块的匹配规则</p>\n<p><strong>注意</strong>：一定要把 <code>node_modules</code> 文件夹添加到排除项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'babel-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br></pre></td></tr></table></figure>\n<p>在项目根目录中添加 <code>.babelrc</code> 文件，并修改这个配置文件如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>:[<span class=\"string\">\"env\"</span>, <span class=\"string\">\"stage-0\"</span>],</span><br><span class=\"line\">    <span class=\"string\">\"plugins\"</span>:[<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-在webpack中配置-vue组件页面的解析\"><a href=\"#14-在webpack中配置-vue组件页面的解析\" class=\"headerlink\" title=\"14. 在webpack中配置.vue组件页面的解析\"></a>14. 在webpack中配置.vue组件页面的解析</h2><p>在 components 文件夹下新建 App.vue 根组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &apos;Hello World!&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  font-size: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>执行命令安装 vue.js 到项目运行依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue -S</span><br></pre></td></tr></table></figure>\n<p>改造 <code>main.js</code> 入口文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'../components/App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>运行命令安装 解析转换 .vue 的 loader 为开发依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure>\n<p>在 <code>webpack.config.js</code> 的 module 节点下添加处理 .vue 文件的 loader 模块匹配规则，并排除掉 node_modules文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'vue-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>vue 项目的基本开发环境搭建完成。</strong></p>\n<h1 id=\"快速搭建vue项目源文件\"><a href=\"#快速搭建vue项目源文件\" class=\"headerlink\" title=\"快速搭建vue项目源文件\"></a>快速搭建vue项目源文件</h1><p>每次开发项目都要一步一步的配环境相当的麻烦，拿到三个配置文件，创建好项目结构，打开终端运行 <code>npm install</code>  或  <code>cnpm install</code>  既可自动为我们安装 package.json 里面的所以的插件依赖和 loader</p>\n<h3 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"vue_webpack_demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --contentBase src --open --port 3000 --hot\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-runtime\"</span>: <span class=\"string\">\"^6.23.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^1.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.30.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"less\"</span>: <span class=\"string\">\"^2.7.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"less-loader\"</span>: <span class=\"string\">\"^4.0.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.7.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^6.0.6\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.19.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^0.6.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-loader\"</span>: <span class=\"string\">\"^13.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.5.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^3.10.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.9.7\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"vue\"</span>: <span class=\"string\">\"^2.5.11\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-config-js文件\"><a href=\"#webpack-config-js文件\" class=\"headerlink\" title=\"webpack.config.js文件\"></a>webpack.config.js文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> *  此文件为 webpackd 打包时候，默认要在项目根目录中查找的配置文件</span></span><br><span class=\"line\"><span class=\"comment\"> *  配置文件的默认名称为 webpack.config.js </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  导入 Node 中的 Path(路径) 模块</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题1：为什么这里可以使用 Node 语法或者 引用Node模块？因为 webpack 是基于 Node 构建的</span></span><br><span class=\"line\"><span class=\"comment\"> *    问题2：为什么Node不识别 import？？？？   </span></span><br><span class=\"line\"><span class=\"comment\"> *           因为Node中的解析引擎是从 chrome中的V8移植过去的</span></span><br><span class=\"line\"><span class=\"comment\"> *           由于 V8 专门是为浏览器开发的引擎所以暂时不支持</span></span><br><span class=\"line\"><span class=\"comment\"> *           因此 Node 也被迫不支持 import</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// import path from 'path'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 3.0 导入html-webpack-plugin 自动生成 HTMl 文件插件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  1.0</span></span><br><span class=\"line\"><span class=\"comment\"> *  module.exports 这是一个典型的 Node 模块向外暴露成员的方式</span></span><br><span class=\"line\"><span class=\"comment\"> *  向外界暴露一个配置对象，将来 webpack 在启动的时候会默认来查找 webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\"> *  并读取这个文件中导出的配置对象，来进行打包处理 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 2.1</span></span><br><span class=\"line\"><span class=\"comment\">   * entry 属性，表示要打包的文件的路径。</span></span><br><span class=\"line\"><span class=\"comment\">   *   path.join(__dirname,'') 是node.js中的一个全局变量</span></span><br><span class=\"line\"><span class=\"comment\">   *   它指向当前执行脚本所在的目录。主要是为了容错确保指向的目录正确性。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  entry: path.join(__dirname, <span class=\"string\">'src/js/main.js'</span>),</span><br><span class=\"line\">  <span class=\"comment\">/* 2.2</span></span><br><span class=\"line\"><span class=\"comment\">   * output属性：配置输出选项，配置打包好的文件的数据路径和文件名信息 </span></span><br><span class=\"line\"><span class=\"comment\">   *   path：指定输出文件的路径</span></span><br><span class=\"line\"><span class=\"comment\">   *   filename：指定输出文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/* 3.1 添加 plugins 节点配置插件 */</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">/* 3.2 </span></span><br><span class=\"line\"><span class=\"comment\">     * new htmlWebpackPlugin(&#123;&#125;)：实例化 html-webpack-plugin 插件</span></span><br><span class=\"line\"><span class=\"comment\">     *   template: 指定要编译的模板文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     *   filename: 指定自动生成的HTML文件的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">/* 4.0 添加 module 节点用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *     module：用来配置第三方 loader 模块</span></span><br><span class=\"line\"><span class=\"comment\">   *       rules：配置文件的匹配规则</span></span><br><span class=\"line\"><span class=\"comment\">   *         test: 用以匹配 loaders 所处理文件的拓展名的正则表达式</span></span><br><span class=\"line\"><span class=\"comment\">   *         use : 表示使用哪些模块来处理</span></span><br><span class=\"line\"><span class=\"comment\">   *               use 中相关 loader 模块的调用顺序是从后向前调用的</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">/* 5.0  添加处理 css 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>] &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 6.0  添加处理 sass 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'sass-loader'</span>] &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 7.0  添加处理 less 文件的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'less-loader'</span>] &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 8.0  添加处理 url路径 的匹配规则 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'url-loader?limit=200'</span> &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 9.0  添加处理 bable处理js高级语法 的匹配规则，并排除掉 node_modules文件夹 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'babel-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;,</span><br><span class=\"line\">      <span class=\"comment\">/* 10.0 添加处理 .vue 文件的匹配规则，并排除掉 node_modules文件夹 */</span></span><br><span class=\"line\">      &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">'vue-loader'</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"babelrc文件\"><a href=\"#babelrc文件\" class=\"headerlink\" title=\".babelrc文件\"></a>.babelrc文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t// 注意：如果安装的ES语法支持到2015侧这里为</span><br><span class=\"line\">    // \"presets\":[\"es2015\", \"stage-0\"],</span><br><span class=\"line\">    \"presets\":[\"env\", \"stage-0\"],</span><br><span class=\"line\">    \"plugins\":[\"transform-runtime\"]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue结合webpack项目流程-源码下载\"><a href=\"#vue结合webpack项目流程-源码下载\" class=\"headerlink\" title=\"vue结合webpack项目流程-源码下载\"></a>vue结合webpack项目流程-源码下载</h2><p><a href=\"https://note.youdao.com/share/?id=ab5df8e2ea58ab6e9a3b1679488b610c&amp;type=note#/\" target=\"_blank\" rel=\"noopener\">vue结合webpack项目流程-源码</a></p>\n"},{"title":"vue-cli3 配置详解","date":"2019-04-27T07:37:14.000Z","description":"vue-cli 3 就项目性能而言已经相当友好了，私有制定性也特别强，各种配置也特别贴心，可以根据项目大小和特性制定私有预设，对前期项目搭建而言效率极大提升了。","_content":"\n# vue-cli3.0 配置详解\n\n> [官方介绍](https://cli.vuejs.org/zh/guide/)\n\nvue-cli 3 就项目性能而言已经相当友好了，私有制定性也特别强，各种配置也特别贴心，可以根据项目大小和特性制定私有预设，对前期项目搭建而言效率极大提升了。\n\n\n\n## 新建项目\n\n```js\n# 安装\nnpm install -g @vue/cli\n# 新建项目\nvue create my-project\n# 项目启动\nnpm run serve\n# 打包\nnpm run build\n```\n\n\n\n### 配置选择\n\n3.0 版本包括  **默认预设配置** 和  **用户自定义配置**。\n\n- 默认预设配置：`default (babel, eslint)`\n- 用户自定义配置：`Manually select features`\n\n```shell\nC:\\Users\\Administrator\\Desktop\\vant-demo-master>vue create vue-cli3.0\n\nVue CLI v3.2.1\n┌───────────────────────────┐\n│  Update available: 3.3.0  │\n└───────────────────────────┘\n? Please pick a preset: (Use arrow keys)\n> default (babel, eslint)\n  Manually select features\n```\n\n\n\n### 自定义配置\n\n> **用户自定义配置包括以下功能：**\n>\n> `Babel `、`TypeScript `、`Progressive Web App (PWA) Support` 、`Router `、`Vuex `、C`SS Pre-processors` 、`Linter / Formatter` 、`Unit Testing` 、`E2E Testing`\n\n可以根据项目大小和功能体验配置不同的功能，`空格键 - 选中/反选` 、`按a键 - 全选/全不选`、`按i键 -反选已选择项` 、`上下键 - 上下移动选择`\n\n```bash\nVue CLI v3.2.1\n┌───────────────────────────┐\n│  Update available: 3.3.0  │\n└───────────────────────────┘\n? Please pick a preset: Manually select features\n? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection)\n>(*) Babel\n ( ) TypeScript\n ( ) Progressive Web App (PWA) Support\n (*) Router\n (*) Vuex\n (*) CSS Pre-processors\n ( ) Linter / Formatter\n ( ) Unit Testing\n ( ) E2E Testing\n```\n\n在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，这样下次可直接使用不需要再次配置。\n\n\n\n### 自定义配置细节\n\n在选择功能后按 `Enter 键` 会询问更细节的配置\n\n#### TypeScript\n\n```bash\nVue CLI v3.2.1\n┌───────────────────────────┐\n│  Update available: 3.3.0  │\n└───────────────────────────┘\n? Please pick a preset: Manually select features\n? Check the features needed for your project: Babel, TS, PWA, Router, Vuex, CSS Pre-processors, Linter, Unit, E2E\n# 是否使用class风格的组件语法\n? Use class-style component syntax? (Y/n)\n# 是否使用babel做转义\n? Use Babel alongside TypeScript for auto-detected polyfills? (Y/n)\n```\n\n#### Router \n\n```bash\n# 路由器使用 history 历史模式\n? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)Y\n```\n\n#### CSS Pre-processors\n\n```bash\n# 选择CSS 预处理类型\n? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)\n> Sass/SCSS\n  Less\n  Stylus\n```\n\n#### Linter / Formatter\n\n```bash\n# 选择Linter / Formatter规范类型\n? Pick a linter / formatter config: (Use arrow keys)\n  TSLint\n  ESLint with error prevention only\n  ESLint + Airbnb config\n  ESLint + Standard config\n> ESLint + Prettier\n  ? Pick additional lint features: \n  >(*) Lint on save\n   ( ) Lint and fix on commit\n```\n\n#### Unit Testing\n\n```bash\n# 选择一个单元测试解决方案\n? Pick a unit testing solution: (Use arrow keys)\n> Mocha + Chai\n  Jest\n```\n\n#### E2E Testing\n\n```bash\n# 选择一个E2E测试解决方案\n? Pick a E2E testing solution: (Use arrow keys)\n> Cypress (Chrome only)\n  Nightwatch (Selenium-based)\n```\n\n#### 配置的存放类型\n\n```bash\n# 选择 Babel, PostCSS, ESLint 等自定义配置的存放位置 \n? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)\n> In dedicated config files\n  In package.json\n```\n\n#### 是否保存为配置预设值\n\n```bash\n# 在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，下次可直接使用不需要再次配置。\nSave this as a preset for future projects? (y/N)N\n```\n\n## 环境变量和模式\n\n> vue-cli3.0 移除了配置文件目录： config和build文件夹。可以说是非常的精简了，那移除了配置文件目录后如何自定义配置环境变量和模式呢 ?\n\n\n\n### 环境变量和模式的作用\n\n所有方法都是来源于现实的需求。在一个产品的前端开发过程中，一般来说会经历本地开发、测试脚本、开发自测、测试环境、预上线环境，然后才能正式的发布。\n\n对应每一个环境可能都会有所差异，比如说服务器地址、接口地址、websorket地址…… 等等。在各个环境切换的时候，就需要不同的配置参数，所以就可以用环境变量和模式，来方便我们管理。\n\n\n\n### 环境变量\n\ncli-3.0 总共提供了四种方式来制定环境变量都是在根目录下添加 `.env` 文件：\n\n```bash\n# 注意在根目录下创建的 .env 文件不需要加后缀\n.env              # 在所有的环境中被载入(不知道这个存在的意义，所有的都需要的也就不需要配置了吧)\n.env.local        # 在所有的环境中被载入，与 .env 的区别是只会在本地，该文件不会被git跟踪\n.env.[mode]       # 只在指定的模式中被载入，比如 .env.development 来配置开发环境的配置\n.env.[mode].local # 只在指定的模式中被载入，与.env.[mode]的区别也只是会在本地生效，该文件不会被git跟踪\n```\n\n**注意在根目录下创建的 `.env` 文件不需要加后缀**\n\n环境文件里只能包含环境变量的 `键=值`对：\n\n```bash\nNODE_ENV = development\nVUE_APP_PATTERN=aaa\n```\n\n\n\n### 环境变量的使用\n\n设置完环境变量之后就可以在我们的项目中使用这两个变量了。\n\n不过还需要注意的是在项目的不同地方使用，限制也不一样。\n\n1. 在项目中，也就是 `src` 中使用环境变量的话，必须以 `process.en` 开头。\n\n   例如我们可以在 `main.js` 中直接输出：`console.log(process.env.VUE_APP_PATTERN)`\n\n2. 在 `webpack` 配置中使用，没什么限制，可以省略 `process.env` 直接通过 `NODE_ENV` 变量名来使用\n\n3. 在 `public/index.html` 中的使用分三类：（没怎么用过）\n\n   ```html\n   <%= VAR %> 用于非转换插值  \n   例如：`<link rel=\"shortcut icon\" href=\"<%= BASE_URL %>favicon.ico\">`\n   <%- VAR %> 用于HTML转义插值\n   <% expression %> 用于JavaScript控制流 \n   ```\n\n\n\n### 模式\n\n模式是Vue CLI项目中的一个重要概念。默认情况下，Vue CLI项目中有三种模式：\n\n1. development：在`vue-cli-service serve`下，即开发环境使用\n2. production：在`vue-cli-service build` 和`vue-cli-service test:e2e`下，即正式环境使用\n3. test： 在`vue-cli-service test:unit`下使用\n\n另外，如果你想要修改模式下默认的环境变量的话可以通过--mode来实现，例如：\n\n```\n \"dev-build\": \"vue-cli-service build --mode development\"\n```\n\n有环境变量就能完成我们的需求了，为什么需要有模式的存在，个人认为模式是为了提供给第三方的插件一个辨识。例如vuex可以根据模式的不同，在development自动注入`devtoolPlugin`插件，利于开发，而在production中检测到错误不会进行console。\n\n### 举例\n\n说完了概念，可能还是比较模糊，可以试着添加一个 `stage` 环境，用来模拟预上线。\n首先在 `package.json` 添加一种类型，并修改默认环境变量为 `stage` 环境变量\n\n```json\n# package.json\n\"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"stage\": \"vue-cli-service build --mode stage\"\n},\n```\n\n在根目录下创建 `.env.test` 文件，来声明变量：\n\n```json\n# .env.test文件\nNODE_EVN = production\nVUE_APP_CURRENTMODE = stage\noutputDir = stage\n```\n\n这里声明的 `NODE_EVN = production ` 用来表示这是生产环境，`VUE_APP_CURRENTMODE`为项目变量，`outputDir` 为除数打包后文件的地址。\n在 `vue.config.js` 中使用环境变量，制定输出文件为环境变量配置的文件：\n\n```js\n# vue.config.js\nmodule.exports = {\n    outputDir: process.env.outputDir,\n    assetsDir: 'static'\n}\n```\n\n最后执行命令 `npm run stage` 能看到根目录下生成了 `stage` 文件，这样我们就配置完了 `stage` 环境。\n\n详细的项目地址可以参考：[以vue-cli3.0为基础搭建的一个工程化前端demo](https://github.com/Abiel1024/vue-project)\n\n\n\n## vue.config.js 自定义配置\n\n### 完整默认配置\n\n```js\nmodule.exports = {\n // 基本路径\n baseUrl: '/',\n // 输出文件目录\n outputDir: 'dist',\n // eslint-loader 是否在保存的时候检查\n lintOnSave: true,\n // use the full build with in-browser compiler?\n // https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only\n compiler: false,\n // webpack配置\n // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\n chainWebpack: () => {},\n configureWebpack: () => {},\n // vue-loader 配置项\n // https://vue-loader.vuejs.org/en/options.html\n vueLoader: {},\n // 生产环境是否生成 sourceMap 文件\n productionSourceMap: true,\n // css相关配置\n css: {\n  // 是否使用css分离插件 ExtractTextPlugin\n  extract: true,\n  // 开启 CSS source maps?\n  sourceMap: false,\n  // css预设器配置项\n  loaderOptions: {},\n  // 启用 CSS modules for all css / pre-processor files.\n  modules: false\n },\n // use thread-loader for babel & TS in production build\n // enabled by default if the machine has more than 1 cores\n parallel: require('os').cpus().length > 1,\n // 是否启用dll\n // See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode\n dll: false,\n // PWA 插件相关配置\n // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa\n pwa: {},\n // webpack-dev-server 相关配置\n devServer: {\n  open: process.platform === 'darwin',\n  host: '0.0.0.0',\n  port: 8080,\n  https: false,\n  hotOnly: false,\n  proxy: null, // 设置代理\n  before: app => {}\n },\n // 第三方插件配置\n pluginOptions: {\n  // ...\n }\n}\n```\n\n\n\n\n\n## 样式全局变量与方法注入\n\n> [向预处理器 Loader 传递选项](https://cli.vuejs.org/zh/guide/css.html#%E5%90%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-loader-%E4%BC%A0%E9%80%92%E9%80%89%E9%A1%B9)\n\n有的时候你想要向 webpack 的预处理器 loader 传递选项。你可以使用 `vue.config.js` 中的 `css.loaderOptions` 选项。比如你可以这样向所有 Sass 样式传入共享的全局变量：\n\n```js\n// vue.config.js\nmodule.exports = {\n  css: {\n    loaderOptions: {\n      // 给 sass-loader 传递选项\n      sass: {\n        // @/ 是 src/ 的别名\n        // 所以这里假设你有 `src/variables.scss` 这个文件\n        data: `@import \"@/variables.scss\";`\n      }\n    }\n  }\n}\n```\n\nLoader 可以通过 `loaderOptions` 配置，包括：\n\n- [css-loader](https://github.com/webpack-contrib/css-loader)\n- [postcss-loader](https://github.com/postcss/postcss-loader)\n- [sass-loader](https://github.com/webpack-contrib/sass-loader)\n- [less-loader](https://github.com/webpack-contrib/less-loader)\n- [stylus-loader](https://github.com/shama/stylus-loader)\n\n\n\n\n\n## 移动端单位适配\n\n配置常用到的插件有：\n\n- `amfe-flexible`：让网页根据设备dpi和宽度，利用viewport和html根元素的font-size配合rem来适配不同尺寸的移动端设备\n- `postcss-pxtorem`：将项目中css的px转成rem单位，免去计算烦恼\n\n### amfe-flexible 与 pxtorem\n\n#### 安装\n\n```js\n# 安装 amfe-flexible\nnpm i amfe-flexible -S\n\n# 安装 pxtorem\nnpm install postcss-pxtorem -D\n```\n\n#### **amfe-flexible 引入**\n\n```js\n# 入口文件 main.js\nimport 'amfe-flexible';\n```\n\n#### pxtorem配置\n\n> rootValue ：  设计稿宽度的1/10。\n>\n> propList：需要做转化处理的属性，如`hight`、`width`、`margin`等，`*`表示全部。\n>\n> **注意 ：pxtorem 中，对于想忽略的 px 写成大写即可，如 `border:1PX solid #fff;`**\n\n**pxtorem 配置有两种方式：**\n\n1. 从根目录下的 postcss.config.js  引入：\n\n   ```js\n   # postcss.config.js\n   module.exports = {\n       plugins: {\n           'autoprefixer': {\n               browsers: ['Android >= 4.0', 'iOS >= 7']\n           },\n           'postcss-pxtorem': {\n                 rootValue: 37.5,\n                 propList: ['*']\n           }\n       }\n   }\n   ```\n\n2. 从根目录下的 vue.config.js 引入：\n\n   ```js\n   # vue.config.js\n   const autoprefixer = require('autoprefixer');\n   const pxtorem = require('postcss-pxtorem');\n   \n   module.exports = {\n       css: {\n           loaderOptions: {\n               postcss: {\n                   plugins: [\n                       autoprefixer(),\n                       pxtorem({\n                           rootValue: 37.5,\n                           propList: ['*']\n                       })\n                   ]\n               }\n           }\n       }\n   }\n   ```\n\n#### 关于字号\n\n配置完成后运行项目可以发现文字不给定字号是不会随屏幕缩放的，解决办法有两种：\n\n1. 给每个文字明确的字号大小\n2. 在 `app.vue` 里给根元素 `#app` 设置字体大小（推荐）","source":"_posts/vue-cli3 配置详解.md","raw":"---\ntitle: vue-cli3 配置详解\ndate: 2019-04-27 15:37:14\ntags: [vue,vue-cli]\ncategories: 前端\ndescription: vue-cli 3 就项目性能而言已经相当友好了，私有制定性也特别强，各种配置也特别贴心，可以根据项目大小和特性制定私有预设，对前期项目搭建而言效率极大提升了。\n---\n\n# vue-cli3.0 配置详解\n\n> [官方介绍](https://cli.vuejs.org/zh/guide/)\n\nvue-cli 3 就项目性能而言已经相当友好了，私有制定性也特别强，各种配置也特别贴心，可以根据项目大小和特性制定私有预设，对前期项目搭建而言效率极大提升了。\n\n\n\n## 新建项目\n\n```js\n# 安装\nnpm install -g @vue/cli\n# 新建项目\nvue create my-project\n# 项目启动\nnpm run serve\n# 打包\nnpm run build\n```\n\n\n\n### 配置选择\n\n3.0 版本包括  **默认预设配置** 和  **用户自定义配置**。\n\n- 默认预设配置：`default (babel, eslint)`\n- 用户自定义配置：`Manually select features`\n\n```shell\nC:\\Users\\Administrator\\Desktop\\vant-demo-master>vue create vue-cli3.0\n\nVue CLI v3.2.1\n┌───────────────────────────┐\n│  Update available: 3.3.0  │\n└───────────────────────────┘\n? Please pick a preset: (Use arrow keys)\n> default (babel, eslint)\n  Manually select features\n```\n\n\n\n### 自定义配置\n\n> **用户自定义配置包括以下功能：**\n>\n> `Babel `、`TypeScript `、`Progressive Web App (PWA) Support` 、`Router `、`Vuex `、C`SS Pre-processors` 、`Linter / Formatter` 、`Unit Testing` 、`E2E Testing`\n\n可以根据项目大小和功能体验配置不同的功能，`空格键 - 选中/反选` 、`按a键 - 全选/全不选`、`按i键 -反选已选择项` 、`上下键 - 上下移动选择`\n\n```bash\nVue CLI v3.2.1\n┌───────────────────────────┐\n│  Update available: 3.3.0  │\n└───────────────────────────┘\n? Please pick a preset: Manually select features\n? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection)\n>(*) Babel\n ( ) TypeScript\n ( ) Progressive Web App (PWA) Support\n (*) Router\n (*) Vuex\n (*) CSS Pre-processors\n ( ) Linter / Formatter\n ( ) Unit Testing\n ( ) E2E Testing\n```\n\n在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，这样下次可直接使用不需要再次配置。\n\n\n\n### 自定义配置细节\n\n在选择功能后按 `Enter 键` 会询问更细节的配置\n\n#### TypeScript\n\n```bash\nVue CLI v3.2.1\n┌───────────────────────────┐\n│  Update available: 3.3.0  │\n└───────────────────────────┘\n? Please pick a preset: Manually select features\n? Check the features needed for your project: Babel, TS, PWA, Router, Vuex, CSS Pre-processors, Linter, Unit, E2E\n# 是否使用class风格的组件语法\n? Use class-style component syntax? (Y/n)\n# 是否使用babel做转义\n? Use Babel alongside TypeScript for auto-detected polyfills? (Y/n)\n```\n\n#### Router \n\n```bash\n# 路由器使用 history 历史模式\n? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)Y\n```\n\n#### CSS Pre-processors\n\n```bash\n# 选择CSS 预处理类型\n? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)\n> Sass/SCSS\n  Less\n  Stylus\n```\n\n#### Linter / Formatter\n\n```bash\n# 选择Linter / Formatter规范类型\n? Pick a linter / formatter config: (Use arrow keys)\n  TSLint\n  ESLint with error prevention only\n  ESLint + Airbnb config\n  ESLint + Standard config\n> ESLint + Prettier\n  ? Pick additional lint features: \n  >(*) Lint on save\n   ( ) Lint and fix on commit\n```\n\n#### Unit Testing\n\n```bash\n# 选择一个单元测试解决方案\n? Pick a unit testing solution: (Use arrow keys)\n> Mocha + Chai\n  Jest\n```\n\n#### E2E Testing\n\n```bash\n# 选择一个E2E测试解决方案\n? Pick a E2E testing solution: (Use arrow keys)\n> Cypress (Chrome only)\n  Nightwatch (Selenium-based)\n```\n\n#### 配置的存放类型\n\n```bash\n# 选择 Babel, PostCSS, ESLint 等自定义配置的存放位置 \n? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)\n> In dedicated config files\n  In package.json\n```\n\n#### 是否保存为配置预设值\n\n```bash\n# 在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，下次可直接使用不需要再次配置。\nSave this as a preset for future projects? (y/N)N\n```\n\n## 环境变量和模式\n\n> vue-cli3.0 移除了配置文件目录： config和build文件夹。可以说是非常的精简了，那移除了配置文件目录后如何自定义配置环境变量和模式呢 ?\n\n\n\n### 环境变量和模式的作用\n\n所有方法都是来源于现实的需求。在一个产品的前端开发过程中，一般来说会经历本地开发、测试脚本、开发自测、测试环境、预上线环境，然后才能正式的发布。\n\n对应每一个环境可能都会有所差异，比如说服务器地址、接口地址、websorket地址…… 等等。在各个环境切换的时候，就需要不同的配置参数，所以就可以用环境变量和模式，来方便我们管理。\n\n\n\n### 环境变量\n\ncli-3.0 总共提供了四种方式来制定环境变量都是在根目录下添加 `.env` 文件：\n\n```bash\n# 注意在根目录下创建的 .env 文件不需要加后缀\n.env              # 在所有的环境中被载入(不知道这个存在的意义，所有的都需要的也就不需要配置了吧)\n.env.local        # 在所有的环境中被载入，与 .env 的区别是只会在本地，该文件不会被git跟踪\n.env.[mode]       # 只在指定的模式中被载入，比如 .env.development 来配置开发环境的配置\n.env.[mode].local # 只在指定的模式中被载入，与.env.[mode]的区别也只是会在本地生效，该文件不会被git跟踪\n```\n\n**注意在根目录下创建的 `.env` 文件不需要加后缀**\n\n环境文件里只能包含环境变量的 `键=值`对：\n\n```bash\nNODE_ENV = development\nVUE_APP_PATTERN=aaa\n```\n\n\n\n### 环境变量的使用\n\n设置完环境变量之后就可以在我们的项目中使用这两个变量了。\n\n不过还需要注意的是在项目的不同地方使用，限制也不一样。\n\n1. 在项目中，也就是 `src` 中使用环境变量的话，必须以 `process.en` 开头。\n\n   例如我们可以在 `main.js` 中直接输出：`console.log(process.env.VUE_APP_PATTERN)`\n\n2. 在 `webpack` 配置中使用，没什么限制，可以省略 `process.env` 直接通过 `NODE_ENV` 变量名来使用\n\n3. 在 `public/index.html` 中的使用分三类：（没怎么用过）\n\n   ```html\n   <%= VAR %> 用于非转换插值  \n   例如：`<link rel=\"shortcut icon\" href=\"<%= BASE_URL %>favicon.ico\">`\n   <%- VAR %> 用于HTML转义插值\n   <% expression %> 用于JavaScript控制流 \n   ```\n\n\n\n### 模式\n\n模式是Vue CLI项目中的一个重要概念。默认情况下，Vue CLI项目中有三种模式：\n\n1. development：在`vue-cli-service serve`下，即开发环境使用\n2. production：在`vue-cli-service build` 和`vue-cli-service test:e2e`下，即正式环境使用\n3. test： 在`vue-cli-service test:unit`下使用\n\n另外，如果你想要修改模式下默认的环境变量的话可以通过--mode来实现，例如：\n\n```\n \"dev-build\": \"vue-cli-service build --mode development\"\n```\n\n有环境变量就能完成我们的需求了，为什么需要有模式的存在，个人认为模式是为了提供给第三方的插件一个辨识。例如vuex可以根据模式的不同，在development自动注入`devtoolPlugin`插件，利于开发，而在production中检测到错误不会进行console。\n\n### 举例\n\n说完了概念，可能还是比较模糊，可以试着添加一个 `stage` 环境，用来模拟预上线。\n首先在 `package.json` 添加一种类型，并修改默认环境变量为 `stage` 环境变量\n\n```json\n# package.json\n\"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"stage\": \"vue-cli-service build --mode stage\"\n},\n```\n\n在根目录下创建 `.env.test` 文件，来声明变量：\n\n```json\n# .env.test文件\nNODE_EVN = production\nVUE_APP_CURRENTMODE = stage\noutputDir = stage\n```\n\n这里声明的 `NODE_EVN = production ` 用来表示这是生产环境，`VUE_APP_CURRENTMODE`为项目变量，`outputDir` 为除数打包后文件的地址。\n在 `vue.config.js` 中使用环境变量，制定输出文件为环境变量配置的文件：\n\n```js\n# vue.config.js\nmodule.exports = {\n    outputDir: process.env.outputDir,\n    assetsDir: 'static'\n}\n```\n\n最后执行命令 `npm run stage` 能看到根目录下生成了 `stage` 文件，这样我们就配置完了 `stage` 环境。\n\n详细的项目地址可以参考：[以vue-cli3.0为基础搭建的一个工程化前端demo](https://github.com/Abiel1024/vue-project)\n\n\n\n## vue.config.js 自定义配置\n\n### 完整默认配置\n\n```js\nmodule.exports = {\n // 基本路径\n baseUrl: '/',\n // 输出文件目录\n outputDir: 'dist',\n // eslint-loader 是否在保存的时候检查\n lintOnSave: true,\n // use the full build with in-browser compiler?\n // https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only\n compiler: false,\n // webpack配置\n // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\n chainWebpack: () => {},\n configureWebpack: () => {},\n // vue-loader 配置项\n // https://vue-loader.vuejs.org/en/options.html\n vueLoader: {},\n // 生产环境是否生成 sourceMap 文件\n productionSourceMap: true,\n // css相关配置\n css: {\n  // 是否使用css分离插件 ExtractTextPlugin\n  extract: true,\n  // 开启 CSS source maps?\n  sourceMap: false,\n  // css预设器配置项\n  loaderOptions: {},\n  // 启用 CSS modules for all css / pre-processor files.\n  modules: false\n },\n // use thread-loader for babel & TS in production build\n // enabled by default if the machine has more than 1 cores\n parallel: require('os').cpus().length > 1,\n // 是否启用dll\n // See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode\n dll: false,\n // PWA 插件相关配置\n // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa\n pwa: {},\n // webpack-dev-server 相关配置\n devServer: {\n  open: process.platform === 'darwin',\n  host: '0.0.0.0',\n  port: 8080,\n  https: false,\n  hotOnly: false,\n  proxy: null, // 设置代理\n  before: app => {}\n },\n // 第三方插件配置\n pluginOptions: {\n  // ...\n }\n}\n```\n\n\n\n\n\n## 样式全局变量与方法注入\n\n> [向预处理器 Loader 传递选项](https://cli.vuejs.org/zh/guide/css.html#%E5%90%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-loader-%E4%BC%A0%E9%80%92%E9%80%89%E9%A1%B9)\n\n有的时候你想要向 webpack 的预处理器 loader 传递选项。你可以使用 `vue.config.js` 中的 `css.loaderOptions` 选项。比如你可以这样向所有 Sass 样式传入共享的全局变量：\n\n```js\n// vue.config.js\nmodule.exports = {\n  css: {\n    loaderOptions: {\n      // 给 sass-loader 传递选项\n      sass: {\n        // @/ 是 src/ 的别名\n        // 所以这里假设你有 `src/variables.scss` 这个文件\n        data: `@import \"@/variables.scss\";`\n      }\n    }\n  }\n}\n```\n\nLoader 可以通过 `loaderOptions` 配置，包括：\n\n- [css-loader](https://github.com/webpack-contrib/css-loader)\n- [postcss-loader](https://github.com/postcss/postcss-loader)\n- [sass-loader](https://github.com/webpack-contrib/sass-loader)\n- [less-loader](https://github.com/webpack-contrib/less-loader)\n- [stylus-loader](https://github.com/shama/stylus-loader)\n\n\n\n\n\n## 移动端单位适配\n\n配置常用到的插件有：\n\n- `amfe-flexible`：让网页根据设备dpi和宽度，利用viewport和html根元素的font-size配合rem来适配不同尺寸的移动端设备\n- `postcss-pxtorem`：将项目中css的px转成rem单位，免去计算烦恼\n\n### amfe-flexible 与 pxtorem\n\n#### 安装\n\n```js\n# 安装 amfe-flexible\nnpm i amfe-flexible -S\n\n# 安装 pxtorem\nnpm install postcss-pxtorem -D\n```\n\n#### **amfe-flexible 引入**\n\n```js\n# 入口文件 main.js\nimport 'amfe-flexible';\n```\n\n#### pxtorem配置\n\n> rootValue ：  设计稿宽度的1/10。\n>\n> propList：需要做转化处理的属性，如`hight`、`width`、`margin`等，`*`表示全部。\n>\n> **注意 ：pxtorem 中，对于想忽略的 px 写成大写即可，如 `border:1PX solid #fff;`**\n\n**pxtorem 配置有两种方式：**\n\n1. 从根目录下的 postcss.config.js  引入：\n\n   ```js\n   # postcss.config.js\n   module.exports = {\n       plugins: {\n           'autoprefixer': {\n               browsers: ['Android >= 4.0', 'iOS >= 7']\n           },\n           'postcss-pxtorem': {\n                 rootValue: 37.5,\n                 propList: ['*']\n           }\n       }\n   }\n   ```\n\n2. 从根目录下的 vue.config.js 引入：\n\n   ```js\n   # vue.config.js\n   const autoprefixer = require('autoprefixer');\n   const pxtorem = require('postcss-pxtorem');\n   \n   module.exports = {\n       css: {\n           loaderOptions: {\n               postcss: {\n                   plugins: [\n                       autoprefixer(),\n                       pxtorem({\n                           rootValue: 37.5,\n                           propList: ['*']\n                       })\n                   ]\n               }\n           }\n       }\n   }\n   ```\n\n#### 关于字号\n\n配置完成后运行项目可以发现文字不给定字号是不会随屏幕缩放的，解决办法有两种：\n\n1. 给每个文字明确的字号大小\n2. 在 `app.vue` 里给根元素 `#app` 设置字体大小（推荐）","slug":"vue-cli3 配置详解","published":1,"updated":"2019-04-27T09:01:59.605Z","_id":"cjuz8suz70007f4f420deapv9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"vue-cli3-0-配置详解\"><a href=\"#vue-cli3-0-配置详解\" class=\"headerlink\" title=\"vue-cli3.0 配置详解\"></a>vue-cli3.0 配置详解</h1><blockquote>\n<p><a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">官方介绍</a></p>\n</blockquote>\n<p>vue-cli 3 就项目性能而言已经相当友好了，私有制定性也特别强，各种配置也特别贴心，可以根据项目大小和特性制定私有预设，对前期项目搭建而言效率极大提升了。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\"># 新建项目</span><br><span class=\"line\">vue create my-project</span><br><span class=\"line\"># 项目启动</span><br><span class=\"line\">npm run serve</span><br><span class=\"line\"># 打包</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置选择\"><a href=\"#配置选择\" class=\"headerlink\" title=\"配置选择\"></a>配置选择</h3><p>3.0 版本包括  <strong>默认预设配置</strong> 和  <strong>用户自定义配置</strong>。</p>\n<ul>\n<li>默认预设配置：<code>default (babel, eslint)</code></li>\n<li>用户自定义配置：<code>Manually select features</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\Desktop\\vant-demo-master&gt;vue create vue-cli3.0</span><br><span class=\"line\"></span><br><span class=\"line\">Vue CLI v3.2.1</span><br><span class=\"line\">┌───────────────────────────┐</span><br><span class=\"line\">│  Update available: 3.3.0  │</span><br><span class=\"line\">└───────────────────────────┘</span><br><span class=\"line\">? Please pick a preset: (Use arrow keys)</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> default (babel, eslint)</span></span><br><span class=\"line\">  Manually select features</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h3><blockquote>\n<p><strong>用户自定义配置包括以下功能：</strong></p>\n<p><code>Babel</code>、<code>TypeScript</code>、<code>Progressive Web App (PWA) Support</code> 、<code>Router</code>、<code>Vuex</code>、C<code>SS Pre-processors</code> 、<code>Linter / Formatter</code> 、<code>Unit Testing</code> 、<code>E2E Testing</code></p>\n</blockquote>\n<p>可以根据项目大小和功能体验配置不同的功能，<code>空格键 - 选中/反选</code> 、<code>按a键 - 全选/全不选</code>、<code>按i键 -反选已选择项</code> 、<code>上下键 - 上下移动选择</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue CLI v3.2.1</span><br><span class=\"line\">┌───────────────────────────┐</span><br><span class=\"line\">│  Update available: 3.3.0  │</span><br><span class=\"line\">└───────────────────────────┘</span><br><span class=\"line\">? Please pick a preset: Manually select features</span><br><span class=\"line\">? Check the features needed <span class=\"keyword\">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class=\"line\">&gt;(*) Babel</span><br><span class=\"line\"> ( ) TypeScript</span><br><span class=\"line\"> ( ) Progressive Web App (PWA) Support</span><br><span class=\"line\"> (*) Router</span><br><span class=\"line\"> (*) Vuex</span><br><span class=\"line\"> (*) CSS Pre-processors</span><br><span class=\"line\"> ( ) Linter / Formatter</span><br><span class=\"line\"> ( ) Unit Testing</span><br><span class=\"line\"> ( ) E2E Testing</span><br></pre></td></tr></table></figure>\n<p>在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，这样下次可直接使用不需要再次配置。</p>\n<h3 id=\"自定义配置细节\"><a href=\"#自定义配置细节\" class=\"headerlink\" title=\"自定义配置细节\"></a>自定义配置细节</h3><p>在选择功能后按 <code>Enter 键</code> 会询问更细节的配置</p>\n<h4 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue CLI v3.2.1</span><br><span class=\"line\">┌───────────────────────────┐</span><br><span class=\"line\">│  Update available: 3.3.0  │</span><br><span class=\"line\">└───────────────────────────┘</span><br><span class=\"line\">? Please pick a preset: Manually select features</span><br><span class=\"line\">? Check the features needed <span class=\"keyword\">for</span> your project: Babel, TS, PWA, Router, Vuex, CSS Pre-processors, Linter, Unit, E2E</span><br><span class=\"line\"><span class=\"comment\"># 是否使用class风格的组件语法</span></span><br><span class=\"line\">? Use class-style component syntax? (Y/n)</span><br><span class=\"line\"><span class=\"comment\"># 是否使用babel做转义</span></span><br><span class=\"line\">? Use Babel alongside TypeScript <span class=\"keyword\">for</span> auto-detected polyfills? (Y/n)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 路由器使用 history 历史模式</span></span><br><span class=\"line\">? Use <span class=\"built_in\">history</span> mode <span class=\"keyword\">for</span> router? (Requires proper server setup <span class=\"keyword\">for</span> index fallback <span class=\"keyword\">in</span> production) (Y/n)Y</span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS-Pre-processors\"><a href=\"#CSS-Pre-processors\" class=\"headerlink\" title=\"CSS Pre-processors\"></a>CSS Pre-processors</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择CSS 预处理类型</span></span><br><span class=\"line\">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)</span><br><span class=\"line\">&gt; Sass/SCSS</span><br><span class=\"line\">  Less</span><br><span class=\"line\">  Stylus</span><br></pre></td></tr></table></figure>\n<h4 id=\"Linter-Formatter\"><a href=\"#Linter-Formatter\" class=\"headerlink\" title=\"Linter / Formatter\"></a>Linter / Formatter</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择Linter / Formatter规范类型</span></span><br><span class=\"line\">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class=\"line\">  TSLint</span><br><span class=\"line\">  ESLint with error prevention only</span><br><span class=\"line\">  ESLint + Airbnb config</span><br><span class=\"line\">  ESLint + Standard config</span><br><span class=\"line\">&gt; ESLint + Prettier</span><br><span class=\"line\">  ? Pick additional lint features: </span><br><span class=\"line\">  &gt;(*) Lint on save</span><br><span class=\"line\">   ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure>\n<h4 id=\"Unit-Testing\"><a href=\"#Unit-Testing\" class=\"headerlink\" title=\"Unit Testing\"></a>Unit Testing</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择一个单元测试解决方案</span></span><br><span class=\"line\">? Pick a unit testing solution: (Use arrow keys)</span><br><span class=\"line\">&gt; Mocha + Chai</span><br><span class=\"line\">  Jest</span><br></pre></td></tr></table></figure>\n<h4 id=\"E2E-Testing\"><a href=\"#E2E-Testing\" class=\"headerlink\" title=\"E2E Testing\"></a>E2E Testing</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择一个E2E测试解决方案</span></span><br><span class=\"line\">? Pick a E2E testing solution: (Use arrow keys)</span><br><span class=\"line\">&gt; Cypress (Chrome only)</span><br><span class=\"line\">  Nightwatch (Selenium-based)</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置的存放类型\"><a href=\"#配置的存放类型\" class=\"headerlink\" title=\"配置的存放类型\"></a>配置的存放类型</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择 Babel, PostCSS, ESLint 等自定义配置的存放位置 </span></span><br><span class=\"line\">? Where <span class=\"keyword\">do</span> you prefer placing config <span class=\"keyword\">for</span> Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class=\"line\">&gt; In dedicated config files</span><br><span class=\"line\">  In package.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"是否保存为配置预设值\"><a href=\"#是否保存为配置预设值\" class=\"headerlink\" title=\"是否保存为配置预设值\"></a>是否保存为配置预设值</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，下次可直接使用不需要再次配置。</span></span><br><span class=\"line\">Save this as a preset <span class=\"keyword\">for</span> future projects? (y/N)N</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境变量和模式\"><a href=\"#环境变量和模式\" class=\"headerlink\" title=\"环境变量和模式\"></a>环境变量和模式</h2><blockquote>\n<p>vue-cli3.0 移除了配置文件目录： config和build文件夹。可以说是非常的精简了，那移除了配置文件目录后如何自定义配置环境变量和模式呢 ?</p>\n</blockquote>\n<h3 id=\"环境变量和模式的作用\"><a href=\"#环境变量和模式的作用\" class=\"headerlink\" title=\"环境变量和模式的作用\"></a>环境变量和模式的作用</h3><p>所有方法都是来源于现实的需求。在一个产品的前端开发过程中，一般来说会经历本地开发、测试脚本、开发自测、测试环境、预上线环境，然后才能正式的发布。</p>\n<p>对应每一个环境可能都会有所差异，比如说服务器地址、接口地址、websorket地址…… 等等。在各个环境切换的时候，就需要不同的配置参数，所以就可以用环境变量和模式，来方便我们管理。</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>cli-3.0 总共提供了四种方式来制定环境变量都是在根目录下添加 <code>.env</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意在根目录下创建的 .env 文件不需要加后缀</span></span><br><span class=\"line\">.env              <span class=\"comment\"># 在所有的环境中被载入(不知道这个存在的意义，所有的都需要的也就不需要配置了吧)</span></span><br><span class=\"line\">.env.local        <span class=\"comment\"># 在所有的环境中被载入，与 .env 的区别是只会在本地，该文件不会被git跟踪</span></span><br><span class=\"line\">.env.[mode]       <span class=\"comment\"># 只在指定的模式中被载入，比如 .env.development 来配置开发环境的配置</span></span><br><span class=\"line\">.env.[mode].<span class=\"built_in\">local</span> <span class=\"comment\"># 只在指定的模式中被载入，与.env.[mode]的区别也只是会在本地生效，该文件不会被git跟踪</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意在根目录下创建的 <code>.env</code> 文件不需要加后缀</strong></p>\n<p>环境文件里只能包含环境变量的 <code>键=值</code>对：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV = development</span><br><span class=\"line\">VUE_APP_PATTERN=aaa</span><br></pre></td></tr></table></figure>\n<h3 id=\"环境变量的使用\"><a href=\"#环境变量的使用\" class=\"headerlink\" title=\"环境变量的使用\"></a>环境变量的使用</h3><p>设置完环境变量之后就可以在我们的项目中使用这两个变量了。</p>\n<p>不过还需要注意的是在项目的不同地方使用，限制也不一样。</p>\n<ol>\n<li><p>在项目中，也就是 <code>src</code> 中使用环境变量的话，必须以 <code>process.en</code> 开头。</p>\n<p>例如我们可以在 <code>main.js</code> 中直接输出：<code>console.log(process.env.VUE_APP_PATTERN)</code></p>\n</li>\n<li><p>在 <code>webpack</code> 配置中使用，没什么限制，可以省略 <code>process.env</code> 直接通过 <code>NODE_ENV</code> 变量名来使用</p>\n</li>\n<li><p>在 <code>public/index.html</code> 中的使用分三类：（没怎么用过）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">VAR</span> %&gt;</span> 用于非转换插值  </span><br><span class=\"line\">例如：`<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= BASE_URL %&gt;favicon.ico\"</span>&gt;</span>`</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">VAR</span> %&gt;</span> 用于HTML转义插值</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">expression</span> %&gt;</span> 用于JavaScript控制流</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><p>模式是Vue CLI项目中的一个重要概念。默认情况下，Vue CLI项目中有三种模式：</p>\n<ol>\n<li>development：在<code>vue-cli-service serve</code>下，即开发环境使用</li>\n<li>production：在<code>vue-cli-service build</code> 和<code>vue-cli-service test:e2e</code>下，即正式环境使用</li>\n<li>test： 在<code>vue-cli-service test:unit</code>下使用</li>\n</ol>\n<p>另外，如果你想要修改模式下默认的环境变量的话可以通过–mode来实现，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev-build&quot;: &quot;vue-cli-service build --mode development&quot;</span><br></pre></td></tr></table></figure>\n<p>有环境变量就能完成我们的需求了，为什么需要有模式的存在，个人认为模式是为了提供给第三方的插件一个辨识。例如vuex可以根据模式的不同，在development自动注入<code>devtoolPlugin</code>插件，利于开发，而在production中检测到错误不会进行console。</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>说完了概念，可能还是比较模糊，可以试着添加一个 <code>stage</code> 环境，用来模拟预上线。<br>首先在 <code>package.json</code> 添加一种类型，并修改默认环境变量为 <code>stage</code> 环境变量</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># package.json</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"serve\": \"vue-cli-service serve\",</span><br><span class=\"line\">    \"build\": \"vue-cli-service build\",</span><br><span class=\"line\">    \"stage\": \"vue-cli-service build --mode stage\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>在根目录下创建 <code>.env.test</code> 文件，来声明变量：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># .env.test文件</span><br><span class=\"line\">NODE_EVN = production</span><br><span class=\"line\">VUE_APP_CURRENTMODE = stage</span><br><span class=\"line\">outputDir = stage</span><br></pre></td></tr></table></figure>\n<p>这里声明的 <code>NODE_EVN = production</code> 用来表示这是生产环境，<code>VUE_APP_CURRENTMODE</code>为项目变量，<code>outputDir</code> 为除数打包后文件的地址。<br>在 <code>vue.config.js</code> 中使用环境变量，制定输出文件为环境变量配置的文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vue.config.js</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    outputDir: process.env.outputDir,</span><br><span class=\"line\">    assetsDir: <span class=\"string\">'static'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后执行命令 <code>npm run stage</code> 能看到根目录下生成了 <code>stage</code> 文件，这样我们就配置完了 <code>stage</code> 环境。</p>\n<p>详细的项目地址可以参考：<a href=\"https://github.com/Abiel1024/vue-project\" target=\"_blank\" rel=\"noopener\">以vue-cli3.0为基础搭建的一个工程化前端demo</a></p>\n<h2 id=\"vue-config-js-自定义配置\"><a href=\"#vue-config-js-自定义配置\" class=\"headerlink\" title=\"vue.config.js 自定义配置\"></a>vue.config.js 自定义配置</h2><h3 id=\"完整默认配置\"><a href=\"#完整默认配置\" class=\"headerlink\" title=\"完整默认配置\"></a>完整默认配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 基本路径</span></span><br><span class=\"line\"> baseUrl: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> <span class=\"comment\">// 输出文件目录</span></span><br><span class=\"line\"> outputDir: <span class=\"string\">'dist'</span>,</span><br><span class=\"line\"> <span class=\"comment\">// eslint-loader 是否在保存的时候检查</span></span><br><span class=\"line\"> lintOnSave: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> <span class=\"comment\">// use the full build with in-browser compiler?</span></span><br><span class=\"line\"> <span class=\"comment\">// https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only</span></span><br><span class=\"line\"> compiler: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> <span class=\"comment\">// webpack配置</span></span><br><span class=\"line\"> <span class=\"comment\">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class=\"line\"> chainWebpack: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;,</span><br><span class=\"line\"> configureWebpack: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;,</span><br><span class=\"line\"> <span class=\"comment\">// vue-loader 配置项</span></span><br><span class=\"line\"> <span class=\"comment\">// https://vue-loader.vuejs.org/en/options.html</span></span><br><span class=\"line\"> vueLoader: &#123;&#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 生产环境是否生成 sourceMap 文件</span></span><br><span class=\"line\"> productionSourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> <span class=\"comment\">// css相关配置</span></span><br><span class=\"line\"> css: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class=\"line\">  extract: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 开启 CSS source maps?</span></span><br><span class=\"line\">  sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// css预设器配置项</span></span><br><span class=\"line\">  loaderOptions: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 CSS modules for all css / pre-processor files.</span></span><br><span class=\"line\">  modules: <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// use thread-loader for babel &amp; TS in production build</span></span><br><span class=\"line\"> <span class=\"comment\">// enabled by default if the machine has more than 1 cores</span></span><br><span class=\"line\"> parallel: <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus().length &gt; <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"comment\">// 是否启用dll</span></span><br><span class=\"line\"> <span class=\"comment\">// See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode</span></span><br><span class=\"line\"> dll: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> <span class=\"comment\">// PWA 插件相关配置</span></span><br><span class=\"line\"> <span class=\"comment\">// see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class=\"line\"> pwa: &#123;&#125;,</span><br><span class=\"line\"> <span class=\"comment\">// webpack-dev-server 相关配置</span></span><br><span class=\"line\"> devServer: &#123;</span><br><span class=\"line\">  open: process.platform === <span class=\"string\">'darwin'</span>,</span><br><span class=\"line\">  host: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">  port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">  https: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  hotOnly: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  proxy: <span class=\"literal\">null</span>, <span class=\"comment\">// 设置代理</span></span><br><span class=\"line\">  before: <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 第三方插件配置</span></span><br><span class=\"line\"> pluginOptions: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"样式全局变量与方法注入\"><a href=\"#样式全局变量与方法注入\" class=\"headerlink\" title=\"样式全局变量与方法注入\"></a>样式全局变量与方法注入</h2><blockquote>\n<p><a href=\"https://cli.vuejs.org/zh/guide/css.html#%E5%90%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-loader-%E4%BC%A0%E9%80%92%E9%80%89%E9%A1%B9\" target=\"_blank\" rel=\"noopener\">向预处理器 Loader 传递选项</a></p>\n</blockquote>\n<p>有的时候你想要向 webpack 的预处理器 loader 传递选项。你可以使用 <code>vue.config.js</code> 中的 <code>css.loaderOptions</code> 选项。比如你可以这样向所有 Sass 样式传入共享的全局变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 sass-loader 传递选项</span></span><br><span class=\"line\">      sass: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// @/ 是 src/ 的别名</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以这里假设你有 `src/variables.scss` 这个文件</span></span><br><span class=\"line\">        data: <span class=\"string\">`@import \"@/variables.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Loader 可以通过 <code>loaderOptions</code> 配置，包括：</p>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a></li>\n<li><a href=\"https://github.com/postcss/postcss-loader\" target=\"_blank\" rel=\"noopener\">postcss-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/less-loader\" target=\"_blank\" rel=\"noopener\">less-loader</a></li>\n<li><a href=\"https://github.com/shama/stylus-loader\" target=\"_blank\" rel=\"noopener\">stylus-loader</a></li>\n</ul>\n<h2 id=\"移动端单位适配\"><a href=\"#移动端单位适配\" class=\"headerlink\" title=\"移动端单位适配\"></a>移动端单位适配</h2><p>配置常用到的插件有：</p>\n<ul>\n<li><code>amfe-flexible</code>：让网页根据设备dpi和宽度，利用viewport和html根元素的font-size配合rem来适配不同尺寸的移动端设备</li>\n<li><code>postcss-pxtorem</code>：将项目中css的px转成rem单位，免去计算烦恼</li>\n</ul>\n<h3 id=\"amfe-flexible-与-pxtorem\"><a href=\"#amfe-flexible-与-pxtorem\" class=\"headerlink\" title=\"amfe-flexible 与 pxtorem\"></a>amfe-flexible 与 pxtorem</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 amfe-flexible</span><br><span class=\"line\">npm i amfe-flexible -S</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装 pxtorem</span><br><span class=\"line\">npm install postcss-pxtorem -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"amfe-flexible-引入\"><a href=\"#amfe-flexible-引入\" class=\"headerlink\" title=\"amfe-flexible 引入\"></a><strong>amfe-flexible 引入</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 入口文件 main.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'amfe-flexible'</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pxtorem配置\"><a href=\"#pxtorem配置\" class=\"headerlink\" title=\"pxtorem配置\"></a>pxtorem配置</h4><blockquote>\n<p>rootValue ：  设计稿宽度的1/10。</p>\n<p>propList：需要做转化处理的属性，如<code>hight</code>、<code>width</code>、<code>margin</code>等，<code>*</code>表示全部。</p>\n<p><strong>注意 ：pxtorem 中，对于想忽略的 px 写成大写即可，如 <code>border:1PX solid #fff;</code></strong></p>\n</blockquote>\n<p><strong>pxtorem 配置有两种方式：</strong></p>\n<ol>\n<li><p>从根目录下的 postcss.config.js  引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># postcss.config.js</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: &#123;</span><br><span class=\"line\">        <span class=\"string\">'autoprefixer'</span>: &#123;</span><br><span class=\"line\">            browsers: [<span class=\"string\">'Android &gt;= 4.0'</span>, <span class=\"string\">'iOS &gt;= 7'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'postcss-pxtorem'</span>: &#123;</span><br><span class=\"line\">              rootValue: <span class=\"number\">37.5</span>,</span><br><span class=\"line\">              propList: [<span class=\"string\">'*'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从根目录下的 vue.config.js 引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vue.config.js</span><br><span class=\"line\"><span class=\"keyword\">const</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pxtorem = <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-pxtorem'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">        loaderOptions: &#123;</span><br><span class=\"line\">            postcss: &#123;</span><br><span class=\"line\">                plugins: [</span><br><span class=\"line\">                    autoprefixer(),</span><br><span class=\"line\">                    pxtorem(&#123;</span><br><span class=\"line\">                        rootValue: <span class=\"number\">37.5</span>,</span><br><span class=\"line\">                        propList: [<span class=\"string\">'*'</span>]</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"关于字号\"><a href=\"#关于字号\" class=\"headerlink\" title=\"关于字号\"></a>关于字号</h4><p>配置完成后运行项目可以发现文字不给定字号是不会随屏幕缩放的，解决办法有两种：</p>\n<ol>\n<li>给每个文字明确的字号大小</li>\n<li>在 <code>app.vue</code> 里给根元素 <code>#app</code> 设置字体大小（推荐）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue-cli3-0-配置详解\"><a href=\"#vue-cli3-0-配置详解\" class=\"headerlink\" title=\"vue-cli3.0 配置详解\"></a>vue-cli3.0 配置详解</h1><blockquote>\n<p><a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">官方介绍</a></p>\n</blockquote>\n<p>vue-cli 3 就项目性能而言已经相当友好了，私有制定性也特别强，各种配置也特别贴心，可以根据项目大小和特性制定私有预设，对前期项目搭建而言效率极大提升了。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\"># 新建项目</span><br><span class=\"line\">vue create my-project</span><br><span class=\"line\"># 项目启动</span><br><span class=\"line\">npm run serve</span><br><span class=\"line\"># 打包</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置选择\"><a href=\"#配置选择\" class=\"headerlink\" title=\"配置选择\"></a>配置选择</h3><p>3.0 版本包括  <strong>默认预设配置</strong> 和  <strong>用户自定义配置</strong>。</p>\n<ul>\n<li>默认预设配置：<code>default (babel, eslint)</code></li>\n<li>用户自定义配置：<code>Manually select features</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\Desktop\\vant-demo-master&gt;vue create vue-cli3.0</span><br><span class=\"line\"></span><br><span class=\"line\">Vue CLI v3.2.1</span><br><span class=\"line\">┌───────────────────────────┐</span><br><span class=\"line\">│  Update available: 3.3.0  │</span><br><span class=\"line\">└───────────────────────────┘</span><br><span class=\"line\">? Please pick a preset: (Use arrow keys)</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> default (babel, eslint)</span></span><br><span class=\"line\">  Manually select features</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h3><blockquote>\n<p><strong>用户自定义配置包括以下功能：</strong></p>\n<p><code>Babel</code>、<code>TypeScript</code>、<code>Progressive Web App (PWA) Support</code> 、<code>Router</code>、<code>Vuex</code>、C<code>SS Pre-processors</code> 、<code>Linter / Formatter</code> 、<code>Unit Testing</code> 、<code>E2E Testing</code></p>\n</blockquote>\n<p>可以根据项目大小和功能体验配置不同的功能，<code>空格键 - 选中/反选</code> 、<code>按a键 - 全选/全不选</code>、<code>按i键 -反选已选择项</code> 、<code>上下键 - 上下移动选择</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue CLI v3.2.1</span><br><span class=\"line\">┌───────────────────────────┐</span><br><span class=\"line\">│  Update available: 3.3.0  │</span><br><span class=\"line\">└───────────────────────────┘</span><br><span class=\"line\">? Please pick a preset: Manually select features</span><br><span class=\"line\">? Check the features needed <span class=\"keyword\">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class=\"line\">&gt;(*) Babel</span><br><span class=\"line\"> ( ) TypeScript</span><br><span class=\"line\"> ( ) Progressive Web App (PWA) Support</span><br><span class=\"line\"> (*) Router</span><br><span class=\"line\"> (*) Vuex</span><br><span class=\"line\"> (*) CSS Pre-processors</span><br><span class=\"line\"> ( ) Linter / Formatter</span><br><span class=\"line\"> ( ) Unit Testing</span><br><span class=\"line\"> ( ) E2E Testing</span><br></pre></td></tr></table></figure>\n<p>在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，这样下次可直接使用不需要再次配置。</p>\n<h3 id=\"自定义配置细节\"><a href=\"#自定义配置细节\" class=\"headerlink\" title=\"自定义配置细节\"></a>自定义配置细节</h3><p>在选择功能后按 <code>Enter 键</code> 会询问更细节的配置</p>\n<h4 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue CLI v3.2.1</span><br><span class=\"line\">┌───────────────────────────┐</span><br><span class=\"line\">│  Update available: 3.3.0  │</span><br><span class=\"line\">└───────────────────────────┘</span><br><span class=\"line\">? Please pick a preset: Manually select features</span><br><span class=\"line\">? Check the features needed <span class=\"keyword\">for</span> your project: Babel, TS, PWA, Router, Vuex, CSS Pre-processors, Linter, Unit, E2E</span><br><span class=\"line\"><span class=\"comment\"># 是否使用class风格的组件语法</span></span><br><span class=\"line\">? Use class-style component syntax? (Y/n)</span><br><span class=\"line\"><span class=\"comment\"># 是否使用babel做转义</span></span><br><span class=\"line\">? Use Babel alongside TypeScript <span class=\"keyword\">for</span> auto-detected polyfills? (Y/n)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 路由器使用 history 历史模式</span></span><br><span class=\"line\">? Use <span class=\"built_in\">history</span> mode <span class=\"keyword\">for</span> router? (Requires proper server setup <span class=\"keyword\">for</span> index fallback <span class=\"keyword\">in</span> production) (Y/n)Y</span><br></pre></td></tr></table></figure>\n<h4 id=\"CSS-Pre-processors\"><a href=\"#CSS-Pre-processors\" class=\"headerlink\" title=\"CSS Pre-processors\"></a>CSS Pre-processors</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择CSS 预处理类型</span></span><br><span class=\"line\">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)</span><br><span class=\"line\">&gt; Sass/SCSS</span><br><span class=\"line\">  Less</span><br><span class=\"line\">  Stylus</span><br></pre></td></tr></table></figure>\n<h4 id=\"Linter-Formatter\"><a href=\"#Linter-Formatter\" class=\"headerlink\" title=\"Linter / Formatter\"></a>Linter / Formatter</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择Linter / Formatter规范类型</span></span><br><span class=\"line\">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class=\"line\">  TSLint</span><br><span class=\"line\">  ESLint with error prevention only</span><br><span class=\"line\">  ESLint + Airbnb config</span><br><span class=\"line\">  ESLint + Standard config</span><br><span class=\"line\">&gt; ESLint + Prettier</span><br><span class=\"line\">  ? Pick additional lint features: </span><br><span class=\"line\">  &gt;(*) Lint on save</span><br><span class=\"line\">   ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure>\n<h4 id=\"Unit-Testing\"><a href=\"#Unit-Testing\" class=\"headerlink\" title=\"Unit Testing\"></a>Unit Testing</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择一个单元测试解决方案</span></span><br><span class=\"line\">? Pick a unit testing solution: (Use arrow keys)</span><br><span class=\"line\">&gt; Mocha + Chai</span><br><span class=\"line\">  Jest</span><br></pre></td></tr></table></figure>\n<h4 id=\"E2E-Testing\"><a href=\"#E2E-Testing\" class=\"headerlink\" title=\"E2E Testing\"></a>E2E Testing</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择一个E2E测试解决方案</span></span><br><span class=\"line\">? Pick a E2E testing solution: (Use arrow keys)</span><br><span class=\"line\">&gt; Cypress (Chrome only)</span><br><span class=\"line\">  Nightwatch (Selenium-based)</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置的存放类型\"><a href=\"#配置的存放类型\" class=\"headerlink\" title=\"配置的存放类型\"></a>配置的存放类型</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择 Babel, PostCSS, ESLint 等自定义配置的存放位置 </span></span><br><span class=\"line\">? Where <span class=\"keyword\">do</span> you prefer placing config <span class=\"keyword\">for</span> Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class=\"line\">&gt; In dedicated config files</span><br><span class=\"line\">  In package.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"是否保存为配置预设值\"><a href=\"#是否保存为配置预设值\" class=\"headerlink\" title=\"是否保存为配置预设值\"></a>是否保存为配置预设值</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在用户自定义配置之后，会询问是否保存当前的配置功能为将来的项目配置的预设值，下次可直接使用不需要再次配置。</span></span><br><span class=\"line\">Save this as a preset <span class=\"keyword\">for</span> future projects? (y/N)N</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境变量和模式\"><a href=\"#环境变量和模式\" class=\"headerlink\" title=\"环境变量和模式\"></a>环境变量和模式</h2><blockquote>\n<p>vue-cli3.0 移除了配置文件目录： config和build文件夹。可以说是非常的精简了，那移除了配置文件目录后如何自定义配置环境变量和模式呢 ?</p>\n</blockquote>\n<h3 id=\"环境变量和模式的作用\"><a href=\"#环境变量和模式的作用\" class=\"headerlink\" title=\"环境变量和模式的作用\"></a>环境变量和模式的作用</h3><p>所有方法都是来源于现实的需求。在一个产品的前端开发过程中，一般来说会经历本地开发、测试脚本、开发自测、测试环境、预上线环境，然后才能正式的发布。</p>\n<p>对应每一个环境可能都会有所差异，比如说服务器地址、接口地址、websorket地址…… 等等。在各个环境切换的时候，就需要不同的配置参数，所以就可以用环境变量和模式，来方便我们管理。</p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>cli-3.0 总共提供了四种方式来制定环境变量都是在根目录下添加 <code>.env</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意在根目录下创建的 .env 文件不需要加后缀</span></span><br><span class=\"line\">.env              <span class=\"comment\"># 在所有的环境中被载入(不知道这个存在的意义，所有的都需要的也就不需要配置了吧)</span></span><br><span class=\"line\">.env.local        <span class=\"comment\"># 在所有的环境中被载入，与 .env 的区别是只会在本地，该文件不会被git跟踪</span></span><br><span class=\"line\">.env.[mode]       <span class=\"comment\"># 只在指定的模式中被载入，比如 .env.development 来配置开发环境的配置</span></span><br><span class=\"line\">.env.[mode].<span class=\"built_in\">local</span> <span class=\"comment\"># 只在指定的模式中被载入，与.env.[mode]的区别也只是会在本地生效，该文件不会被git跟踪</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意在根目录下创建的 <code>.env</code> 文件不需要加后缀</strong></p>\n<p>环境文件里只能包含环境变量的 <code>键=值</code>对：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NODE_ENV = development</span><br><span class=\"line\">VUE_APP_PATTERN=aaa</span><br></pre></td></tr></table></figure>\n<h3 id=\"环境变量的使用\"><a href=\"#环境变量的使用\" class=\"headerlink\" title=\"环境变量的使用\"></a>环境变量的使用</h3><p>设置完环境变量之后就可以在我们的项目中使用这两个变量了。</p>\n<p>不过还需要注意的是在项目的不同地方使用，限制也不一样。</p>\n<ol>\n<li><p>在项目中，也就是 <code>src</code> 中使用环境变量的话，必须以 <code>process.en</code> 开头。</p>\n<p>例如我们可以在 <code>main.js</code> 中直接输出：<code>console.log(process.env.VUE_APP_PATTERN)</code></p>\n</li>\n<li><p>在 <code>webpack</code> 配置中使用，没什么限制，可以省略 <code>process.env</code> 直接通过 <code>NODE_ENV</code> 变量名来使用</p>\n</li>\n<li><p>在 <code>public/index.html</code> 中的使用分三类：（没怎么用过）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">VAR</span> %&gt;</span> 用于非转换插值  </span><br><span class=\"line\">例如：`<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= BASE_URL %&gt;favicon.ico\"</span>&gt;</span>`</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">VAR</span> %&gt;</span> 用于HTML转义插值</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">expression</span> %&gt;</span> 用于JavaScript控制流</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><p>模式是Vue CLI项目中的一个重要概念。默认情况下，Vue CLI项目中有三种模式：</p>\n<ol>\n<li>development：在<code>vue-cli-service serve</code>下，即开发环境使用</li>\n<li>production：在<code>vue-cli-service build</code> 和<code>vue-cli-service test:e2e</code>下，即正式环境使用</li>\n<li>test： 在<code>vue-cli-service test:unit</code>下使用</li>\n</ol>\n<p>另外，如果你想要修改模式下默认的环境变量的话可以通过–mode来实现，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev-build&quot;: &quot;vue-cli-service build --mode development&quot;</span><br></pre></td></tr></table></figure>\n<p>有环境变量就能完成我们的需求了，为什么需要有模式的存在，个人认为模式是为了提供给第三方的插件一个辨识。例如vuex可以根据模式的不同，在development自动注入<code>devtoolPlugin</code>插件，利于开发，而在production中检测到错误不会进行console。</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p>说完了概念，可能还是比较模糊，可以试着添加一个 <code>stage</code> 环境，用来模拟预上线。<br>首先在 <code>package.json</code> 添加一种类型，并修改默认环境变量为 <code>stage</code> 环境变量</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># package.json</span><br><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"serve\": \"vue-cli-service serve\",</span><br><span class=\"line\">    \"build\": \"vue-cli-service build\",</span><br><span class=\"line\">    \"stage\": \"vue-cli-service build --mode stage\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>在根目录下创建 <code>.env.test</code> 文件，来声明变量：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># .env.test文件</span><br><span class=\"line\">NODE_EVN = production</span><br><span class=\"line\">VUE_APP_CURRENTMODE = stage</span><br><span class=\"line\">outputDir = stage</span><br></pre></td></tr></table></figure>\n<p>这里声明的 <code>NODE_EVN = production</code> 用来表示这是生产环境，<code>VUE_APP_CURRENTMODE</code>为项目变量，<code>outputDir</code> 为除数打包后文件的地址。<br>在 <code>vue.config.js</code> 中使用环境变量，制定输出文件为环境变量配置的文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vue.config.js</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    outputDir: process.env.outputDir,</span><br><span class=\"line\">    assetsDir: <span class=\"string\">'static'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后执行命令 <code>npm run stage</code> 能看到根目录下生成了 <code>stage</code> 文件，这样我们就配置完了 <code>stage</code> 环境。</p>\n<p>详细的项目地址可以参考：<a href=\"https://github.com/Abiel1024/vue-project\" target=\"_blank\" rel=\"noopener\">以vue-cli3.0为基础搭建的一个工程化前端demo</a></p>\n<h2 id=\"vue-config-js-自定义配置\"><a href=\"#vue-config-js-自定义配置\" class=\"headerlink\" title=\"vue.config.js 自定义配置\"></a>vue.config.js 自定义配置</h2><h3 id=\"完整默认配置\"><a href=\"#完整默认配置\" class=\"headerlink\" title=\"完整默认配置\"></a>完整默认配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 基本路径</span></span><br><span class=\"line\"> baseUrl: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> <span class=\"comment\">// 输出文件目录</span></span><br><span class=\"line\"> outputDir: <span class=\"string\">'dist'</span>,</span><br><span class=\"line\"> <span class=\"comment\">// eslint-loader 是否在保存的时候检查</span></span><br><span class=\"line\"> lintOnSave: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> <span class=\"comment\">// use the full build with in-browser compiler?</span></span><br><span class=\"line\"> <span class=\"comment\">// https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only</span></span><br><span class=\"line\"> compiler: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> <span class=\"comment\">// webpack配置</span></span><br><span class=\"line\"> <span class=\"comment\">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class=\"line\"> chainWebpack: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;,</span><br><span class=\"line\"> configureWebpack: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;,</span><br><span class=\"line\"> <span class=\"comment\">// vue-loader 配置项</span></span><br><span class=\"line\"> <span class=\"comment\">// https://vue-loader.vuejs.org/en/options.html</span></span><br><span class=\"line\"> vueLoader: &#123;&#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 生产环境是否生成 sourceMap 文件</span></span><br><span class=\"line\"> productionSourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> <span class=\"comment\">// css相关配置</span></span><br><span class=\"line\"> css: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class=\"line\">  extract: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 开启 CSS source maps?</span></span><br><span class=\"line\">  sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// css预设器配置项</span></span><br><span class=\"line\">  loaderOptions: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 CSS modules for all css / pre-processor files.</span></span><br><span class=\"line\">  modules: <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// use thread-loader for babel &amp; TS in production build</span></span><br><span class=\"line\"> <span class=\"comment\">// enabled by default if the machine has more than 1 cores</span></span><br><span class=\"line\"> parallel: <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus().length &gt; <span class=\"number\">1</span>,</span><br><span class=\"line\"> <span class=\"comment\">// 是否启用dll</span></span><br><span class=\"line\"> <span class=\"comment\">// See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode</span></span><br><span class=\"line\"> dll: <span class=\"literal\">false</span>,</span><br><span class=\"line\"> <span class=\"comment\">// PWA 插件相关配置</span></span><br><span class=\"line\"> <span class=\"comment\">// see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class=\"line\"> pwa: &#123;&#125;,</span><br><span class=\"line\"> <span class=\"comment\">// webpack-dev-server 相关配置</span></span><br><span class=\"line\"> devServer: &#123;</span><br><span class=\"line\">  open: process.platform === <span class=\"string\">'darwin'</span>,</span><br><span class=\"line\">  host: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">  port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">  https: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  hotOnly: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  proxy: <span class=\"literal\">null</span>, <span class=\"comment\">// 设置代理</span></span><br><span class=\"line\">  before: <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 第三方插件配置</span></span><br><span class=\"line\"> pluginOptions: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"样式全局变量与方法注入\"><a href=\"#样式全局变量与方法注入\" class=\"headerlink\" title=\"样式全局变量与方法注入\"></a>样式全局变量与方法注入</h2><blockquote>\n<p><a href=\"https://cli.vuejs.org/zh/guide/css.html#%E5%90%91%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8-loader-%E4%BC%A0%E9%80%92%E9%80%89%E9%A1%B9\" target=\"_blank\" rel=\"noopener\">向预处理器 Loader 传递选项</a></p>\n</blockquote>\n<p>有的时候你想要向 webpack 的预处理器 loader 传递选项。你可以使用 <code>vue.config.js</code> 中的 <code>css.loaderOptions</code> 选项。比如你可以这样向所有 Sass 样式传入共享的全局变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 sass-loader 传递选项</span></span><br><span class=\"line\">      sass: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// @/ 是 src/ 的别名</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以这里假设你有 `src/variables.scss` 这个文件</span></span><br><span class=\"line\">        data: <span class=\"string\">`@import \"@/variables.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Loader 可以通过 <code>loaderOptions</code> 配置，包括：</p>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader\" target=\"_blank\" rel=\"noopener\">css-loader</a></li>\n<li><a href=\"https://github.com/postcss/postcss-loader\" target=\"_blank\" rel=\"noopener\">postcss-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a></li>\n<li><a href=\"https://github.com/webpack-contrib/less-loader\" target=\"_blank\" rel=\"noopener\">less-loader</a></li>\n<li><a href=\"https://github.com/shama/stylus-loader\" target=\"_blank\" rel=\"noopener\">stylus-loader</a></li>\n</ul>\n<h2 id=\"移动端单位适配\"><a href=\"#移动端单位适配\" class=\"headerlink\" title=\"移动端单位适配\"></a>移动端单位适配</h2><p>配置常用到的插件有：</p>\n<ul>\n<li><code>amfe-flexible</code>：让网页根据设备dpi和宽度，利用viewport和html根元素的font-size配合rem来适配不同尺寸的移动端设备</li>\n<li><code>postcss-pxtorem</code>：将项目中css的px转成rem单位，免去计算烦恼</li>\n</ul>\n<h3 id=\"amfe-flexible-与-pxtorem\"><a href=\"#amfe-flexible-与-pxtorem\" class=\"headerlink\" title=\"amfe-flexible 与 pxtorem\"></a>amfe-flexible 与 pxtorem</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装 amfe-flexible</span><br><span class=\"line\">npm i amfe-flexible -S</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装 pxtorem</span><br><span class=\"line\">npm install postcss-pxtorem -D</span><br></pre></td></tr></table></figure>\n<h4 id=\"amfe-flexible-引入\"><a href=\"#amfe-flexible-引入\" class=\"headerlink\" title=\"amfe-flexible 引入\"></a><strong>amfe-flexible 引入</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 入口文件 main.js</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'amfe-flexible'</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pxtorem配置\"><a href=\"#pxtorem配置\" class=\"headerlink\" title=\"pxtorem配置\"></a>pxtorem配置</h4><blockquote>\n<p>rootValue ：  设计稿宽度的1/10。</p>\n<p>propList：需要做转化处理的属性，如<code>hight</code>、<code>width</code>、<code>margin</code>等，<code>*</code>表示全部。</p>\n<p><strong>注意 ：pxtorem 中，对于想忽略的 px 写成大写即可，如 <code>border:1PX solid #fff;</code></strong></p>\n</blockquote>\n<p><strong>pxtorem 配置有两种方式：</strong></p>\n<ol>\n<li><p>从根目录下的 postcss.config.js  引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># postcss.config.js</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: &#123;</span><br><span class=\"line\">        <span class=\"string\">'autoprefixer'</span>: &#123;</span><br><span class=\"line\">            browsers: [<span class=\"string\">'Android &gt;= 4.0'</span>, <span class=\"string\">'iOS &gt;= 7'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">'postcss-pxtorem'</span>: &#123;</span><br><span class=\"line\">              rootValue: <span class=\"number\">37.5</span>,</span><br><span class=\"line\">              propList: [<span class=\"string\">'*'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从根目录下的 vue.config.js 引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vue.config.js</span><br><span class=\"line\"><span class=\"keyword\">const</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pxtorem = <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-pxtorem'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">        loaderOptions: &#123;</span><br><span class=\"line\">            postcss: &#123;</span><br><span class=\"line\">                plugins: [</span><br><span class=\"line\">                    autoprefixer(),</span><br><span class=\"line\">                    pxtorem(&#123;</span><br><span class=\"line\">                        rootValue: <span class=\"number\">37.5</span>,</span><br><span class=\"line\">                        propList: [<span class=\"string\">'*'</span>]</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"关于字号\"><a href=\"#关于字号\" class=\"headerlink\" title=\"关于字号\"></a>关于字号</h4><p>配置完成后运行项目可以发现文字不给定字号是不会随屏幕缩放的，解决办法有两种：</p>\n<ol>\n<li>给每个文字明确的字号大小</li>\n<li>在 <code>app.vue</code> 里给根元素 <code>#app</code> 设置字体大小（推荐）</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuz8suz70000f4f42xvbvbmc","category_id":"cjuz8suz70004f4f44mdy0xiq","_id":"cjuz8suzm000af4f48lroxp2m"},{"post_id":"cjuz8suz70002f4f4h7ig1dxm","category_id":"cjuz8suzm0008f4f40w08ykaw","_id":"cjuz8suzm000gf4f47d2md5ae"},{"post_id":"cjuz8suz70006f4f4engo5wkh","category_id":"cjuz8suzm0008f4f40w08ykaw","_id":"cjuz8suzm000if4f4vsgnlb45"},{"post_id":"cjuz8suz70007f4f420deapv9","category_id":"cjuz8suzm0008f4f40w08ykaw","_id":"cjuz8suzm000kf4f4jp3v3ojq"}],"PostTag":[{"post_id":"cjuz8suz70000f4f42xvbvbmc","tag_id":"cjuz8suz70005f4f4yiz09sz3","_id":"cjuz8suzm000df4f47pa5ks1y"},{"post_id":"cjuz8suz70000f4f42xvbvbmc","tag_id":"cjuz8suzm0009f4f4rsu3v5l5","_id":"cjuz8suzm000ef4f4awizr9l1"},{"post_id":"cjuz8suz70002f4f4h7ig1dxm","tag_id":"cjuz8suz70005f4f4yiz09sz3","_id":"cjuz8suzm000mf4f4c5bpgn18"},{"post_id":"cjuz8suz70002f4f4h7ig1dxm","tag_id":"cjuz8suzm000hf4f4x2ha13t7","_id":"cjuz8suzm000nf4f4u8fkl7gu"},{"post_id":"cjuz8suz70002f4f4h7ig1dxm","tag_id":"cjuz8suzm000jf4f4f3mwd5yb","_id":"cjuz8suzm000pf4f4mhhfml0q"},{"post_id":"cjuz8suz70006f4f4engo5wkh","tag_id":"cjuz8suz70005f4f4yiz09sz3","_id":"cjuz8suzm000sf4f47gmrn1m8"},{"post_id":"cjuz8suz70006f4f4engo5wkh","tag_id":"cjuz8suzm000hf4f4x2ha13t7","_id":"cjuz8suzm000tf4f4kyy9wolz"},{"post_id":"cjuz8suz70006f4f4engo5wkh","tag_id":"cjuz8suzm000qf4f4krqyisbb","_id":"cjuz8suzm000vf4f4wp8oc359"},{"post_id":"cjuz8suz70007f4f420deapv9","tag_id":"cjuz8suzm000hf4f4x2ha13t7","_id":"cjuz8suzm000wf4f4rnw2ovtx"},{"post_id":"cjuz8suz70007f4f420deapv9","tag_id":"cjuz8suzm000uf4f4qmshhmyw","_id":"cjuz8suzm000xf4f4ftpz3xpc"}],"Tag":[{"name":"前端","_id":"cjuz8suz70005f4f4yiz09sz3"},{"name":"博客","_id":"cjuz8suzm0009f4f4rsu3v5l5"},{"name":"vue","_id":"cjuz8suzm000hf4f4x2ha13t7"},{"name":"github","_id":"cjuz8suzm000jf4f4f3mwd5yb"},{"name":"webpack","_id":"cjuz8suzm000qf4f4krqyisbb"},{"name":"vue-cli","_id":"cjuz8suzm000uf4f4qmshhmyw"}]}}